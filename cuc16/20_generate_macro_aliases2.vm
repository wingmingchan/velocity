#** How about reading the code template and using it to generate all the macro aliases? *#
#macro( doTheRealWork $param1 $param2 )
    $param1 $param2!
#end

## proprietary data
#set( $aliases = [ "delegateA",  "delegateB", "delegateC" ] )

## business logic in the XML block

## library code
#set( $alias_code = $_.locateBlock( 
        "cuc/code-templates", "cascade-admin-webapp" 
    ).getXMLAsXMLElement().getChild( 
        "code-templates" 
    ).getChild( 
        "macroDoTheRealWorkAliasCode" ).Value )
#foreach( $alias in $aliases )
    #set( $stmt = $alias_code.replaceAll( "-macro_name-", $alias ) )
    Statement generated: $stmt
    #evaluate( $stmt )
#end

## client code
#delegateA( "Hello" "World" )
#delegateB( "Come" "on" )
#delegateC( "Shut" "up" )