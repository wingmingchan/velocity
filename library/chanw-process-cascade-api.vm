#*doc
《code》
《copyright》
Author: Wing Ming Chan
Copyright (c) 2018 Wing Ming Chan <chanw@upstate.edu>
MIT Licensed
Modification history:
5/23/2018 Added $KEY_ASSET.
2/19/2018 Fixed a bug in chanwProcessStructuredDataNodes.
9/8/2017 Added documentation of #chanwInvokeQueryWithMap.
8/30/2017 Updated chanwInvokeQuery with code to deal with hasMetadata.
Added constants related to $query.
8/21/2017 Added #chanwInvokeQueryWithMap.
8/7/2017 Started using macro names as namespace prefixes for local parameters.
7/21/2017 Moved global variables from chanw_global_values.
7/14/2017 Added more documentation.
7/13/2017 Added jdom.Element to $chanwGetFQINodeMap.
7/4/2017 Added structured data processing macros.
Removed #chanwGetPageBlockStructuredDataNodeByIdArray.
3/31/2017 Added #chanwGetAssetId and #chanwGetAssetType.
3/11/2017 Fixed a bug in #chanwImportScript.
2/5/2017 Added #chanwImportScript.
2/4/2017 Added #chanwIsAncestorOf and chanwIsDescendentOf.
1/20/2017 Added #chanwLocateAssetInAncestorFolder.
1/12/2017 Fixed a bug.
《/copyright》
《evaluate execute=“true”》
《div id=“hide-code1”》
《h2》Test Code and Results《/h2》
《pre》
=============================================================
${SINGLE_HASH}chanwConvertFQIToXPath( "a;0;b;1;c;3" )
#chanwConvertFQIToXPath( "a;0;b;1;c;3" )
${DOLLAR}chanwConvertFQIToXPath: $chanwConvertFQIToXPath
=============================================================
${SINGLE_HASH}set( ${DOLLAR}block = ${DOLLAR}_.locateBlock(
    "_cascade/blocks/data/test-wysiwyg", "web-services" ) )
${SINGLE_HASH}chanwProcessDataBlock( ${DOLLAR}block )
${SINGLE_HASH}set( ${DOLLAR}result = "${SINGLE_HASH}chanwDisplayCascadeAPIAsset( ${DOLLAR}DataBlockPropertyMap )" )
${DOLLAR}_EscapeTool.xml( ${DOLLAR}result )
#set( $block = $_.locateBlock(
    "_cascade/blocks/data/test-wysiwyg", "web-services" ) )
#chanwProcessDataBlock( $block )
#set( $result = "#chanwDisplayCascadeAPIAsset( $DataBlockPropertyMap )" )
$_EscapeTool.xml( $result )
=============================================================
${SINGLE_HASH}chanwGetAssetId( ${DOLLAR}currentPage )
#chanwGetAssetId( $currentPage )
${DOLLAR}chanwGetAssetId: $chanwGetAssetId
=============================================================
${SINGLE_HASH}chanwGetAssetType( ${DOLLAR}currentPage )
#chanwGetAssetType( $currentPage )
${DOLLAR}chanwGetAssetType: $chanwGetAssetType
=============================================================
${SINGLE_HASH}chanwGetCascadeAPIAssetProperties( "Page" )
#chanwGetCascadeAPIAssetProperties( "Page" )
${DOLLAR}chanwGetCascadeAPIAssetProperties:
$chanwGetCascadeAPIAssetProperties
=============================================================
${SINGLE_HASH}chanwGetFQINodeMap( ${DOLLAR}block.StructuredData )
${SINGLE_HASH}drulykgVarDump( ${DOLLAR}chanwGetFQINodeMap )
#chanwGetFQINodeMap( $block.StructuredData )
#drulykgVarDump( $chanwGetFQINodeMap )$BR
=============================================================
${SINGLE_HASH}chanwGetMetadataData( ${DOLLAR}currentPage.Metadata )
${DOLLAR}chanwGetMetadataData
#chanwGetMetadataData( $currentPage.Metadata )
$chanwGetMetadataData
=============================================================
${SINGLE_HASH}chanwGetStructuredDataNodeData( ${DOLLAR}chanwGetFQINodeMap[ "wysiwyg-group;wysiwyg-content" ][ ${DOLLAR}KEY_NODE ] )
${DOLLAR}chanwGetStructuredDataNodeData
#chanwGetStructuredDataNodeData( $chanwGetFQINodeMap[ "wysiwyg-group;wysiwyg-content" ][ $KEY_NODE ] )
$chanwGetStructuredDataNodeData
=============================================================
${SINGLE_HASH}chanwGetTextNodeSubType( ${DOLLAR}chanwGetFQINodeMap[ "wysiwyg-group;wysiwyg-content" ][ ${DOLLAR}KEY_NODE ] )
#chanwGetTextNodeSubType( $chanwGetFQINodeMap[ "wysiwyg-group;wysiwyg-content" ][ $KEY_NODE ] )
${DOLLAR}chanwGetTextNodeSubType: $chanwGetTextNodeSubType
=============================================================
${SINGLE_HASH}chanwGetTextValues( [ "", "one", "", "two" ] )
#chanwGetTextValues( [ "", "one", "", "two" ] )
${DOLLAR}chanwGetTextValues: $chanwGetTextValues
=============================================================
${SINGLE_HASH}set( ${DOLLAR}folder = ${DOLLAR}_.locateFolder( "brisk", "standard-model" ) )
${SINGLE_HASH}chanwIsAncestorOf( ${DOLLAR}folder ${DOLLAR}currentPage )
#set( $folder = $_.locateFolder( "brisk", "standard-model" ) )
#chanwIsAncestorOf( $folder $currentPage )
${DOLLAR}chanwIsAncestorOf: $chanwIsAncestorOf
=============================================================
${SINGLE_HASH}chanwShowMetadataData( ${DOLLAR}currentPage.Metadata )
#chanwShowMetadataData( $currentPage.Metadata )

=============================================================
${SINGLE_HASH}chanwShowStructuredDataNodeData( ${DOLLAR}chanwGetFQINodeMap[ "wysiwyg-group;wysiwyg-content" ][ $KEY_NODE ] )
#chanwShowStructuredDataNodeData( $chanwGetFQINodeMap[ "wysiwyg-group;wysiwyg-content" ][ $KEY_NODE ] )
=============================================================
${SINGLE_HASH}chanwInvokeQuery( "MetadataSet" "site://_brisk/Page" [ false, false, false, true, false ] [] 5000 "author" "desc" "" [ true, false ] )
#chanwInvokeQuery( "MetadataSet" "site://_brisk/Page" [ false, false, false, true, false ] [] 5000 "author" "desc" "" [ true, false ] )
${DOLLAR}chanwInvokeQuery.size(): $chanwInvokeQuery.size()
=============================================================
${SINGLE_HASH}set( ${DOLLAR}queryMap = {} )
${SINGLE_HASH}set( ${DOLLAR}queryMap[ "type" ] = "MetadataSet" )
${SINGLE_HASH}set( ${DOLLAR}queryMap[ "link" ] = "site://_brisk/Page" )
${SINGLE_HASH}set( ${DOLLAR}queryMap[ "assets" ] = {} )
${SINGLE_HASH}set( ${DOLLAR}queryMap[ "assets" ][ "blocks" ] = false )
${SINGLE_HASH}set( ${DOLLAR}queryMap[ "assets" ][ "files" ] = false )
${SINGLE_HASH}set( ${DOLLAR}queryMap[ "assets" ][ "folders" ] = false )
${SINGLE_HASH}set( ${DOLLAR}queryMap[ "assets" ][ "pages" ] = true )
${SINGLE_HASH}set( ${DOLLAR}queryMap[ "assets" ][ "symlinks" ] = false )
${SINGLE_HASH}set( ${DOLLAR}queryMap[ "max-results" ] = 5000 )
${SINGLE_HASH}set( ${DOLLAR}queryMap[ "sort-by" ] = "author" )
${SINGLE_HASH}set( ${DOLLAR}queryMap[ "direction" ] = "desc" )
${SINGLE_HASH}set( ${DOLLAR}queryMap[ "indexable" ] = true )
${SINGLE_HASH}set( ${DOLLAR}queryMap[ "publishable" ] = false )
${SINGLE_HASH}chanwInvokeQueryWithMap( ${DOLLAR}queryMap )
#set( $queryMap = {} )
#set( $queryMap[ "type" ] = "MetadataSet" )
#set( $queryMap[ "link" ] = "site://_brisk/Page" )
#set( $queryMap[ "assets" ] = {} )
#set( $queryMap[ "assets" ][ "blocks" ] = false )
#set( $queryMap[ "assets" ][ "files" ] = false )
#set( $queryMap[ "assets" ][ "folders" ] = false )
#set( $queryMap[ "assets" ][ "pages" ] = true )
#set( $queryMap[ "assets" ][ "symlinks" ] = false )
#set( $queryMap[ "max-results" ] = 5000 )
#set( $queryMap[ "sort-by" ] = "author" )
#set( $queryMap[ "direction" ] = "desc" )
#set( $queryMap[ "indexable" ] = true )
#set( $queryMap[ "publishable" ] = false )
#chanwInvokeQueryWithMap( $queryMap )

${DOLLAR}chanwInvokeQueryWithMap.size(): $chanwInvokeQueryWithMap.size()
=============================================================
《/pre》
《/div》
《/evaluate》
《documentation id=“top”》
《h2》Introduction《/h2》
《p》This format provides methods to work with structured data and metadata,
when using the LocatorTool.《/p》
《/documentation》
《import》
doc*###
#import( 'core/library/velocity/chanw/chanw-global-queue' )
#*doc
《/import》
《global-variables》
doc*###
## cascade structured data keys
#set( $KEY_ASSET        = "asset" )
#set( $KEY_ATTRIBUTES   = "attributes" )
#set( $KEY_DATA         = "data" )
#set( $KEY_FQI          = "fqi" )
#set( $KEY_NODE         = "node" )
#set( $KEY_SITE         = "site" )
#set( $KEY_SIZE         = "size" )
#set( $KEY_TYPE         = "type" )
#set( $KEY_URL          = "url" )
#set( $KEY_CONTENT      = "content" )
#set( $KEY_SUBTYPE      = "subtype" )
#set( $TYPE_WYSIWYG     = "wysiwyg" )
#set( $TYPE_CHECKBOX    = "checkbox" )
#set( $TYPE_DROPDOWN    = "dropdown" )
#set( $TYPE_MULTISELECT = "multiselect" )
#set( $TYPE_RADIO       = "radio" )
#set( $TYPE_PLAIN_TEXT  = "plaintext" )
#set( $TYPE_CALENDAR    = "calendar" )
#set( $TYPE_DATE_TIME   = "datetime" )
#set( $TYPE_BLOCK       = "block" )
#set( $TYPE_PAGE        = "page" )
#set( $TYPE_FILE        = "file" )
#set( $TYPE_SYMLINK     = "symlink" )
## query API parameters
#set( $PARAM_VALUE_CONTENT_TYPE  = "ContentType" )
#set( $PARAM_VALUE_METADATA_SET  = "MetadataSet" )
#set( $PARAM_VALUE_ASC           = "asc" )
#set( $PARAM_VALUE_DESC          = "desc" )
#set( $PARAM_VALUE_AUTHOR        = "author" )
#set( $PARAM_VALUE_CREATED       = "created" )
#set( $PARAM_VALUE_DESCRIPTION   = "description" )
#set( $PARAM_VALUE_DISPLAY_NAME  = "displayName" )
#set( $PARAM_VALUE_END_DATE      = "endDate" )
#set( $PARAM_VALUE_KEYWORDS      = "keywords" )
#set( $PARAM_VALUE_MODIFIED      = "modified" )
#set( $PARAM_VALUE_LAST_MODIFIED = "modified" )
#set( $PARAM_VALUE_NAME          = "name" )
#set( $PARAM_VALUE_PATH          = "path" )
#set( $PARAM_VALUE_REVIEW_DATE   = "reviewDate" )
#set( $PARAM_VALUE_START_DATE    = "startDate" )
#set( $PARAM_VALUE_SUMMARY       = "summary" )
#set( $PARAM_VALUE_TEASER        = "teaser" )
#set( $PARAM_VALUE_TITLE         = "title" )
#set( $PARAM_TYPE                = "type" )
#set( $PARAM_LINK                = "link" )
#set( $PARAM_ASSETS              = "assets" )
#set( $PARAM_BLOCKS              = "blocks" )
#set( $PARAM_FILES               = "files" )
#set( $PARAM_FOLDERS             = "folders" )
#set( $PARAM_PAGES               = "pages" )
#set( $PARAM_SYMLINKS            = "symlinks" )
#set( $PARAM_HAS_METADATA        = "has-metadata" )
#set( $PARAM_DIRECTION           = "direction" )
#set( $PARAM_MAX_RESULTS         = "max-results" )
#set( $PARAM_SITE_NAME           = "site-name" )
#set( $PARAM_SORT_BY             = "sort-by" )
#set( $PARAM_INDEXABLE           = "indexable" )
#set( $PARAM_PUBLISHABLE         = "publishable" )
## Cascade API class strings
#set( $CASCADE_API_DataBlock_CLASS_NAME    = "com.hannonhill.cascade.api.adapters.XHTMLDataDefinitionBlockAPIAdapter" )
#set( $CASCADE_API_FeedBlock_CLASS_NAME    = "com.hannonhill.cascade.api.adapters.FeedBlockAPIAdapter" )
#set( $CASCADE_API_File_CLASS_NAME         = "com.hannonhill.cascade.api.adapters.FileAPIAdapter" )
#set( $CASCADE_API_Folder_CLASS_NAME       = "com.hannonhill.cascade.api.adapters.FolderAPIAdapter" )
#set( $CASCADE_API_Page_CLASS_NAME         = "com.hannonhill.cascade.api.adapters.PageAPIAdapter" )
#set( $CASCADE_API_ScriptFormat_CLASS_NAME = "com.hannonhill.cascade.api.adapters.ScriptFormatAPIAdapter" )
#set( $CASCADE_API_Symlink_CLASS_NAME      = "com.hannonhill.cascade.api.adapters.SymlinkAPIAdapter" )
#set( $CASCADE_API_TextBlock_CLASS_NAME    = "com.hannonhill.cascade.api.adapters.TextBlockAPIAdapter" )
#set( $CASCADE_API_XMLBlock_CLASS_NAME     = "com.hannonhill.cascade.api.adapters.XMLBlockAPIAdapter" )
#set( $chanwProcessCascadeApiGlobalVariables = [
    "chanwAsset",
    "chanwAssetLink",
    "chanwAssetPath",
    "chanwAssetPathSegments",
    "chanwAssetSiteId",
    "chanwAssetSiteName",
    "chanwAssetType",
    "chanwCascadeAssetList",
    "chanwChildParentMap",
    "chanwChildren",
    "chanwCurrent",
    "chanwCurrentIndex",
    "chanwDFS",
    "chanwFolder",
    "chanwFolderContainedAssetPath",
    "chanwFolderPath",
    "chanwFolderParentPath",
    "chanwGetAssetId",
    "chanwGetAssetType",
    "chanwGetCascadeAPIAssetProperties",
    "chanwGetDynamicFieldsData",
    "chanwGetFQINodeMap",
    "chanwGetMetadataData",
    "chanwGetPageBlockStructuredDataNodeByIdArray",
    "chanwGetStructuredDataNodeData",
    "chanwGetTextValues",
    "chanwImportScript",
    "chanwImportScriptPathStmt",
    "chanwInvokeQuery",
    "chanwIsAncestorOf",
    "chanwIsDescendentOf",
    "chanwLocateAssetInAncestorFolder",
    "chanwNext",
    "chanwNextInt",
    "chanwNodeAttributeMap",
    "chanwNodeAttributes",
    "chanwOffset",
    "chanwParentFQI",
    "chanwPreviousIdentifier",
    "chanwQuery",
    "chanwRootString",
    "chanwSdns",
    "chanwStmt",
    "chanwStructuredData",
    "chanwTextNodeOptions",
    "chanwTextSize",
    "chanwTextValue",
    "chanwTextValueAsXMLElement",
    "chanwTextValues",
    "chanwValue"
] )
#*doc
《/global-variables》
《documentation》
《code》chanwConvertFQIToXPath( $fqi )《/code》
《p》Converts the FQI string to its corresponding XPath expression.《/p》
《pre》
#chanwConvertFQIToXPath( "a;0;b;1;c;3" )
$chanwConvertFQIToXPath
《/pre》
《/documentation》
《macro id=“chanwConvertFQIToXPath”》
doc*###
#macro( chanwConvertFQIToXPath $chanwConvertFQIToXPathFqi )
    #set( $chanwConvertFQIToXPath = "" )
    #set( $chanwStringArray = $chanwConvertFQIToXPathFqi.split( ";" ) )
    #set( $chanwStringList = [] )
##
#foreach( $str in $chanwStringArray )
#if( !$globalApacheNumberUtils.isNumber( $str ) )
#set( $void = $chanwStringList.add( $str ) )
#else
#set( $chanwIndexString = "[" + ( $globalApacheNumberUtils.createNumber( $str ) + 1 ) + "]" )
#set( $void = $chanwStringList.add( $chanwIndexString ) )
#end
#end
#set( $chanwConvertFQIToXPath = $_DisplayTool.list( $chanwStringList, "/" ).replaceAll( "\/\[", "[" ) )
#end
#*doc
《/macro》
《documentation》
《code》chanwDisplayCascadeAPIAsset( $map )《/code》
《p》Displays the properties of an asset. Possible values for the map parameter are:
《code》$DataBlockPropertyMap《/code》, 《code》$FeedBlockPropertyMap《/code》,
《code》$FilePropertyMap《/code》,
《code》$FolderPropertyMap《/code》, 《code》$PagePropertyMap《/code》,
《code》$ScriptFormatPropertyMap《/code》, 《code》$SymlinkPropertyMap《/code》,
《code》$TextBlockPropertyMap《/code》, and 《code》$XMLBlockPropertyMap《/code》.《/p》
《pre》
#set( $block = $_.locateBlock(
    "_cascade/blocks/data/api-AssetOperationHandlerService", "cascade-admin" ) )
#chanwProcessDataBlock( $block )
#chanwDisplayCascadeAPIAsset( $DataBlockPropertyMap )
《/pre》
《p》This code snippet displays the following:《/p》
《pre》
DataBlockCreatedBy: wing
DataBlockCreatedOn: Fri Nov 11 12:30:32 EST 2016
DataBlockDataDefinitionPath: WYSIWYG
DataBlockFolderOrder: 2147481076
DataBlockId: 5470dba98b7ffe83552dce4fabefc2f8
DataBlockIdentifier:
  com.hannonhill.cascade.api.adapters.PathIdentifierImpl@6f3b9fef
DataBlockLastModified: Fri Nov 11 12:30:32 EST 2016
DataBlockLastModifiedBy: wing
DataBlockMetadata:
  com.hannonhill.cascade.api.adapters.MetadataAPIAdapter@6bc72bc5
DataBlockName: api-AssetOperationHandlerService
DataBlockParentFolder:
  com.hannonhill.cascade.api.adapters.FolderAPIAdapter@51fe490d
DataBlockParentFolderIdentifier:
  com.hannonhill.cascade.api.adapters.PathIdentifierImpl@5ab3b1de
DataBlockPath: _cascade/blocks/data/api-AssetOperationHandlerService
DataBlockSiteId: 5470955e8b7ffe83552dce4fd0cacf38
DataBlockSiteName: cascade-admin
DataBlockSiteStructuredData:
  [Lcom.hannonhill.cascade.api.asset.common.StructuredDataNode;@69c48980
DataBlockType: block
DataBlockXHTML: 
DataBlockXHTMLAsXMLElement: 
《/pre》
《/documentation》
《macro id=“chanwDisplayCascadeAPIAsset”》
doc*###
#macro( chanwDisplayCascadeAPIAsset $chanwDisplayCascadeAPIAssetMap )
    #if( !$chanwDisplayCascadeAPIAssetMap || $chanwDisplayCascadeAPIAssetMap.Class.Name != $JAVA_UTIL_LINKEDHASHMAP_CLASS_NAME )
#chanwOutputErrorMsg( $CHANW_LIBRARY_FOLDER_PATH $chanw_framework_site_name $CHANW_INITIALIZATION_FORMAT_NAME "A map is required." "f4ghklfk4lmgfkln4bkj" )
        #stop
    #end
##
    #foreach( $key in $chanwDisplayCascadeAPIAssetMap.keySet() )
$key: #evaluate( "$$key" )$BR
    #end
#end
#*doc
《/macro》
《documentation》
《code》#chanwDisplayStringArray( $array )《/code》
《p》Displays all Strings in the array.《/p》
《p》Examples:《/p》
《pre》
#chanwDisplayStringArray( $array )
《/pre》
《/documentation》
《macro id=“chanwDisplayStringArray”》
doc*###
#macro( chanwDisplayStringArray $array_chanwDisplayStringArray )[ #foreach( $item in $array_chanwDisplayStringArray )$item#if( $foreach.hasNext() ), #end#end ]#end
#*doc
《/macro》
《documentation》
《code》#chanwDisplayStructuredDataNode( $node )《/code》
《p》Displays information of the node.《/p》
《p》Examples:《/p》
《pre》
#chanwDisplayStructuredDataNode( $node )
《/pre》
《/documentation》
《macro id=“chanwDisplayStructuredDataNode”》
doc*###
#macro( chanwDisplayStructuredDataNode $node_chanwDisplayStructuredDataNode $br_chanwDisplayStructuredDataNode )
#if( !$node_chanwDisplayStructuredDataNode.Class.Name || $node_chanwDisplayStructuredDataNode.Class.Name != $COM_CASCADE_STRUCTURED_DATA_NODE_CLASS_NAME )
No strutured data node is passed in.
#break
#end
#if( $br_chanwDisplayStructuredDataNode.Class.Name && $br_chanwDisplayStructuredDataNode.Class.Name == $JAVA_LANG_BOOLEAN_CLASS_NAME )
#set( $chanwWithBr = $br_chanwDisplayStructuredDataNode )
#else## default to false
#set( $chanwWithBr = false )
#end

Identifier: $node_chanwDisplayStructuredDataNode.Identifier#if( $chanwWithBr )$BR#else$chanwNEWLINE#end
#*    group    *##if( $node_chanwDisplayStructuredDataNode.isGroup() )
Type: Group#if( $chanwWithBr )$BR#else$chanwNEWLINE#end
Number of Children: $node_chanwDisplayStructuredDataNode.Children.size()#if( $chanwWithBr )$BR#else$chanwNEWLINE#end
#*    asset    *#
#elseif( $node_chanwDisplayStructuredDataNode.isAsset() )
Type: Asset#if( $chanwWithBr )$BR#else$chanwNEWLINE#end
#if( $node_chanwDisplayStructuredDataNode.Asset.Class.Name )
#set( $chanwAssetIdentifier = $node_chanwDisplayStructuredDataNode.AssetIdentifier )
Asset ID: $chanwAssetIdentifier.Id#if( $chanwWithBr )$BR#else$chanwNEWLINE#end
Asset Path: $node_chanwDisplayStructuredDataNode.Asset.Identifier.Path.PathAsString#if( $chanwWithBr )$BR#else$chanwNEWLINE#end
Asset Type: $node_chanwDisplayStructuredDataNode.Asset.Class.Name#if( $chanwWithBr )$BR#else$chanwNEWLINE#end
Site: $node_chanwDisplayStructuredDataNode.Asset.Site.Name#if( $chanwWithBr )$BR#else$chanwNEWLINE#end
#end
#*    text    *#
#else
Type: Text#if( $chanwWithBr )$BR#else$chanwNEWLINE#end
#set( $chanwTextOptions = $node_chanwDisplayStructuredDataNode.TextNodeOptions )
#set( $chanwTextSubTypes = [ "Radio", "PlainText", "Checkbox", "Multiselect", "Wysiwyg", "Dropdown", "Calendar", "Datetime" ] )
#foreach( $subType in $chanwTextSubTypes )
#set( $chanwCode = '#if( $chanwTextOptions.is' + $subType + '())Subtype: ' + $subType + '#if( $chanwWithBr )$BR#else$chanwNEWLINE#end#end' )
#evaluate( $chanwCode )
#end
#if( $node_chanwDisplayStructuredDataNode.TextValue.Class.Name )
Text Value: $node_chanwDisplayStructuredDataNode.TextValue#if( $chanwWithBr )$BR#else$chanwNEWLINE#end
#end
#if( $node_chanwDisplayStructuredDataNode.TextValues.Class.Name )
Text Values: #chanwDisplayStringArray( $node_chanwDisplayStructuredDataNode.TextValues )#if( $chanwWithBr )$BR#else$chanwNEWLINE#end
#end
#end
#end
#*doc
《/macro》
《documentation》
《code》#chanwGetAssetId( $asset )《/code》
《p》Returns the Id string of the asset.《/p》
《p》Examples:《/p》
《pre》
#chanwGetAssetId( $currentPage )
$chanwGetAssetId
《/pre》
《/documentation》
《macro id=“chanwGetAssetId”》
doc*###
#macro( chanwGetAssetId $chanwGetAssetIdAsset )
    #chanwIsInstanceOf( $chanwGetAssetIdAsset $COM_CASCADE_FOLDER_CONTAINED_ASSET_CLASS_NAME )
##
    #if( !$chanwIsInstanceOf )
#chanwOutputErrorMsg( $CHANW_LIBRARY_FOLDER_PATH $chanw_framework_site_name $CHANW_INITIALIZATION_FORMAT_NAME "Not a folder contained asset." "85ig;trl/enn;4i" )
        #stop
    #end
##
    #set( $chanwGetAssetId = $chanwGetAssetIdAsset.Identifier.Id )
#end
#*doc
《/macro》
《documentation》
《code》#chanwGetAssetType( $asset )《/code》
《p》Returns the type string of the asset.《/p》
《p》Examples:《/p》
《pre》
#chanwGetAssetType( $currentPage )
$chanwGetAssetType
《/pre》
《/documentation》
《macro id=“chanwGetAssetType”》
doc*###
#macro( chanwGetAssetType $chanwGetAssetTypeAsset )
    #chanwIsInstanceOf( $chanwGetAssetTypeAsset $COM_CASCADE_FOLDER_CONTAINED_ASSET_CLASS_NAME )
##
    #if( !$chanwIsInstanceOf )
#chanwOutputErrorMsg( $CHANW_LIBRARY_FOLDER_PATH $chanw_framework_site_name $CHANW_INITIALIZATION_FORMAT_NAME "Not a folder contained asset." "49KLN;HTILNKLNBLMGIW" )
        #stop
    #end
##
    #set( $chanwGetAssetType = $chanwGetAssetTypeAsset.Identifier.Type.toString() )
#end
#*doc
《/macro》
《documentation》
《code》chanwGetCascadeAPIAssetProperties( $assetType )《/code》
《p》Returns the key set of the map associated with the type
《code》$assetType《/code》. This gives the set of names of global variables
associated with the asset type. Possible values for 《code》$assetType《/code》
are defined in the list named 《code》$chanwCascadeAssetList《/code》.《/p》
《pre》
#chanwGetCascadeAPIAssetProperties( "Page" )
$chanwGetCascadeAPIAssetProperties
《/pre》
《p》This code snippet displays the following:《/p》
《pre》
[
PageCreatedBy,
PageCreatedOn,
PageDataDefinitionPath,
PageFolderOrder,
PageId,
PageIdentifier,
PageLastModified,
PageLastModifiedBy,
PageLastPublishedBy,
PageLastPublishedOn,
PageLink,
PageMetadata,
PageName,
PageParentFolder,
PageParentFolderIdentifier,
PagePath,
PageShouldBeIndexed,
PageShouldBePublished,
PageSiteId,
PageSiteName,
PageSiteStructuredData,
PageType,
PageXHTML,
PageXHTMLAsXMLElement
]
《/pre》
《/documentation》
《macro id=“chanwGetCascadeAPIAssetProperties”》
doc*###
#macro( chanwGetCascadeAPIAssetProperties $chanwGetCascadeAPIAssetPropertiesAssetType )
    #if( !$chanwCascadeAssetList.contains( $chanwGetCascadeAPIAssetPropertiesAssetType ) )
#chanwOutputErrorMsg( $CHANW_LIBRARY_FOLDER_PATH $chanw_framework_site_name $CHANW_INITIALIZATION_FORMAT_NAME "$chanwGetCascadeAPIAssetPropertiesAssetType is not a supported type." "KLL;H9YUHJSHO5" )
        #stop
    #end
##
    #set( $chanwStmt = '#set($chanwGetCascadeAPIAssetProperties=$' +
        $chanwGetCascadeAPIAssetPropertiesAssetType + 'PropertyMap.keySet())' )
    #evaluate( $chanwStmt )
#end
#*doc
《/macro》
《documentation》
《code》#chanwGetFQINodeMap( $sd )《/code》
《p》Returns a map store in the variable 《code》$chanwGetFQINodeMap《/code》,
containing fully qualified identifiers as keys and maps containing information
of the structured data nodes in 《code》$sd《/code》. The value of 《code》$sd《/code》
can ba a single structured data node (e.g., a group node), or a list of structured
data nodes returned by the 《code》StructuredDataNodeAPIAdapter.getChildren()《/code》 method.
This macro invokes 《code》#chanwProcessStructuredDataNodes《/code》 and
《code》#chanwGetTextValues《/code》.《/p》
《p》Example:《/p》
《pre》
#set( $sd = $_.locateBlock( "random-image", "cascade-admin-old" ).StructuredData )
#chanwGetFQINodeMap( $sd )
#drulykgVarDump( $chanwGetFQINodeMap )
《/pre》
《p》This outputs the data of the following type:《/p》
《pre》
LinkedHashMap(14) {
    ["random-image-group"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@774c415d )
        ["data"] == null
        ["type"] == String(5)( "group" )
        ["size"] == Integer( 1 )
        ["subtype"] == null
        ["content"] == null
        ["site"] == null
    }
    ["random-image-group;caption-yes"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@770e4d1a )
        ["data"] == String(27)( "Show Description as Caption" )
        ["type"] == String(4)( "text" )
        ["size"] == Integer( 1 )
        ["subtype"] == String(8)( "checkbox" )
        ["content"] == null
        ["site"] == null
    }
    ["random-image-group;mul-image;0"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@79d5d2d3 )
        ["data"] == null
        ["type"] == String(5)( "group" )
        ["size"] == Integer( 3 )
        ["subtype"] == null
        ["content"] == null
        ["site"] == null
    }
    ["random-image-group;mul-image;1"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@6c06221d )
        ["data"] == null
        ["type"] == String(5)( "group" )
        ["size"] == Integer( 3 )
        ["subtype"] == null
        ["content"] == null
        ["site"] == null
    }
    ["random-image-group;mul-image;2"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@217d2dd0 )
        ["data"] == null
        ["type"] == String(5)( "group" )
        ["size"] == Integer( 3 )
        ["subtype"] == null
        ["content"] == null
        ["site"] == null
    }
    ["random-image-group;mul-image;0;selectimage"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@48493315 )
        ["data"] == String(22)( "images/ambassadors.jpg" )
        ["type"] == String(5)( "asset" )
        ["size"] == Integer( 1 )
        ["subtype"] == String(4)( "file" )
        ["content"] == Element(  )
        ["site"] == SiteAPIAdapter( com.hannonhill.cascade.api.adapters.SiteAPIAdapter@26290aaf )
    }
    ["random-image-group;mul-image;0;altText"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@70a08309 )
        ["data"] == String(11)( "Ambassadors" )
        ["type"] == String(4)( "text" )
        ["size"] == Integer( 1 )
        ["subtype"] == String(9)( "plaintext" )
        ["content"] == null
        ["site"] == null
    }
    ["random-image-group;mul-image;0;image-link"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@1c5e662b )
        ["data"] == String(9)( "academics" )
        ["type"] == String(5)( "asset" )
        ["size"] == Integer( 1 )
        ["subtype"] == String(7)( "symlink" )
        ["content"] == Element( http://www.upstate.edu/education )
        ["site"] == SiteAPIAdapter( com.hannonhill.cascade.api.adapters.SiteAPIAdapter@6bc8ea55 )
    }
    ["random-image-group;mul-image;1;selectimage"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@4669a823 )
        ["data"] == String(37)( "images/billing-insurance-topimage.jpg" )
        ["type"] == String(5)( "asset" )
        ["size"] == Integer( 1 )
        ["subtype"] == String(4)( "file" )
        ["content"] == Element(  )
        ["site"] == SiteAPIAdapter( com.hannonhill.cascade.api.adapters.SiteAPIAdapter@4ab2c03b )
    }
    ["random-image-group;mul-image;1;altText"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@55bd6a87 )
        ["data"] == String(21)( "Billing and Insurance" )
        ["type"] == String(4)( "text" )
        ["size"] == Integer( 1 )
        ["subtype"] == String(9)( "plaintext" )
        ["content"] == null
        ["site"] == null
    }
    ["random-image-group;mul-image;1;image-link"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@2c4b8d95 )
        ["data"] == String(5)( "index" )
        ["type"] == String(5)( "asset" )
        ["size"] == Integer( 1 )
        ["subtype"] == String(4)( "page" )
        ["content"] == Element(  )
        ["site"] == SiteAPIAdapter( com.hannonhill.cascade.api.adapters.SiteAPIAdapter@5fc5b36e )
    }
    ["random-image-group;mul-image;2;selectimage"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@2e3fdc2e )
        ["data"] == String(27)( "images/research-400x200.jpg" )
        ["type"] == String(5)( "asset" )
        ["size"] == Integer( 1 )
        ["subtype"] == String(4)( "file" )
        ["content"] == Element(  )
        ["site"] == SiteAPIAdapter( com.hannonhill.cascade.api.adapters.SiteAPIAdapter@3157b64b )
    }
    ["random-image-group;mul-image;2;altText"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@167ffa93 )
        ["data"] == String(8)( "Research" )
        ["type"] == String(4)( "text" )
        ["size"] == Integer( 1 )
        ["subtype"] == String(9)( "plaintext" )
        ["content"] == null
        ["site"] == null
    }
    ["random-image-group;mul-image;2;image-link"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@4869c1b4 )
        ["data"] == null
        ["type"] == String(5)( "asset" )
        ["size"] == Integer( 1 )
        ["subtype"] == null
        ["content"] == null
        ["site"] == null
    }
}
《/pre》
《p》More examples:《/p》
《pre》
#set( $sd = $_.locateBlock( "_cascade/blocks/data/nesting", "cascade-admin-old" ).StructuredData )

#chanwGetFQINodeMap( $sd )
$chanwGetFQINodeMap.keySet()
$chanwGetFQINodeMap[ "outer" ][ $KEY_TYPE ]

$chanwGetFQINodeMap[ "outer;middle;mul-inner;2;mul-inner-text;2" ][ $KEY_NODE ].TextValue
$chanwGetFQINodeMap[ "outer;middle;mul-inner;2;mul-inner-text;2" ][ $KEY_DATA ]
$chanwGetFQINodeMap[ "outer;middle;mul-inner;2;mul-inner-text;2" ][ $KEY_TYPE ]
$chanwGetFQINodeMap[ "outer;middle;mul-inner;2;mul-inner-text;2" ][ $KEY_SIZE ]
$chanwGetFQINodeMap[ "outer;middle" ][ $KEY_SIZE ]
《/pre》
《/documentation》
《macro id=“chanwGetFQINodeMap”》
doc*###
#macro( chanwGetFQINodeMap $chanwGetFQINodeMapSd $chanwGetFQINodeMapSds $chanwGetFQINodeMapAsset )
    #set( $chanwGetFQINodeMap = {} )
    #if( $chanwGetFQINodeMapAsset.Class.Name )
        #set( $chanwGetFQINodeMap[ $KEY_ASSET ] = $chanwGetFQINodeMapAsset )
    #end
##
    #set( $chanwNodeAttributeMap = "" )
    #chanwProcessStructuredDataNodes( $chanwGetFQINodeMapSd $chanwGetFQINodeMapSds )
##
#foreach( $key in $chanwChildParentMap.keySet() )
#set( $chanwGetFQINodeMap[ $chanwNodeAttributeMap[ $key ][ $KEY_FQI ] ] =
{ $KEY_NODE:$key, 
  $KEY_DATA:$chanwNodeAttributeMap[ $key ][ $KEY_DATA ],
  $KEY_TYPE:$chanwNodeAttributeMap[ $key ][ $KEY_TYPE ],
  $KEY_SIZE:$_DisplayTool.alt( $chanwNodeAttributeMap[ $key ][ $KEY_SIZE ], 1 ),
  $KEY_SUBTYPE:$chanwNodeAttributeMap[ $key ][ $KEY_SUBTYPE ].toString(),
  $KEY_CONTENT:$chanwNodeAttributeMap[ $key ][ $KEY_CONTENT ],
  $KEY_SITE:$chanwNodeAttributeMap[ $key ][ $KEY_SITE ]
} )
##,
##$KEY_URL:$chanwNodeAttributeMap[ $key ][ $KEY_URL ]
#end
#end
#*doc
《/macro》
《documentation》
《code》#chanwGetMetadataData( $chanwMetadata )《/code》
《p》Retrieves data from a metadata object and stores them in a map named
《code》$chanwGetMetadataData《/code》. Here is an output of the map:《/p》
《pre》
{DisplayName=Cascade Administration, Description=, Title=Cascade Administration,
Summary=, Teaser=, Keywords=, Author=, ReviewDate=, StartDate=, EndDate=,
DynamicFields=[Lcom.hannonhill.cascade.api.adapters.DynamicMetadataFieldImpl;@4445e8c8,
DynamicFieldsData={
exclude-from-menu={Label=Exclude from Menu, Value=null,
Values=[Ljava.lang.String;@4a265cec, isCheckbox=true, isDropdown=false,
isMultiselect=false, isRadio=false},
exclude-from-left={Label=Exclude from Left Menu, Value=null,
Values=[Ljava.lang.String;@10621bc8, isCheckbox=true, isDropdown=false,
isMultiselect=false, isRadio=false}}}
《/pre》
《p》Example:《/p》
《pre》
#chanwGetMetadataData( $currentPage.Metadata )
$chanwGetMetadataData
《/pre》
《/documentation》
《macro id=“chanwGetMetadataData”》
doc*###
#macro( chanwGetMetadataData $chanwGetMetadataDataMetadata )
    #if( $chanwGetMetadataDataMetadata.Class.Name != $COM_CASCADE_METADATA_CLASS_NAME )
#chanwOutputErrorMsg( $CHANW_LIBRARY_FOLDER_PATH $chanw_framework_site_name $CHANW_INITIALIZATION_FORMAT_NAME "A Metadata object is required." "KL544BLK;YO5HHJKL " )
        #stop
    #end
##
    ## initialization
    #set( $chanwGetMetadataData = {
        "DisplayName":"",
        "Description":"",
        "Title":"",
        "Summary":"",
        "Teaser":"",
        "Keywords":"",
        "Author":"",
        "ReviewDate":"",
        "StartDate":"",
        "EndDate":"",
        "DynamicFields":""
    } )
    #set( $chanwGetDynamicFieldsData = {} )
    #set( $chanwGetMetadataData[ "DisplayName" ]   = $chanwGetMetadataDataMetadata.DisplayName )
    #set( $chanwGetMetadataData[ "Description" ]   = $chanwGetMetadataDataMetadata.Description )
    #set( $chanwGetMetadataData[ "Title" ]         = $chanwGetMetadataDataMetadata.Title )
    #set( $chanwGetMetadataData[ "Summary" ]       = $chanwGetMetadataDataMetadata.Summary )
    #set( $chanwGetMetadataData[ "Teaser" ]        = $chanwGetMetadataDataMetadata.Teaser )
    #set( $chanwGetMetadataData[ "Keywords" ]      = $chanwGetMetadataDataMetadata.Keywords )
    #set( $chanwGetMetadataData[ "Author" ]        = $chanwGetMetadataDataMetadata.Author )
    #set( $chanwGetMetadataData[ "ReviewDate" ]    = $chanwGetMetadataDataMetadata.ReviewDate )
    #set( $chanwGetMetadataData[ "StartDate" ]     = $chanwGetMetadataDataMetadata.StartDate )
    #set( $chanwGetMetadataData[ "EndDate" ]       = $chanwGetMetadataDataMetadata.EndDate  )
    #set( $chanwGetMetadataData[ "DynamicFields" ] = $chanwGetMetadataDataMetadata.DynamicFields )
    #set( $chanwDFS = $chanwGetMetadataDataMetadata.DynamicFields )
##
    #if( $chanwDFS.size() > 0 )
        #foreach( $chanwDF in $chanwDFS )
            #set( $dummy = $chanwGetDynamicFieldsData.put( $chanwDF.Name, {} ) )
            #set( $dummy = 
            $chanwGetDynamicFieldsData[ $chanwDF.Name ].put( "Label", $chanwDF.Label ) )
            #set( $dummy = $chanwGetDynamicFieldsData[ $chanwDF.Name ].put( 
                    "Value", $chanwDF.Value ) )
            #set( $dummy = $chanwGetDynamicFieldsData[ $chanwDF.Name ].put( 
                    "Values", $chanwDF.Values ) )
            #set( $dummy = $chanwGetDynamicFieldsData[ $chanwDF.Name ].put( 
                    "isCheckbox", $chanwDF.isCheckbox() ) )
            #set( $dummy = $chanwGetDynamicFieldsData[ $chanwDF.Name ].put( 
                    "isDropdown", $chanwDF.isDropdown() ) )
            #set( $dummy = $chanwGetDynamicFieldsData[ $chanwDF.Name ].put( 
                    "isMultiselect", $chanwDF.isMultiselect() ) )
            #set( $dummy = $chanwGetDynamicFieldsData[ $chanwDF.Name ].put( 
                    "isRadio", $chanwDF.isRadio() ) )
        #end
    #end
##
    #set( $chanwGetMetadataData[ "DynamicFieldsData" ] = $chanwGetDynamicFieldsData )
#end
#*doc
《/macro》
《documentation》
《code》#chanwGetStructuredDataNodeData( $node )《/code》
《p》Processes a structured data node object and stores all data in a map named
《code》$chanwGetStructuredDataNodeData《/code》.《/p》
《p》Examples:《/p》
《pre》
##set( $node = $currentPage.getStructuredDataNode( “site-config-group/google-tag-manager“ ) )
#set( $block = $_.locateBlock(“_cascade/blocks/data/test-all“, “cascade-admin-webapp“) )
#set( $node = $block.getStructuredDataNode( “group“ ) )

## output the map
$chanwGetStructuredDataNodeData
《/pre》
《p》Here are some outputs of the map, when processing nodes of different types:《/p》
《pre》
Group:
======
{Identifer=com.hannonhill.cascade.api.adapters.IdentifierImpl@2fe47113,
Identifier=group, isAsset=false, isGroup=true, isText=false, Type=Group,
Children=[Lcom.hannonhill.cascade.api.asset.common.StructuredDataNode;@2d028643,
Asset=, AssetType=, AssetLink=, AssetPath=, AssetSiteId=, AssetSiteName=,
AssetPathSegments=, TextValue=, TextValues=, TextNodeOptions=, TextValueAsXMLElement=}

Text:
=====
{Identifer=com.hannonhill.cascade.api.adapters.IdentifierImpl@b5fe71f,
Identifier=text-box, isAsset=false, isGroup=false, isText=true, Children=,
Asset=, AssetType=, AssetLink=, AssetPath=, AssetSiteId=, AssetSiteName=,
AssetPathSegments=, Type=Text, TextValue=Some text here,
TextValues=[Ljava.lang.String;@62f4e7c0,
TextNodeOptions=com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter$2@6c5d3170,
TextValueAsXMLElement=} 

Asset:
======
{Identifer=com.hannonhill.cascade.api.adapters.IdentifierImpl@18b775f2,
Identifier=block-chooser, isAsset=true, isGroup=false, isText=false,
Children=, Type=Asset, Asset=com.hannonhill.cascade.api.adapters.XHTMLDataDefinitionBlockAPIAdapter@58d42ce3,
AssetType=block, AssetLink=, AssetPath=_cascade/blocks/data/designer-pro-block,
AssetSiteId=5470955e8b7ffe83552dce4fd0cacf38, AssetSiteName=cascade-admin,
AssetPathSegments=[_cascade, blocks, data, designer-pro-block], TextValue=,
TextValues=, TextNodeOptions=, TextValueAsXMLElement=}
《/pre》
《/documentation》
《macro id=“chanwGetStructuredDataNodeData”》
doc*###
#macro( chanwGetStructuredDataNodeData $chanwGetStructuredDataNodeDataNode )
    #if( !$chanwGetStructuredDataNodeDataNode || $chanwGetStructuredDataNodeDataNode.Class.Name != $COM_CASCADE_STRUCTURED_DATA_NODE_CLASS_NAME )
#chanwOutputErrorMsg( $CHANW_LIBRARY_FOLDER_PATH $chanw_framework_site_name $CHANW_INITIALIZATION_FORMAT_NAME "A structured data node is required." "484IUJLK" )
    #stop
    #end
##
    #set( $chanwGetStructuredDataNodeData = {} )
    #set( $dummy = $chanwGetStructuredDataNodeData.put( "Identifer", $chanwGetStructuredDataNodeDataNode.Identifer ) )
    #set( $dummy = $chanwGetStructuredDataNodeData.put( "Identifier", $chanwGetStructuredDataNodeDataNode.Identifier ) )
    #set( $dummy = $chanwGetStructuredDataNodeData.put( "isAsset", $chanwGetStructuredDataNodeDataNode.isAsset() ) )
    #set( $dummy = $chanwGetStructuredDataNodeData.put( "isGroup", $chanwGetStructuredDataNodeDataNode.isGroup() ) )
    #set( $dummy = $chanwGetStructuredDataNodeData.put( "isText", $chanwGetStructuredDataNodeDataNode.isText() ) )
##
    #if( $chanwGetStructuredDataNodeDataNode.isGroup() )
        #set( $dummy = $chanwGetStructuredDataNodeData.put( "Type", "Group" ) )
        #set( $dummy = $chanwGetStructuredDataNodeData.put( "Children", $chanwGetStructuredDataNodeDataNode.Children ) )
    #else
        #set( $dummy = $chanwGetStructuredDataNodeData.put( "Children", "" ) )
    #end
##
    #set( $chanwAsset = "" )
    #set( $chanwAssetType = "" )
    #set( $chanwAssetLink = "" )
    #set( $chanwAssetPath = "" )
    #set( $chanwAssetSiteId = "" )
    #set( $chanwAssetSiteName = "" )
    #set( $chanwAssetPathSegments = "" )
##
    #if( $chanwGetStructuredDataNodeDataNode.isAsset() )
        #set( $chanwAsset = $chanwGetStructuredDataNodeDataNode.Asset )
        #set( $chanwAssetType = $chanwGetStructuredDataNodeDataNode.Asset.Identifier.Type )
        #set( $chanwAssetLink = $chanwGetStructuredDataNodeDataNode.Asset.Link )
        #set( $chanwAssetPath = $chanwGetStructuredDataNodeDataNode.Asset.Path )
        #set( $chanwAssetSiteId = $chanwGetStructuredDataNodeDataNode.Asset.SiteId )
        #set( $chanwAssetSiteName = $chanwGetStructuredDataNodeDataNode.Asset.SiteName )
        #set( $chanwAssetPathSegments = $chanwGetStructuredDataNodeDataNode.Asset.Identifier.Path.PathSegments )
        #set( $dummy = $chanwGetStructuredDataNodeData.put( "Type", "Asset" ) )
    #end
    #set( $dummy = $chanwGetStructuredDataNodeData.put( "Asset", $chanwAsset ) )
    #set( $dummy = $chanwGetStructuredDataNodeData.put( "AssetType", $chanwAssetType ) )
    #set( $dummy = $chanwGetStructuredDataNodeData.put( "AssetLink", $chanwAssetLink ) )
    #set( $dummy = $chanwGetStructuredDataNodeData.put( "AssetPath", $chanwAssetPath ) )
    #set( $dummy = $chanwGetStructuredDataNodeData.put( "AssetSiteId", $chanwAssetSiteId ) )
    #set( $dummy = $chanwGetStructuredDataNodeData.put( "AssetSiteName", $chanwAssetSiteName ) )
    #set( $dummy = $chanwGetStructuredDataNodeData.put( "AssetPathSegments", $chanwAssetPathSegments ) )
##
    #set( $chanwTextValue = "" )
    #set( $chanwTextValues = "" )
    #set( $chanwTextNodeOptions = "" )
    #set( $chanwTextValueAsXMLElement = "" )
##
    #if( $chanwGetStructuredDataNodeDataNode.isText() )
        #set( $dummy = $chanwGetStructuredDataNodeData.put( "Type", "Text" ) )
        #set( $chanwTextValue = $chanwGetStructuredDataNodeDataNode.TextValue )
        #set( $chanwTextValues = $chanwGetStructuredDataNodeDataNode.TextValues )
        #set( $chanwTextNodeOptions = $chanwGetStructuredDataNodeDataNode.TextNodeOptions )
        #set( $chanwTextValueAsXMLElement = $chanwGetStructuredDataNodeDataNode.TextValueAsXMLElement )
    #end
    #set( $dummy = $chanwGetStructuredDataNodeData.put( "TextValue", $chanwTextValue ) )
    #set( $dummy = $chanwGetStructuredDataNodeData.put( "TextValues", $chanwTextValues ) )
    #set( $dummy = $chanwGetStructuredDataNodeData.put( "TextNodeOptions", $chanwTextNodeOptions ) )
    #set( $dummy = $chanwGetStructuredDataNodeData.put( "TextValueAsXMLElement", $chanwTextValueAsXMLElement ) )
#end
#*doc
《/macro》
《documentation》
《code》#chanwGetTextNodeSubType( $node )《/code》
《p》Returns the subtype of a text node.《/p》
《/documentation》
《macro id=“chanwGetTextNodeSubType”》
doc*###
#macro( chanwGetTextNodeSubType $chanwGetTextNodeSubTypeNode )
    #set( $chanwGetTextNodeSubType = "" )
    #set( $chanwGetTextNodeSubType = $_PropertyTool.isNull( $chanwGetTextNodeSubTypeNode ) )
##
    #if( $chanwGetTextNodeSubTypeNode.getTextNodeOptions().isWysiwyg() )
        #set( $chanwGetTextNodeSubType = $TYPE_WYSIWYG )
    #elseif( $chanwGetTextNodeSubTypeNode.TextNodeOptions.isCheckbox() )
        #set( $chanwGetTextNodeSubType = $TYPE_CHECKBOX )
    #elseif( $chanwGetTextNodeSubTypeNode.TextNodeOptions.isDropdown() )
        #set( $chanwGetTextNodeSubType = $TYPE_DROPDOWN )
    #elseif( $chanwGetTextNodeSubTypeNode.TextNodeOptions.isMultiselect() )
        #set( $chanwGetTextNodeSubType = $TYPE_MULTISELECT )
    #elseif( $chanwGetTextNodeSubTypeNode.TextNodeOptions.isRadio() )
        #set( $chanwGetTextNodeSubType = $TYPE_RADIO )
    #elseif( $chanwGetTextNodeSubTypeNode.TextNodeOptions.isPlainText() )
        #set( $chanwGetTextNodeSubType = $TYPE_PLAIN_TEXT )
    #elseif( $chanwGetTextNodeSubTypeNode.TextNodeOptions.isCalendar() )
        #set( $chanwGetTextNodeSubType = $TYPE_CALENDAR )
    #elseif( $chanwGetTextNodeSubTypeNode.TextNodeOptions.isDatetime() )
        #set( $chanwGetTextNodeSubType = $TYPE_DATE_TIME )
    #end    
#end
#*doc
《/macro》
《documentation》
《code》#chanwGetTextValues( $list )《/code》
《p》Returns a list of Strings from the original 《code》$list《/code》, with
all empty Strings removed.《/p》
《/documentation》
《macro id=“chanwGetTextValues”》
doc*###
#macro( chanwGetTextValues $chanwGetTextValuesList )
    #set( $chanwGetTextValues = [] )
##
#foreach( $str in $chanwGetTextValuesList )
#if( $str != "" )
    #if( $str.contains( "<" ) && $str.contains( ">" ) ) ## for wysiwyg
        #set( $void = $chanwGetTextValues.add( $str ) )
    #else
        #set( $void = $chanwGetTextValues.add( $_EscapeTool.xml( $str ) ) )
    #end
#end
#end
#end
#*doc
《/macro》
《documentation》
《code》#chanwIsAncestorOf( $folder $folderContainedAsset )《/code》
《p》Returns a boolean, indicating whether the folder is an ancestor of the folder contained asset.《/p》
《p》Examples:《/p》
《pre》
#set( $folder = $_.locateFolder( "web-services", "cascade-admin" ) )
#set( $page = $_.locatePage( "/formats/velocity/api-documentation/com-hannonhill-cascade-api-adapters/index-block-api-adapter", "cascade-admin" ) )
#chanwIsAncestorOf( $folder $page )
$chanwIsAncestorOf
《/pre》
《/documentation》
《macro id=“chanwIsAncestorOf”》
doc*###
#macro( chanwIsAncestorOf $chanwIsAncestorOfFolder $chanwIsAncestorOfFolderContainedAsset )
    #if( !$chanwIsAncestorOfFolder || $chanwIsAncestorOfFolder.Class.Name != "com.hannonhill.cascade.api.adapters.FolderAPIAdapter" )
#chanwOutputErrorMsg( $CHANW_LIBRARY_FOLDER_PATH $chanw_framework_site_name $CHANW_INITIALIZATION_FORMAT_NAME "No folder supplied." "894KIWLHLKLR" )
        
        #stop
    #elseif( !$chanwIsAncestorOfFolderContainedAsset )
#chanwOutputErrorMsg( $CHANW_LIBRARY_FOLDER_PATH $chanw_framework_site_name $CHANW_INITIALIZATION_FORMAT_NAME "No folder contained asset is supplied." "48RYGBNKGGLK" )
        #stop
    #end
##
    #chanwIsInstanceOf( $chanwIsAncestorOfFolderContainedAsset "com.hannonhill.cascade.api.adapters.FolderContainedAssetAPIAdapter" )
##
    #if( !$chanwIsInstanceOf )
#chanwOutputErrorMsg( $CHANW_LIBRARY_FOLDER_PATH $chanw_framework_site_name $CHANW_INITIALIZATION_FORMAT_NAME "No folder contained asset is supplied." "48HJKTIOWGJHUIOIO" )
        #stop
    #end
##
    ## make sure that the folder path starts with /
    #set( $chanwFolderPath = "/" + $chanwIsAncestorOfFolder.Path + "/" )
    #set( $chanwFolderContainedAssetPath = "/" + $chanwIsAncestorOfFolderContainedAsset.Path )
##
    #if( $chanwIsAncestorOfFolder.SiteName != $chanwIsAncestorOfFolderContainedAsset.SiteName ) ## different site, false
        #set( $chanwIsAncestorOf = false )
    #elseif( $chanwIsAncestorOfFolder.Path == "/" ) ## base folder, true
        #set( $chanwIsAncestorOf = true )
    #else
        #set( $chanwIsAncestorOf = $chanwFolderContainedAssetPath.contains( $chanwFolderPath ) )
    #end
#end
#*doc
《/macro》
《documentation》
《code》#chanwIsDescendentOf( $folder $folderContainedAsset )《/code》
《p》Returns a boolean, indicating whether the folder contained asset is a descendent of the folder.
This macro invokes 《code》#chanwIsAncestorOf《/code》.《/p》
《p》Examples:《/p》
《pre》
#set( $folder = $_.locateFolder( "formats", "cascade-admin" ) )
#set( $page = $_.locatePage( "/formats/velocity/api-documentation/com-hannonhill-cascade-api-adapters/index-block-api-adapter", "cascade-admin" ) )
#chanwIsDescendentOf( $folder $page )
$chanwIsDescendentOf
《/pre》
《/documentation》
《macro id=“chanwIsDescendentOf”》
doc*###
#macro( chanwIsDescendentOf $chanwIsDescendentOfFolder $chanwIsDescendentOfFolderContainedAsset )
    #chanwIsAncestorOf( $chanwIsDescendentOfFolder $chanwIsDescendentOfFolderContainedAsset )
    #set( $chanwIsDescendentOf = $chanwIsAncestorOf )
#end
#*doc
《/macro》
《documentation》
《code》#chanwProcessStructuredDataNodes( $sd $sds )《/code》
《p》Processes a structured data node or a list of structured data nodes,
and populates two maps 《code》$chanwChildParentMap《/code》 and
《code》$chanwChildParentMap《/code》. The 《code》$sds《/code》 variable, when defined,
points to an 《code》org.jdom.Element《/code》 object.《/p》
《p》For this macro to work properly, all and only identifiers of multiple fields in a data definition
must have the prefix "mul-". This ensures that multiple nodes (even when there is only one)
can be recognized when creating FQIs without consulting the data definition.《/p》
《pre》
#set( $block = $_.locateBlock( "_cascade/blocks/data/instruction-block-bottom-outer", "cascade-admin" ) )
#chanwGetFQINodeMap( $block.StructuredData )
#drulykgVarDump( $chanwGetFQINodeMap )
《/pre》
《/documentation》
《macro id=“chanwProcessStructuredDataNodes”》
doc*###
#macro( chanwProcessStructuredDataNodes $chanwProcessStructuredDataNodesSd $chanwProcessStructuredDataNodesSds )
    ## added 8/2/2018, to examine the data definition to determine if a node is multiple
    #if( $chanwGetFQINodeMap[ $KEY_ASSET ].Class.Name )
        #chanwGetRelatedBlockDataDefinition( $chanwGetFQINodeMap[ $KEY_ASSET ] )
        #chanwBuildXMLContentRoot( $chanwGetRelatedBlockDataDefinition.Xml )
        #chanwGetDataDefinitionAttributeMap( $chanwBuildXMLContentRoot $chanwGetRelatedBlockDataDefinition.Id )
    #end
##
    #set( $chanwChildParentMap   = {} )    ## child node as key, parent node as value
    #set( $chanwNodeAttributeMap = "" )
    #set( $chanwNodeAttributeMap = {} )    ## node as key, attribute map as value
    #set( $chanwRootString = "root" )      ## dummy parent for top-level nodes
##
    ## turn a single node to a list
    #set( $chanwStructuredData = $chanwProcessStructuredDataNodesSd )
##
    #if( !$chanwProcessStructuredDataNodesSd.size() )
        #set( $chanwStructuredData = [ $chanwProcessStructuredDataNodesSd ] )
    #end
##
    ## setup: deal with top-level nodes
    #foreach( $node in $chanwStructuredData )
        ## store the top-level nodes
        #set( $chanwChildParentMap[ $node ] = $chanwRootString )
        ## enqueue elements
        #chanwEnqueueGlobalQueue( $chanwGlobalQueue $node )
        ## top-level nodes should not be multiple; no $KEY_SIZE without the parent node
        #set( $chanwNodeAttributes = { 'path':$node.Identifier, $KEY_FQI:$node.Identifier  } )
##
        ## store type and data
        #if( $node.isGroup() )
            #set( $void = $chanwNodeAttributes.put( $KEY_TYPE, 'group' ) )
        #elseif( $node.isText() )
            #set( $void = $chanwNodeAttributes.put( $KEY_TYPE, 'text' ) )
            #chanwGetTextNodeSubType( $node )
            #set( $void = $chanwNodeAttributes.put( $KEY_SUBTYPE, $chanwGetTextNodeSubType ) )
##
            ## added two more 7/19/2018
            #if( $chanwNodeAttributes[ $KEY_SUBTYPE ] == $TYPE_PLAIN_TEXT || $chanwNodeAttributes[ $KEY_SUBTYPE ] == $TYPE_DROPDOWN ||
                 $chanwNodeAttributes[ $KEY_SUBTYPE ] == $TYPE_RADIO      || $chanwNodeAttributes[ $KEY_SUBTYPE ] == $TYPE_CALENDAR ||
                 $chanwNodeAttributes[ $KEY_SUBTYPE ] == $TYPE_DATE_TIME )
                #set( $void = $chanwNodeAttributes.put( $KEY_DATA, $_EscapeTool.xml( $node.TextValue ) ) )
            #elseif( $node.TextNodeOptions.isWysiwyg() )
                #set( $void = $chanwNodeAttributes.put( $KEY_DATA, $node.TextValue ) )
            #elseif( $node.TextValues.Class.Name )
                #chanwGetTextValues( $node.TextValues )
                #set( $void = $chanwNodeAttributes.put( $KEY_DATA, $chanwGetTextValues ) )
            #end
        #else ## asset
            #set( $void = $chanwNodeAttributes.put( $KEY_TYPE, 'asset' ) )
            #if( $node.Asset )
                #set( $void = $chanwNodeAttributes.put( $KEY_DATA, $node.Asset.Identifier.Path.PathAsString ) )
                #set( $void = $chanwNodeAttributes.put( $KEY_SITE, $child.Asset.Site ) )
                #set( $chanwNodeAttributes[ $KEY_SUBTYPE ] = $node.Asset.Identifier.Type )
                #if( $child.Asset.Identifier.Type == "symlink" )
                    #set( $chanwNodeAttributes[ $KEY_URL ] = $child.Asset.Link )
                #end
            #end
        #end
##
        #set( $chanwNodeAttributeMap[ $node ] = $chanwNodeAttributes )
    #end
##
    ## while the queue is not empty
    #foreach( $num in [ 1..5000 ] )
        #chanwDequeueGlobalQueue( $chanwGlobalQueue )
##
        #if( $chanwDequeueGlobalQueue.isGroup() )
            #set( $chanwChildren = $chanwDequeueGlobalQueue.Children )
            ## variables to work with multiple nodes
            #set( $chanwPreviousIdentifier = "" )
            #set( $chanwOffset             = 0 )
            #set( $chanwCurrentIndex       = 0 )
##
            #foreach( $child in $chanwChildren )
                #chanwEnqueueGlobalQueue( $chanwGlobalQueue $child )
                #set( $chanwChildParentMap[ $child ] = $chanwDequeueGlobalQueue )
##
                ## multiple nodes, added 8/2/2018
                #set( $chanwDDFieldPath = "$chanwNodeAttributeMap[ $chanwChildParentMap[ $child ] ][ $KEY_FQI ];$child.Identifier" )
                #set( $chanwDDFieldPath = $chanwDDFieldPath.replaceAll( ";\d+;", ";" ) )
##
                #if( $child.Identifier.startsWith( 'mul-' ) || $chanwGetDataDefinitionAttributeMap[ $chanwGetRelatedBlockDataDefinition.Id ][ $chanwDDFieldPath ][ "multiple" ].Class.Name )
                    ## first instance
                    #if( $chanwPreviousIdentifier == "" || $chanwPreviousIdentifier != $child.Identifier )
                        ## the actual index of the first instance
                        #set( $chanwOffset = $chanwChildren.indexOf( $child ) )
                        ## get the parent fqi
                        #set( $chanwParentFQI = $chanwNodeAttributeMap[ $chanwChildParentMap[ $child ] ][ $KEY_FQI ] )
                        ## append the child local path to parent fqi to create the child fqi
                        #set( $chanwNodeAttributes = { 'index':0, 'path':"${child.Identifier};0",
                            $KEY_FQI:"${chanwParentFQI};${child.Identifier};0" } )
                        ## store the size of the set of multiple nodes having the same identifier
                        #set( $chanwNodeAttributes[ $KEY_SIZE ] = $chanwChildParentMap[ $child ].getChildren( $child.Identifier ).size() )
                    ## other instances
                    #elseif( $chanwPreviousIdentifier == $child.Identifier )
                        #set( $chanwCurrentIndex = $chanwChildren.indexOf( $child ) - $chanwOffset )
                        #set( $chanwParentFQI = $chanwNodeAttributeMap[ $chanwChildParentMap[ $child ] ][ $KEY_FQI ] )
                        #set( $chanwNodeAttributes = { 'index':$chanwCurrentIndex, 'path':"${child.Identifier};${chanwCurrentIndex}",
                            $KEY_FQI:"${chanwParentFQI};${child.Identifier};${chanwCurrentIndex}" } )
                        #set( $chanwNodeAttributes[ $KEY_SIZE ] = $chanwChildParentMap[ $child ].getChildren( $child.Identifier ).size() )
                    #end
                ## non-multiple
                #else
                    #set( $chanwParentFQI = $chanwNodeAttributeMap[ $chanwChildParentMap[ $child ] ][ $KEY_FQI ] )
                    #set( $chanwNodeAttributes = { 'path':"${child.Identifier}", 
                        $KEY_FQI:"${chanwParentFQI};${child.Identifier}" } )
                #end
##
                ## process data
                #if( $child.isAsset() )
                    #set( $void = $chanwNodeAttributes.put( $KEY_TYPE, 'asset' ) )
                    #if( $child.Asset )
                        #set( $void = $chanwNodeAttributes.put( $KEY_DATA, $child.Asset.Identifier.Path.PathAsString ) )
                        #set( $void = $chanwNodeAttributes.put( $KEY_SITE, $child.Asset.Site ) )
                        #set( $chanwNodeAttributes[ $KEY_SUBTYPE ] = $child.Asset.Identifier.Type )
                        #set( $chanwNodeFQI = $chanwNodeAttributes[ "fqi" ] )
                        #chanwConvertFQIToXPath( $chanwNodeFQI )
                        #set( $chanwNodeAttributes[ $KEY_CONTENT ] =
                            $_XPathTool.selectSingleNode( $chanwProcessStructuredDataNodesSds, $chanwConvertFQIToXPath ).getChild( $KEY_CONTENT ) )
                        #if( $child.Asset.Identifier.Type == "symlink" )
                            #set( $chanwNodeAttributes[ $KEY_URL ] = $child.Asset.Link )
                        #end
                    #end
                #elseif( $child.isText() )
                    #set( $void = $chanwNodeAttributes.put( $KEY_TYPE, 'text' ) )
                    #chanwGetTextNodeSubType( $child )
                    #set( $void = $chanwNodeAttributes.put( $KEY_SUBTYPE, $chanwGetTextNodeSubType ) )
##
                    #if( $chanwNodeAttributes[ $KEY_SUBTYPE ] == $TYPE_PLAIN_TEXT || $chanwNodeAttributes[ $KEY_SUBTYPE ] == $TYPE_DROPDOWN || 
                        $chanwNodeAttributes[ $KEY_SUBTYPE ] == $TYPE_RADIO )
                        #set( $void = $chanwNodeAttributes.put( $KEY_DATA, $_EscapeTool.xml( $child.TextValue ) ) )
                    #elseif( $child.TextNodeOptions.isWysiwyg()  )
                        #set( $void = $chanwNodeAttributes.put( $KEY_DATA, $child.TextValue ) )
                    #elseif( $child.TextValues.Class.Name )
                        #chanwGetTextValues( $child.TextValues )
##
                        #set( $void = $chanwNodeAttributes.put( $KEY_DATA, $chanwGetTextValues ) )
                    #end
                #else ## group
                    #set( $void = $chanwNodeAttributes.put( $KEY_TYPE, 'group' ) )
                #end
##
                ## store attributes
                #set( $chanwNodeAttributeMap[ $child ] = $chanwNodeAttributes )
            
                ## update previous identifier for next loop
                #set( $chanwPreviousIdentifier = $child.Identifier )
            #end
        #end
##
        ## exit when the queue is empty
        #chanwSizeGlobalQueue( $chanwGlobalQueue )
##
        #if( $chanwSizeGlobalQueue == 0 )
            #break
        #end
    #end
#end
#*doc
《/macro》
《documentation》
《code》#chanwRecurseGroup( $group_node )《/code》
《p》Displays group node information recursively, used by 《code》#chanwRecurseNodes《/code》.《/p》
《/documentation》
《macro id=“chanwRecurseGroup”》
doc*###
#macro( chanwRecurseGroup $chanwRecurseGroupGroupNode $chanwRecurseGroupWithBr )
    #chanwDisplayStructuredDataNode( $chanwRecurseGroupGroupNode $chanwRecurseGroupWithBr )
    ##Group identifier: $chanwRecurseGroupGroupName.Identifier$BR 
##
    #set( $chanwChildren = $chanwRecurseGroupGroupNode.Children )
##
    #if( $chanwChildren.size() > 0 )      
        #chanwRecurseNodes( $chanwChildren $chanwRecurseGroupWithBr )
    #end
#end
#*doc
《/macro》
《documentation》
《code》#chanwRecurseNodes( $nodes )《/code》
《p》Displays node information recursively.《/p》
《pre》
#set( $b  = $_.locateBlock( “_cascade/blocks/data/test-groups-texts“ ) )
#set( $sd = $b.getStructuredData() )

#chanwRecurseNodes( $sd )
《/pre》
《/documentation》
《macro id=“chanwRecurseNodes”》
doc*###
#macro( chanwRecurseNodes $chanwRecurseNodesNodes )
    #if( $chanwRecurseNodesNodes.isGroup() )
        #chanwRecurseGroup( $chanwRecurseNodesNodes )
    #elseif( $chanwRecurseNodesNodes.class.name != $COM_CASCADE_STRUCTURED_DATA_LIST_CLASS_NAME )
#chanwOutputErrorMsg( $CHANW_LIBRARY_FOLDER_PATH $chanw_framework_site_name $CHANW_INITIALIZATION_FORMAT_NAME "$chanwRecurseNodesNodes is not a list of nodes." "KLMBHLLWKHKLGSL; T;L KBM," )
        #stop
    #end
##
    #foreach( $child in $chanwRecurseNodesNodes )
        #if( $child.isGroup() )#chanwRecurseGroup( $child )
        #else#chanwDisplayStructuredDataNode( $child $chanwRecurseGroupWithBr )#end
    #end
#end
#*doc
《/macro》
《documentation》
《code》#chanwShowMetadataData( $chanwMetadata )《/code》
《p》Shows information in metadata. Here is an output of the macro:《/p》
《pre》
Display name: Cascade Administration
Title: Cascade Administration
*****
Name: exclude-from-menu
Type: Checkbox
No text value
Name: exclude-from-left
Type: Checkbox
No text value
《/pre》
《p》Example:《/p》
《pre》
#chanwShowMetadataData( $currentPage.Metadata )
《/pre》
《/documentation》
《macro id=“chanwShowMetadataData”》
doc*###
#macro( chanwShowMetadataData $chanwShowMetadataDataMetadata )
    #if( $chanwShowMetadataDataMetadata.class.name != $COM_CASCADE_METADATA_CLASS_NAME )
#chanwOutputErrorMsg( $CHANW_LIBRARY_FOLDER_PATH $chanw_framework_site_name $CHANW_INITIALIZATION_FORMAT_NAME "A Metadata object is required." "bkl4w g jknnwlnktw" )
        #stop
    #end
##
    #if( $chanwShowMetadataDataMetadata.DisplayName )Display name: $chanwShowMetadataDataMetadata.DisplayName$BR #end
    #if( $chanwShowMetadataDataMetadata.Description )Description: $chanwShowMetadataDataMetadata.Description$BR #end
    #if( $chanwShowMetadataDataMetadata.Title )Title: $chanwShowMetadataDataMetadata.Title$BR #end
    #if( $chanwShowMetadataDataMetadata.Summary )Summary: $chanwShowMetadataDataMetadata.Summary$BR #end
    #if( $chanwShowMetadataDataMetadata.Teaser )Teaser: $chanwShowMetadataDataMetadata.Teaser$BR #end
    #if( $chanwShowMetadataDataMetadata.Keywords )Keywords: $chanwShowMetadataDataMetadata.Keywords$BR #end
    #if( $chanwShowMetadataDataMetadata.Author )Author: $chanwShowMetadataDataMetadata.Author$BR #end
    #if( $chanwShowMetadataDataMetadata.ReviewDate )ReviewDate: $chanwShowMetadataDataMetadata.ReviewDate$BR #end
    #if( $chanwShowMetadataDataMetadata.StartDate )StartDate: $chanwShowMetadataDataMetadata.StartDate$BR #end
    #if( $chanwShowMetadataDataMetadata.EndDate )EndDate: $chanwShowMetadataDataMetadata.EndDate$BR #end
##
    #set( $chanwDFS = $chanwShowMetadataDataMetadata.DynamicFields )
##
    #if( $chanwDFS.size() > 0 )
    *****$BR
        #foreach( $chanwDF in $chanwDFS )
            Name: $chanwDF.Name$BR
            #if( $chanwDF.isCheckbox() )
            Type: Checkbox$BR
            #elseif( $chanwDF.isDropdown() )
            Type: Dropdown$BR
            #elseif( $chanwDF.isMultiselect() )
            Type: Multiselect$BR
            #elseif( $chanwDF.isRadio() )
            Type: Radio$BR
            #end
##
            #set( $chanwTextSize = $chanwDF.Values.size() )
            #if( $chanwTextSize > 0 )
                Size: $chanwTextSize$BR
                #foreach( $value in $chanwDF.Values )
                    #if( $value != "" )
                    Text value: $value$BR
                    #end
                #end
            #else
            No text value$BR
            #end
            $BR
        #end
    #end
#end
#*doc
《/macro》
《documentation》
《code》#chanwShowStructuredDataNodeData( $node )《/code》
《p》Shows some information of the node. This macro invokes
《code》chanwGetStructuredDataNodeData《/code》 to get the data.《/p》
《p》Here are some outputs when nodes of various types are passed into this macro:《/p》
《pre》
Group:
============================
Identifier: group
Type: Group
Children size: 15

Plain text:
============================
Identifier: text-box
Type: Text
Text value: Some text here
Text values:
Some text here
Text node options:
Plain text: true
Radio: false
Calendar: false
Datetime: false
Checkbox: false
Multiselect: false
Wysiwyg: false
Dropdown: false

Checkbox:
============================
Identifier: checkbox
Type: Text
Text value:
Text values:
Fishing
Jogging
Swimming
Text node options:
Plain text: false
Radio: false
Calendar: false
Datetime: false
Checkbox: true
Multiselect: false
Wysiwyg: false
Dropdown: false

WYSIWYG:
============================
Identifier: wysiwyg
Type: Text
Text value:

Wonderful
News!

Text values:
Text node options:
Plain text: false
Radio: false
Calendar: false
Datetime: false
Checkbox: false
Multiselect: false
Wysiwyg: true
Dropdown: false

Multiselect:
============================
Identifier: multiselect
Type: Text
Text value:
Text values:
Year 2
Year 3
Text node options:
Plain text: false
Radio: false
Calendar: false
Datetime: false
Checkbox: false
Multiselect: true
Wysiwyg: false
Dropdown: false

Datetime:
============================
Identifier: date-time
Type: Text
Text value: 1480470660000
Text values:
Text node options:
Plain text: false
Radio: false
Calendar: false
Datetime: true
Checkbox: false
Multiselect: false
Wysiwyg: false
Dropdown: false

Calendar:
============================
Identifier: calendar
Type: Text
Text value: 02-23-2015
Text values:
Text node options:
Plain text: false
Radio: false
Calendar: true
Datetime: false
Checkbox: false
Multiselect: false
Wysiwyg: false
Dropdown: false

Block chooser:
============================
Identifier: block-chooser
Type: Asset
Asset type: block
Asset path: _cascade/blocks/data/designer-pro-block
Asset site name: cascade-admin
《/pre》
《/documentation》
《macro id=“chanwShowStructuredDataNodeData”》
doc*###
#macro( chanwShowStructuredDataNodeData $chanwShowStructuredDataNodeDataNode )
#chanwGetStructuredDataNodeData( $chanwShowStructuredDataNodeDataNode )
##
Identifier: $chanwGetStructuredDataNodeData[ 'Identifier' ]
Type: $chanwGetStructuredDataNodeData[ 'Type' ]
##
#if( $chanwShowStructuredDataNodeDataNode.isGroup() )
Children size: $chanwShowStructuredDataNodeDataNode.Children.size()$BR
#elseif( $chanwShowStructuredDataNodeDataNode.isAsset() )
Asset type: $chanwGetStructuredDataNodeData[ "AssetType" ]
Asset path: $chanwGetStructuredDataNodeData[ "AssetPath" ]
Asset site name: $chanwGetStructuredDataNodeData[ "AssetSiteName" ]
#else ## Text
Text value: $chanwGetStructuredDataNodeData[ "TextValue" ]
Text values:
##
#if( $chanwShowStructuredDataNodeDataNode.TextValues.size() > 1 )
#foreach( $string in $chanwShowStructuredDataNodeDataNode.TextValues )
#if( $foreach.count == 1 )
## do nothing to skip the first empty string
#else
$string
#end
#end
#else
## do nothing
#end
Text node options:
#if( $chanwShowStructuredDataNodeDataNode.TextNodeOptions )
Plain text: $chanwShowStructuredDataNodeDataNode.TextNodeOptions.isPlainText()
Radio: $chanwShowStructuredDataNodeDataNode.TextNodeOptions.isRadio()
Calendar: $chanwShowStructuredDataNodeDataNode.TextNodeOptions.isCalendar()
Datetime: $chanwShowStructuredDataNodeDataNode.TextNodeOptions.isDatetime()
Checkbox: $chanwShowStructuredDataNodeDataNode.TextNodeOptions.isCheckbox()
Multiselect: $chanwShowStructuredDataNodeDataNode.TextNodeOptions.isMultiselect()
Wysiwyg: $chanwShowStructuredDataNodeDataNode.TextNodeOptions.isWysiwyg()
Dropdown: $chanwShowStructuredDataNodeDataNode.TextNodeOptions.isDropdown()
#end
#end
#end
#*doc
《/macro》
《documentation》
《p》The list and the 《code》$foreach《/code》 structure are used to generate macros
like 《code》#chanwProcessDataBlock《/code》.《/p》
《/documentation》
《macro id=“generatedCode”》
doc*###
#set( $process_cascade_api_asset_code =
$SINGLE_HASH + 'macro( chanwProcess-asset_type- ' + $DOLLAR + 'asset )' +
    $SINGLE_HASH + 'if( !' + $DOLLAR + 'asset || ' +
        $DOLLAR + 'asset.Class.Name != ' + $DOLLAR + 'CASCADE_API_-asset_type-_CLASS_NAME )' +
        'Not a -asset_type-.' +
        $SINGLE_HASH + 'stop' +
    $SINGLE_HASH + 'end' +
    $SINGLE_HASH + 'set( $chanwKeySet=' + $DOLLAR + '-asset_type-PropertyMap.keySet() )' +
    $SINGLE_HASH + 'foreach(' + $DOLLAR + 'var in ' + $DOLLAR + 'chanwKeySet)' +
    $SINGLE_HASH + 'set(' + $DOLLAR + 'chanwStmt = ' + $SINGLE_QUOTE + $SINGLE_HASH + 
    'chanwSetVariable(' + $DOLLAR + 'var ' + $DOLLAR + 'asset.' + $SINGLE_QUOTE + ' + ' +
    $DOLLAR + '-asset_type-PropertyMap.get(' + 
    '$' + 'var' + ')' + '+' + $SINGLE_QUOTE + ')' + $SINGLE_QUOTE + ')' +
    $SINGLE_HASH + 'evaluate(' + $DOLLAR + 'chanwStmt)' +
    $SINGLE_HASH + 'end' +
    $SINGLE_HASH + 'end' )
#set( $chanwCascadeAssetList = [
    "DataBlock",
    "FeedBlock",
    "File",
    "Folder",
    "Page",
    "ScriptFormat",
    "Symlink",
    "TextBlock",
    "XMLBlock"
] )
#foreach( $asset in $chanwCascadeAssetList )
    #set( $chanwStmt = $process_cascade_api_asset_code.replaceAll(
        '-asset_type-', $asset ) )
    #evaluate( $chanwStmt )
#end
#*doc
《/macro》
《documentation》
《code》#chanwInvokeQuery( $type $link $assets $hasMetadata $maxResults $sortBy
$direction $siteName $indexablePublishable )《/code》
《p》Creates a 《code》$query《/code》 object, sets the parameters, and executes
the query. Parameters:《/p》
《pre》
 $type: “MetadataSet“ or “ContentType“
 $link: e.g. “Blog“, “site://common/Standard Page“
 $assets: a list of five boolean values for blocks, files, folders, pages, symlinks [ true, false, true, true, true ]
 $hasMetadata: either an empty list[] or a list containing two strings [ “displayName“, “Index“ ]
 $maxResults: an integer, e.g. -1, 50
 $sortBy: “author“, “description“, etc.
 $direction: “asc“, “desc“
 $siteName: ““ meaning searchAcrossAllSites(), or a site name like “medicine“
 $indexablePublishable: a list of two boolean values, [ true, true ]
《/pre》
《p》Example:《/p》
《pre》
#chanwInvokeQuery( “MetadataSet“ “site://_common/Page“ [ false, false, false, true, false ] [] 30 “author“ “desc“ ““ [ true, false ] )
$chanwInvokeQuery.size()
《/pre》
《/documentation》
《macro id=“chanwInvokeQuery”》
doc*###
#macro( chanwInvokeQuery $chanwInvokeQueryType $chanwInvokeQueryLink $chanwInvokeQueryAssets $chanwInvokeQueryHasMetadata $chanwInvokeQueryMaxResults $chanwInvokeQuerySortBy $chanwInvokeQueryDirection $chanwInvokeQuerySiteName $chanwInvokeQueryIndexablePublishable )
    #if( $chanwInvokeQueryType != "MetadataSet" && $chanwInvokeQueryType != "ContentType" )
        $chanwInvokeQueryType is not an acceptable type.
        #stop
    #end
##
    #if( !$chanwInvokeQueryLink || $chanwInvokeQueryLink == "" )
        A path to either the MetadataSet or ContentType must be provided.
        #stop
    #end
##
    #set( $chanwStmt = '#set($chanwQuery=$_.query())' )
    #set( $chanwStmt = $chanwStmt + '#set($chanwInvokeQuery=' )
    #set( $chanwStmt = $chanwStmt + '$chanwQuery.by' + $chanwInvokeQueryType + "('$chanwInvokeQueryLink')" )
##
    #if( $chanwInvokeQueryAssets.size() == 5 )
        #set( $chanwStmt = $chanwStmt + 
                       '.includeBlocks(' + $chanwInvokeQueryAssets[ 0 ] + ')' +
                       '.includeFiles(' + $chanwInvokeQueryAssets[ 1 ] + ')' +
                       '.includeFolders(' + $chanwInvokeQueryAssets[ 2 ] + ')' +
                       '.includePages(' + $chanwInvokeQueryAssets[ 3 ] + ')' +
                       '.includeSymlinks(' + $chanwInvokeQueryAssets[ 4 ] + ')'
        )
    #end
##
    #if( $chanwInvokeQueryHasMetadata.size() == 2 )
        #if( $chanwInvokeQueryHasMetadata[ 1 ].Class.Name == $JAVA_LANG_STRING_CLASS_NAME )
            #set( $chanwStmt = $chanwStmt + '.hasMetadata(' +
                "'" + $chanwInvokeQueryHasMetadata[ 0 ] + "','" + $chanwInvokeQueryHasMetadata[ 1 ] + "'" + ')' )
        #elseif( $chanwInvokeQueryHasMetadata[ 1 ].Class.Name == $JAVA_UTIL_ARRAY_LIST_CLASS_NAME )
            #set( $chanwStmt = $chanwStmt + '.hasMetadata(' +
                    "'" + $chanwInvokeQueryHasMetadata[ 0 ] + "',[" )
            #foreach( $str in $chanwInvokeQueryHasMetadata[ 1 ] )
                #set( $chanwStmt = $chanwStmt + "'" + $str + "'" )
                #if( $foreach.count < $chanwInvokeQueryHasMetadata[ 1 ].size() )
                    #set( $chanwStmt = $chanwStmt + "," )
                #end
            #end
            #set( $chanwStmt = $chanwStmt + "])" )
        #end
    #end
##
    #if( $chanwInvokeQueryMaxResults > 0 )
        #set( $chanwStmt = $chanwStmt + '.maxResults(' + $chanwInvokeQueryMaxResults + ')' )
    #end
##
    #if( $chanwInvokeQuerySortBy && $chanwInvokeQuerySortBy != "" )
        #set( $chanwStmt = $chanwStmt + '.sortBy' + "('$chanwInvokeQuerySortBy')" )
    #end
##
    #if( $chanwInvokeQueryDirection && $chanwInvokeQueryDirection != "" )
        #set( $chanwStmt = $chanwStmt + '.sortDirection' + "('$chanwInvokeQueryDirection')" )
    #end
##
    #if( !$chanwInvokeQuerySiteName || $chanwInvokeQuerySiteName == "" )
        #set( $chanwStmt = $chanwStmt + '.searchAcrossAllSites()' )
    #else
        #set( $chanwStmt = $chanwStmt + '.siteName' + "('$chanwInvokeQuerySiteName')" )
    #end
##
    #if( $chanwInvokeQueryIndexablePublishable.size() == 2 )
        #set( $chanwStmt = $chanwStmt + '.indexableOnly' + '(' + $chanwInvokeQueryIndexablePublishable[ 0 ] + ')' +
            '.publishableOnly' + '(' + $chanwInvokeQueryIndexablePublishable[ 1 ] + ')' )
    #end
##
    #set( $chanwStmt = $chanwStmt + '.execute() )' )
    #evaluate( $chanwStmt )
#end
#*doc
《/macro》
《documentation》
《code》#chanwInvokeQueryWithMap( $map )《/code》
《p》Invokes 《code》#chanwInvokeQuery《/code》 by passing in data from the map. Example:《/p》
《pre》
#chanwInvokeQueryWithMap( {
    $PARAM_TYPE         : $PARAM_VALUE_METADATA_SET,
    $PARAM_LINK         : "site://_common_assets/Page",
    $PARAM_HAS_METADATA : [ "exclude-from-menu", [ "Yes" ] ],
    $PARAM_INDEXABLE    : true
} )

$chanwInvokeQueryWithMap.size()
《/pre》
《/documentation》
《macro id=“chanwInvokeQueryWithMap”》
doc*###
#macro( chanwInvokeQueryWithMap $chanwInvokeQueryWithMapMap )
    #if( $chanwInvokeQueryWithMapMap[ $PARAM_TYPE ] )
        #set( $chanwInvokeQueryWithMapType = $chanwInvokeQueryWithMapMap[ $PARAM_TYPE ] )
    #else
        #set( $chanwInvokeQueryWithMapType = "MetadataSet" )
    #end
##
    #if( $chanwInvokeQueryWithMapMap[ $PARAM_LINK ] )
        #set( $chanwInvokeQueryWithMapLink = $chanwInvokeQueryWithMapMap[ $PARAM_LINK ] )
    #end
##
    #if( $chanwInvokeQueryWithMapMap[ $PARAM_ASSETS ] )
        #set( $chanwInvokeQueryWithMapAssets = [] ) ## a list of five boolean values
##
        #if( $chanwInvokeQueryWithMapMap[ $PARAM_ASSETS ][ $PARAM_BLOCKS ].Class.Name &&
            !$chanwInvokeQueryWithMapMap[ $PARAM_ASSETS ][ $PARAM_BLOCKS ] )
            #set( $void = $chanwInvokeQueryWithMapAssets.add( false ) )
        #else
            #set( $void = $chanwInvokeQueryWithMapAssets.add( true ) )
        #end
##
        #if( $chanwInvokeQueryWithMapMap[ $PARAM_ASSETS ][ $PARAM_FILES ].Class.Name &&
            !$chanwInvokeQueryWithMapMap[ $PARAM_ASSETS ][ $PARAM_FILES ] )
            #set( $void = $chanwInvokeQueryWithMapAssets.add( false ) )
        #else
            #set( $void = $chanwInvokeQueryWithMapAssets.add( true ) )
        #end
##
        #if( $chanwInvokeQueryWithMapMap[ $PARAM_ASSETS ][ $PARAM_FOLDERS ].Class.Name &&
            !$chanwInvokeQueryWithMapMap[ $PARAM_ASSETS ][ $PARAM_FOLDERS ] )
            #set( $void = $chanwInvokeQueryWithMapAssets.add( false ) )
        #else
            #set( $void = $chanwInvokeQueryWithMapAssets.add( true ) )
        #end
##
        #if( $chanwInvokeQueryWithMapMap[ $PARAM_ASSETS ][ $PARAM_PAGES ].Class.Name &&
            !$chanwInvokeQueryWithMapMap[ $PARAM_ASSETS ][ $PARAM_PAGES ] )
            #set( $void = $chanwInvokeQueryWithMapAssets.add( false ) )
        #else
            #set( $void = $chanwInvokeQueryWithMapAssets.add( true ) )
        #end
##
        #if( $chanwInvokeQueryWithMapMap[ $PARAM_ASSETS ][ $PARAM_SYMLINKS ].Class.Name &&
            !$chanwInvokeQueryWithMapMap[ $PARAM_ASSETS ][ $PARAM_SYMLINKS ] )
            #set( $void = $chanwInvokeQueryWithMapAssets.add( false ) )
        #else
            #set( $void = $chanwInvokeQueryWithMapAssets.add( true ) )
        #end
    #end
##
    #if( $chanwInvokeQueryWithMapMap[ $PARAM_HAS_METADATA ] &&
        $chanwInvokeQueryWithMapMap[ $PARAM_HAS_METADATA ].size() == 2
    )
        #set( $chanwInvokeQueryWithMapHasMetadata = $chanwInvokeQueryWithMapMap[ $PARAM_HAS_METADATA ] )
    #end
##
    #if( $chanwInvokeQueryWithMapMap[ $PARAM_MAX_RESULTS ] )
        #set( $chanwInvokeQueryWithMapMaxResults = $chanwInvokeQueryWithMapMap[ $PARAM_MAX_RESULTS ] )
    #end
##
    #if( $chanwInvokeQueryWithMapMap[ $PARAM_SORT_BY ] )
        #set( $chanwInvokeQueryWithMapSortBy = $chanwInvokeQueryWithMapMap[ $PARAM_SORT_BY ] )
    #end
##
    #if( $chanwInvokeQueryWithMapMap[ $PARAM_DIRECTION ] )
        #set( $chanwInvokeQueryWithMapDirection = $chanwInvokeQueryWithMapMap[ $PARAM_DIRECTION ] )
    #end
##
    #if( $chanwInvokeQueryWithMapMap[ $PARAM_SITE_NAME ] )
        #set( $chanwInvokeQueryWithMapSiteName = $chanwInvokeQueryWithMapMap[ $PARAM_SITE_NAME ] )
    #end
##
    #set( $chanwInvokeQueryWithMapIndexablePublishable = [] ) ## a list of two boolean values
##
    #if( $chanwInvokeQueryWithMapMap[ $PARAM_INDEXABLE ] && $chanwInvokeQueryWithMapMap[ $PARAM_PUBLISHABLE ] )
        #set( $void = $chanwInvokeQueryWithMapIndexablePublishable.add( $chanwInvokeQueryWithMapMap[ $PARAM_INDEXABLE ] ) )
        #set( $void = $chanwInvokeQueryWithMapIndexablePublishable.add( $chanwInvokeQueryWithMapMap[ $PARAM_PUBLISHABLE ] ) )
    #end
##
    #chanwInvokeQuery( $chanwInvokeQueryWithMapType $chanwInvokeQueryWithMapLink 
        $chanwInvokeQueryWithMapAssets $chanwInvokeQueryWithMapHasMetadata
        $chanwInvokeQueryWithMapMaxResults $chanwInvokeQueryWithMapSortBy
        $chanwInvokeQueryWithMapDirection $chanwInvokeQueryWithMapSiteName
        $chanwInvokeQueryWithMapIndexablePublishable )
    #set( $chanwInvokeQueryWithMap = $chanwInvokeQuery )
#end
#*doc
《/macro》
《/code》
doc*###