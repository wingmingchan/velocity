#*doc
《code》
《copyright》
Author: Wing Ming Chan
Copyright (c) 2017 Wing Ming Chan <chanw@upstate.edu>
MIT Licensed
Modification history:
7/14/2017 Added more documentation.
5/17/2017 Added more tests to #chanwDisplayClassAPI.
4/7/2017 Added more annotations.
《/copyright》
《evaluate execute=“false”》
《div id=“hide-code1”》
《h2》Test Code and Results《/h2》
《pre》
《/pre》
《/div》
《/evaluate》
《documentation id=“top”》
《h2》Introduction《/h2》
《p》This format provides utility macros for reflection and displaying
class API. It can be used to generate documentation pages, like those in
http://www.upstate.edu/cascade-admin/formats/velocity/api-documentation/index.php.
The 《code》#chanwDisplayClassAPI《/code》 macro can accept three params,
the second and third are optional. Example:《/p》
《pre》
#chanwDisplayClassAPI( "java.lang.Math", "h3", "true" ) ## pass in a class name
#chanwDisplayClassAPI( $_, "h3", "true" )               ## pass in an object
#chanwDisplayClassAPI( $_.Class, "h3", "true" )         ## pass in a java.lang.Class object
#chanwDisplayClassAPI( $_ )                             ## pass in an object
《/pre》
《p》For a class name like "java.util.HashMap&lt;K, V&gt;", pass in the string
"java.util.LinkedHashMap,K,V" as the class name:《/p》
《pre》
#chanwDisplayClassAPI( "java.util.HashMap,K,V" ) ## pass in a class name with commas
《/pre》
《/documentation》
《import》
doc*###
#import( 'core/library/velocity/chanw/chanw-initialization' )
#*doc
《/import》
《global-variables》
doc*###
#set( $chanwReflectUtilitiesGlobalVariables = [
    "chanwClassObj",
    "chanwClassString",
    "chanwConstructors",
    "chanwHeading",
    "chanwIndex",
    "chanwMethods",
    "chanwModifier",
    "chanwObjString",
    "chanwObjType",
    "chanwParamTypes",
    "chanwParamTypesString",
    "chanwReturnType",
    "chanwSuffix",
    "chanwWithH2"
] )
#*doc
《/global-variables》
《documentation》
《code》#chanwDisplayClassAPI( $obj $heading $withH2 )《/code》
《p》Displays essential information of a class, including a list of constructors
and methods. This macro only sets up parameters, possibly with default values,
and invokes 《code》#chanwDisplayObjClass《/code》. Use this macro as the entry
point to this library format.《/p》
《/documentation》
《macro id=“chanwDisplayClassAPI”》
doc*###
#macro( chanwDisplayClassAPI $chanwDisplayClassAPIObj $chanwDisplayClassAPIHeading $chanwDisplayClassAPIWithH2 )
    #if( !$chanwDisplayClassAPIObj.Class.Name )
        No parameter supplied.
        #stop
    #end
##
    #if( !$chanwDisplayClassAPIHeading || $chanwDisplayClassAPIHeading.Class.Name != $JAVA_LANG_STRING_CLASS_NAME || $chanwDisplayClassAPIHeading == "" )
        #set( $chanwHeading = "h3" )
    #else
        #set( $chanwHeading = $chanwDisplayClassAPIHeading )
    #end
##
    #if( !$chanwDisplayClassAPIWithH2 || $chanwDisplayClassAPIWithH2.Class.Name != $JAVA_LANG_BOOLEAN_CLASS_NAME )
        #set( $chanwWithH2 = true )
    #else
        #set( $chanwWithH2 = $chanwDisplayClassAPIWithH2 )
    #end
##
    #chanwDisplayObjClass( $chanwDisplayClassAPIObj $chanwHeading $chanwWithH2 )
#end
#*doc
《/macro》
《documentation》
《code》#chanwDisplayObjClass( $obj $heading $withH2 )《/code》
《p》Calls other macros and displays class API information.《/p》
《/documentation》
《macro id=“chanwDisplayObjClass”》
doc*###
#macro( chanwDisplayObjClass $chanwDisplayObjClassObj $chanwDisplayObjClassHeading $chanwDisplayObjClassWithH2 )
    #set( $chanwObjString = "" )
    #set( $chanwObjType = $chanwDisplayObjClassObj.Class.Name )
##
    #if( $chanwObjType == $JAVA_LANG_STRING_CLASS_NAME )    ## class name
        #set( $chanwObjString = $chanwDisplayObjClassObj )
    #elseif( $chanwObjType == $JAVA_LANG_CLASS_CLASS_NAME ) ## class obj
        #set( $chanwObjString = $chanwDisplayObjClassObj.Name )
    #else                                              ## obj of other types
        #set( $chanwObjString = $chanwDisplayObjClassObj.Class.Name )
    #end
##
    #set( $chanwSuffix = "" )
    #set( $chanwClassString = $chanwObjString )
##
    ## to deal with a class name like "java.util.HashMap,K,V"
    #if( $chanwObjString.indexOf( "," ) > -1 )
        #set( $chanwIndex = $chanwObjString.indexOf( "," ) )
        #set( $chanwClassString = $chanwObjString.substring( 0, $chanwIndex ) )
        #set( $chanwSuffix = $chanwObjString.substring( $chanwIndex ) )
        #set( $chanwSuffix = $chanwSuffix.substring( 1 ) ) ## remove comma
        #set( $chanwSuffix = "&lt;" + $chanwSuffix + "&gt;" )
    #end
##
    #if( $chanwDisplayObjClassWithH2 )$S_H2$chanwClassString$chanwSuffix$E_H2#end
##
    #chanwDisplaySuperClass( $chanwClassString $chanwDisplayObjClassHeading )
    #chanwDisplayFields( $chanwClassString $chanwDisplayObjClassHeading )
    #chanwDisplayConstructors( $chanwClassString $chanwDisplayObjClassHeading )
    #chanwDisplayMethods( $chanwClassString $chanwDisplayObjClassHeading )
    $HR
#end
#*doc
《/macro》
《documentation》
《code》#chanwDisplayConstructors( $obj $heading )《/code》
《p》Displays a list of constructors.《/p》
《/documentation》
《macro id=“chanwDisplayConstructors”》
doc*###
#macro( chanwDisplayConstructors $chanwDisplayConstructorsObj $chanwDisplayConstructorsHeading )
    #set( $chanwObjType = $chanwDisplayConstructorsObj.Class.Name )
##
    #if( $chanwObjType == $JAVA_LANG_STRING_CLASS_NAME )    ## class name
        #set( $chanwClassObj = $_PropertyTool.class.forName( $chanwDisplayConstructorsObj ) )
    #elseif( $chanwObjType == $JAVA_LANG_CLASS_CLASS_NAME ) ## class obj
        #set( $chanwClassObj = $chanwDisplayConstructorsObj )
    #else  ## obj of other types
        #set( $chanwClassObj = $chanwDisplayConstructorsObj.Class )
    #end
##
    #if( $chanwClassObj )
        #set( $chanwConstructors = $chanwClassObj.getConstructors() )
##
        #if( $chanwConstructors && $chanwConstructors.size() > 0 )
            <$chanwDisplayConstructorsHeading>Constructors</$chanwDisplayConstructorsHeading>
            $S_UL
            #foreach( $constructor in $chanwConstructors )
                $S_LI$_.class.forName( "java.lang.reflect.Modifier" ).getMethod( 
                    "toString", $_FieldTool.in( 
                    "java.lang.Integer" ).TYPE ).invoke( 
                    null, $constructor.getModifiers() ) $constructor.Name
##
                #set( $chanwParamTypes = $constructor.getGenericParameterTypes() )
                #set( $chanwParamTypesString = "( " )
##
                #if( $chanwParamTypes && $chanwParamTypes.size() > 0 )
                    #foreach( $chanwParamType in $chanwParamTypes )
                        #if( $chanwParamType.Name )
                            #set( $chanwParamTypesString = $chanwParamTypesString + 
                                $chanwParamType.Name )
                        #elseif( $chanwParamType.getTypeName() )
                            #set( $chanwParamTypesString = $chanwParamTypesString + 
                                $chanwParamType.getTypeName().replaceAll( "<", "&lt;" ) )
                        #end
                        #if( $foreach.count < $chanwParamTypes.size() )
                            #set( $chanwParamTypesString = $chanwParamTypesString + ", " )
                        #end
                    #end
                #end
##
                #set( $chanwParamTypesString = $chanwParamTypesString + " )" )
                #set( $chanwParamTypesString = $chanwParamTypesString.trim() )
                $chanwParamTypesString$E_LI
            #end
            $E_UL
        #else
            ## No constructors found.
        #end
    #else
        ## No constructors found.
    #end
#end
#*doc
《/macro》
《documentation》
《code》#chanwDisplayMethods( $obj $heading )《/code》
《p》Displays a list of methods.《/p》
《/documentation》
《macro id=“chanwDisplayMethods”》
doc*###
#macro( chanwDisplayMethods $chanwDisplayMethodsObj $chanwDisplayMethodsHeading )
    #set( $chanwObjType = $chanwDisplayMethodsObj.Class.Name )
##
    #if( $chanwObjType == $JAVA_LANG_STRING_CLASS_NAME )    ## class name
        #set( $chanwClassObj = $_PropertyTool.class.forName( $chanwDisplayMethodsObj ) )
    #elseif( $chanwObjType == $JAVA_LANG_CLASS_CLASS_NAME ) ## class obj
        #set( $chanwClassObj = $chanwDisplayMethodsObj )
    #else                                              ## obj of other types
        #set( $chanwClassObj = $chanwDisplayMethodsObj.Class )
    #end
##
    #if( $chanwClassObj )
        #set( $chanwMethods = $chanwClassObj.getDeclaredMethods() )
##
        #if( $chanwMethods && $chanwMethods.size() > 0 )
            <$chanwDisplayMethodsHeading>Methods</$chanwDisplayMethodsHeading>
            $S_UL
            #foreach( $method in $chanwMethods )
                $S_LI
                #set( $chanwModifier = $_.class.forName( "java.lang.reflect.Modifier" ).getMethod( 
                    "toString", $_FieldTool.in( 
                    "java.lang.Integer" ).TYPE ).invoke( 
                    null, $method.getModifiers() ) )
                    
                    #set( $chanwReturnType = 
                        $method.getGenericReturnType().getTypeName().replaceAll(
                            "<", "&lt;" ).trim() )
##
                    #set( $chanwParamTypes = $method.getGenericParameterTypes() )
                    #set( $chanwParamTypesString = $chanwModifier + " " + 
                         $chanwReturnType + " " + $method.Name.trim() + "( " )
##
                    #if( $chanwParamTypes && $chanwParamTypes.size() > 0 )
                        #foreach( $chanwParamType in $chanwParamTypes )
                            #if( $chanwParamType.Name )
                                #set( $chanwParamTypesString = $chanwParamTypesString + $chanwParamType.Name )
                            #elseif( $chanwParamType.getTypeName() )
                                #set( $chanwParamTypesString = $chanwParamTypesString + 
                                    $chanwParamType.getTypeName().replaceAll( "<", "&lt;" ) )
                            #end
                            
                            #if( $foreach.count < $chanwParamTypes.size() )
                                #set( $chanwParamTypesString = $chanwParamTypesString + ", " )
                            #end
                        #end
                    #end
##
                    #set( $chanwParamTypesString = $chanwParamTypesString + " )" )
                    #set( $chanwParamTypesString = " " + $chanwParamTypesString.trim() )
                    #set( $chanwParamTypesString = $chanwParamTypesString.replaceAll( " \(", "(" ) )
                     $chanwParamTypesString
                $E_LI
            #end
            $E_UL
        #else
            ## No methods.
        #end
    #end
#end
#*doc
《/macro》
《documentation》
《code》#chanwDisplayFields( $obj $heading )《/code》
《p》Displays a list of fields and values.《/p》
《/documentation》
《macro id=“chanwDisplayFields”》
doc*###
#macro( chanwDisplayFields $chanwDisplayFieldsObj $chanwDisplayFieldsHeading )
    #set( $chanwObjType = $chanwDisplayFieldsObj.Class.Name )
##
    #if( $chanwObjType == $JAVA_LANG_STRING_CLASS_NAME )    ## class name
        #set( $chanwClassObj = $_PropertyTool.class.forName( $chanwDisplayFieldsObj ) )
    #elseif( $chanwObjType == $JAVA_LANG_CLASS_CLASS_NAME ) ## class obj
        #set( $chanwClassObj = $chanwDisplayFieldsObj )
    #else                                              ## obj of other types
        #set( $chanwClassObj = $chanwDisplayFieldsObj.Class )
    #end
##
    #if( $chanwClassObj )
        #set( $chanwFields = $chanwClassObj.getFields() )
##
        #if( $chanwFields && $chanwFields.size() > 0 )
            <$chanwDisplayFieldsHeading>Fields</$chanwDisplayFieldsHeading>
            $S_UL
            #foreach( $field in $chanwFields )
                $S_LI$field.getName().replaceAll( '&', '&amp;' ):
                $_EscapeTool.xml( $field.get( null ) )$E_LI
            #end
            $E_UL
        #else
            ## No fields.
        #end
    #end
#end
#*doc
《/macro》
《documentation》
《code》#chanwDisplaySuperClass( $obj $heading )《/code》
《p》Displays the parent class name.《/p》
《/documentation》
《macro id=“chanwDisplaySuperClass”》
doc*###
#macro( chanwDisplaySuperClass $chanwDisplaySuperClassObj $chanwDisplaySuperClassHeading )
    #set( $chanwObjType = $chanwDisplaySuperClassObj.Class.Name )
##
    #if( $chanwObjType == $JAVA_LANG_STRING_CLASS_NAME )    ## class name
        #set( $chanwClassObj = $_PropertyTool.class.forName( $chanwDisplaySuperClassObj ) )
    #elseif( $chanwObjType == $JAVA_LANG_CLASS_CLASS_NAME ) ## class obj
        #set( $chanwClassObj = $chanwDisplaySuperClassObj )
    #else                                              ## obj of other types
        #set( $chanwClassObj = $chanwDisplaySuperClassObj.Class )
    #end
##
    #if( $chanwClassObj )
        #set( $chanwParent = $chanwClassObj.getGenericSuperclass() )
##
        #if( $chanwParent )
        <$chanwDisplaySuperClassHeading>Parent Class</$chanwDisplaySuperClassHeading>$S_P$chanwParent.toString().replaceAll( "<", "&lt;" )$E_P
        #end
    #end
#end
#*doc
《/macro》
《documentation id=“bottom”》
《/documentation》
《/code》
doc*###