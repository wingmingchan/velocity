#*
《code》
《copyright》
Authors: Wing Ming Chan, Peter Thomas
Copyright (c) 2017 Wing Ming Chan <chanw@upstate.edu>, Peter Thomas <thomaspe@upstate.edu>
MIT Licensed
Modification history:
1/4/2017 Added #chanwProcessDDBlockWithMacro.
《/copyright》
《documentation id=“top”》
《h2》Introduction《/h2》
《p》This format defines global macros used throughout the library.《/p》
《/documentation》
*#
#import( 'formats/library/velocity/chanw_global_values' )
#*
《global-variables》
*#
#set( $chanwGlobalMacrosGlobalVariables = [
    "chanwBlockName",
    "chanwBuildXMLContentRoot",
    "chanwCascadeType",
    "chanwChildName",
    "chanwChildNode",
    "chanwChildNodes",
    "chanwChildPath",
    "chanwConstructor",
    "chanwContentChildren",
    "chanwDynamicMetadata",
    "chanwCode",
    "chanCodeStmt",
    "chanwConvertToPascalCase",
    "chanwCountList",
    "chanwData",
    "chanwDelimiter",
    "chanwEndIndex",
    "chanwFirstChild",
    "chanwFolderAPI",
    "chanwFolderAPIChildren",
    "chanwGetCascadeObjectFromElement",
    "chanwGetFolderContainedAssetName",
    "chanwGetListRandomized",
    "chanwGetListReversed",
    "chanwGetMapKeyValueReversed",
    "chanwGetParamListAsStrings",
    "chanwGetParamListAsValues",
    "chanwGrandChildNodes",
    "chanwIndex",
    "chanwIsDisplay",
    "chanwIsInstanceOf",
    "chanwKey",
    "chanwKeySet",
    "chanwLastIndex",
    "chanwLastIndexOfSlash",
    "chanwListChildren",
    "chanwLocateAsset",
    "chanwLoop",
    "chanwMacro",
    "chanwMacroName",
    "chanwMacros",
    "chanwMapPairs",
    "chanwMax",
    "chanwNameNodesMap",
    "chanwNext",
    "chanwNodeSet",
    "chanwNodeValue",
    "chanwParams",
    "chanwParamsChildren",
    "chanwParamsNodes",
    "chanwPath",
    "chanwPaths",
    "chanwPathSegments",
    "chanwRedirect",
    "chanwScripts",
    "chanwSetVarValStatement",
    "chanwSize",
    "chanwStmt",
    "chanwStringReader",
    "chanwSuperclasses",
    "chanwTemp",
    "chanwType",
    "chanwValue",
    "thomaspeGetFeedPhoto",
    "thomaspeGetSrcSetCode",
    "thomaspeImageOptionsFound",
    "thomaspeNewImagePath"
] )
#*
《/global-variables》
《documentation》
《code》#chanwBuildXMLContentRoot( $xml_string )《/code》
《p》Creates an 《code》org.jdom.Element《/code》 object out of an XML string.
The variable 《code》$xml_string《/code》 should contain a valid XML string
with a root element. The resulting 《code》org.jdom.Element《/code》 object is
stored in the global variable
《code》$chanwBuildXMLContentRoot《/code》. Example:《/p》
《pre》
#chanwBuildXMLContentRoot( $xml )
#set( $contentRoot = $chanwBuildXMLContentRoot )
《/pre》
《/documentation》
《macro id=“chanwBuildXMLContentRoot”》
*#
#macro( chanwBuildXMLContentRoot $xmlString )
    #if( !$xmlString || $xmlString.Class.Name != $JAVA_LANG_STRING_CLASS_NAME || 
        $xmlString == "" )
    An XML string is required.
    #stop
    #end
    
    ## create the string reader object
    #chanwGetConstructorByClassNameParamSize( 'java.io.StringReader' 1 )
    #set( $chanwConstructor  = $chanwGetConstructorByClassNameParamSize )
    #set( $chanwStringReader = $chanwConstructor.newInstance( $xmlString ) )
    #set( $chanwBuildXMLContentRoot = "" )
    ## read the XML string, pass it into the sax builder, create XML tree, and
    ## return the object
    #set( $chanwBuildXMLContentRoot = 
        $globalSAXBuilder.build( $chanwStringReader ).RootElement )
#end
#*
《/macro》
《documentation》
《code》#chanwCallJavaMethod( $javaObjName $methodName )《/code》
《p》Calls the named method through the Java object. The second string can be
any string containing acceptable Java code. Examples:《/p》
《pre》
#chanwCallJavaMethod( '_DateTool' 'getCalendar()' )

#set( $list = [] )
#set( $void = $list.add( “let's have “ ) )
#chanwCallJavaMethod( 'list' 'add(“fun“)' )
《/pre》
《/documentation》
《macro id=“chanwCallJavaMethod”》
*#
#macro( chanwCallJavaMethod $javaObjName $methodName )
    #set( $chanwStmt = '#set( $chanwCallJavaMethod=' + '$' + $javaObjName + '.'
        + $methodName + ')' )
    #evaluate( $chanwStmt )
#end
#*
《/macro》
《documentation》
《code》#chanwCheckString( $str $msg )《/code》
《p》Checks the variable 《code》$str《/code》 to ensure that it is a non-empty
string, else outputs the message and terminates the execution. Example:《/p》
《pre》
#chanwCheckString( $input $message )
《/pre》
《/documentation》
《macro id=“chanwCheckString”》
*#
#macro( chanwCheckString $str $msg )
    #if( $str.Class.Name != $JAVA_LANG_STRING_CLASS_NAME ||
         $str == "" )
        $msg
        #stop
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwConvertToPascalCase( $chanwMacroName $chanwDelimiter )《/code》
《p》Converts a string, possibly with delimiters, into Pascal case. The
《code》$chanwDelimiter《/code》 variable is treated as a marker
of word boundaries. The result is stored in the variable
《code》$chanwConvertToPascalCase《/code》. Example:《/p》
《pre》
#chanwConvertToPascalCase( “xml-group“ “-“ )
$chanwConvertToPascalCase
## converting xml-group to XmlGroup
《/pre》
《/documentation》
《macro id=“chanwConvertToPascalCase”》
*#
#macro( chanwConvertToPascalCase $chanwMacroName $chanwDelimiter )
    #if( $chanwMacroName.class.name != $JAVA_LANG_STRING_CLASS_NAME ||
        $chanwMacroName.length() == 0 )
        Not a String$BR 
        #stop
    #end
    
    #if( !$chanwDelimiter ||
        $chanwDelimiter.class.name != $JAVA_LANG_STRING_CLASS_NAME )
        #set( $chanwDelimiter = '' ) ## default to empty string
    #end
    
    #set( $chanwConvertToPascalCase = "" )
    
    ## there is a delimiter passed in
    #if( $chanwDelimiter.length() > 0 )
        ## the delimiter does not exist in the string
        #if( $chanwMacroName.indexOf( $chanwDelimiter ) < 0 )
            #set( $chanwConvertToPascalCase = $globalApacheWordUtils.capitalize(
                $chanwMacroName ) )
        ## there are instances of the delimiter
        #else
            ## replace delimiters with spaces
            #set( $chanwMacroName = $chanwMacroName.replaceAll( 
                $chanwDelimiter, ' ' ) )
            ## capitalize words
            #set( $chanwMacroName = $globalApacheWordUtils.capitalize(
                $chanwMacroName ) )
            ## remove spaces
            #set( $chanwConvertToPascalCase = $chanwMacroName.replaceAll(
                ' ', '' ) ) 
        #end
    ## no delimiter passed in
    #else
        #set( $chanwConvertToPascalCase = 
            $globalApacheWordUtils.capitalize( $chanwMacroName ) )
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwGetCascadeObjectFromElement( $element )《/code》
《p》Creates a Cascade API object out of an 《code》org.jdom.Element《/code》
object. The resulting object is stored in
《code》$chanwGetCascadeObjectFromElement《/code》. Note that since a reference
only contains the path of the referenced asset, not its own path, this macro
does not work for references. Example:《/p》
《pre》
#set( $page = $_XPathTool.selectSingleNode(
    $contentRoot, "system-folder[6]/system-page" ) )
$page.getChild( "name" ).Value
#chanwGetCascadeObjectFromElement( $page )
$chanwGetCascadeObjectFromElement.Class.Name
-$chanwGetCascadeObjectFromElement-

#set( $folder = $contentRoot.getChild( "system-folder" ) )
#chanwGetCascadeObjectFromElement( $folder )
$chanwGetCascadeObjectFromElement.Name
$chanwGetCascadeObjectFromElement.Class.Name
《/pre》
《/documentation》
《macro id=“chanwGetCascadeObjectFromElement”》
*#
#macro( chanwGetCascadeObjectFromElement $element )
    #if( $element.Class.Name != $ORG_JDOM_ELEMENT_CLASS_NAME )
        Not a jdom.Element.
        #stop
    #end

    ## get the Cascade API type name
    #set( $chanwCascadeType = $CASCADE_TYPE_ELEMENT_MAP.get( $element.Name ) )
    #set( $chanwGetCascadeObjectFromElement = "" )
    
    ## locate the asset
    #set( $chanwGetCascadeObjectFromElement = 
        $_.locate(
            $element.getChild( "path" ).Value.substring( 1 ),
            $chanwCascadeType,
            $element.getChild( "site" ).Value
        ) 
    )
#end
#*
《/macro》
《documentation》
《code》#chanwGetDatabaseList( $listName )《/code》
《p》Creates a list containing single values drawn from the database. The value
of 《code》$listName《/code》 will be turned into a name of a global variable.
The associated SQL statement selects a single value from a table. This macro
is used by upstate_database. Example from upstate_database:《/p》
《pre》
#import( 'site://_common_assets/formats/library/velocity/chanw_object_creator' )
#chanwGetObjectByClassName( 'edu.upstate.chanw.db.CascadeDB' )

#set( $db           = $chanwGetObjectByClassName )
#set( $maxNumber    = 500000 )
#set( $list_sql_map = { “upstateSiteName“:“select name from cxml_site“, 
                        “upstateUserName“:“select username from cxml_user“
                      } )

#foreach( $chanwKey in $list_sql_map.keySet() )
    #set( $sql = $list_sql_map[ $chanwKey ] )
    #chanwGetDatabaseList( $chanwKey )
#end
《/pre》
《/documentation》
《macro id=“chanwGetDatabaseList”》
*#
#macro( chanwGetDatabaseList $listName )
    #set( $chanwData = $db.getResultSet( $sql ) )
    #set( $chanwStmt = '#set($' + $listName + '=[])' )
    #evaluate( $chanwStmt )

    #if( $chanwData.next() )
        ## the first record
        #set( $void = $chanwData.first() )
        #set( $chanwStmt = '#set($void=$' + $listName +
            '.add($chanwData.getString( 1 ) ) )' )
        #evaluate( $chanwStmt )
    
        ## loop through all other records
        #foreach( $num in [ 1..$maxNumber ] )
            #if( $chanwData.next() )
                #set( $chanwStmt = '#set($void=$' + $listName +
                    '.add( $chanwData.getString( 1 ) ) )' )
                #evaluate( $chanwStmt )
            #else
                #break
            #end
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwGetFilePath( $file $site $default )《/code》
《p》Gets the valid file path or the default path. Invoke this macro in double
quotes in a set directive because the macro only outputs a string.
Created by Peter. Example:《/p》
《pre》
#set( $myFile = “#chanwGetFilePath(
    'images/computer-people-700x350.jpg' 'thomas-test' 'images/default.jpg' )“ )
《/pre》
《/documentation》
《macro id=“chanwGetFilePath”》
*#
#macro( chanwGetFilePath $file $site $default )
    #if( $_PropertyTool.isNull( $_.locateFile( $file, $site ) ) )
        $default
    #else
        $file
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwGetFolderContainedAssetName( $asset )《/code》
《p》Returns the name of the asset. The 《code》$asset《/code》 passed in should
be a Cascade API Adapter object. The name is stored in
《code》$chanwGetFolderContainedAssetName《/code》. Example:《/p》
《pre》
#chanwGetFolderContainedAssetName( $chanwGetCascadeObjectFromElement )
$chanwGetFolderContainedAssetName
《/pre》
《/documentation》
《macro id=“chanwGetFolderContainedAssetName”》
*#
#macro( chanwGetFolderContainedAssetName $asset )
    #if( !$asset )
    No asset passed in.
    #stop
    #end
    
    ## check input
    #chanwIsInstanceOf( $asset
        "com.hannonhill.cascade.api.adapters.FolderContainedAssetAPIAdapter" )
        
    #if( !$chanwIsInstanceOf )
    $asset is not a folder contained asset object.
    #stop
    #end
    
    #set( $chanwGetFolderContainedAssetName = "" )
    #set( $chanwPathSegments = $asset.Identifier.Path.PathSegments )
    #set( $chanwLastIndex = $chanwPathSegments.size() - 1 )
    #set( $chanwGetFolderContainedAssetName = $chanwPathSegments.get( $chanwLastIndex ) )
#end 
#*
《/macro》
《documentation》
《code》#chanwGetListReversed( $chanwList )《/code》
《p》Returns a new list, containing all items of the original list but in
reversed order. The new list is stored in 《code》$chanwGetListReversed《/code》.
Example:《/p》
《pre》
#chanwGetListReversed( $states )
$chanwGetListReversed
《/pre》
《/documentation》
《macro id=“chanwGetListReversed”》
*#
#macro( chanwGetListReversed $chanwList )
    #set( $chanwGetListReversed = [] )
    
    ## does not do anything if no list passed in
    #if( $chanwList.Class.Name == 
        $JAVA_UTIL_ARRAY_LIST_CLASS_NAME && $chanwList.size() > 0 )
        #set( $chanwEndIndex = $chanwList.size() - 1 )
        
        #foreach( $num in [ $chanwEndIndex..0 ] )
            #set( $void = $chanwGetListReversed.add( $chanwList.get( $num ) ) )
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwGetListRandomized( $chanwList )《/code》
《p》Returns a new list, containing all items of the original list but in random
order. The new list is stored in 《code》$chanwGetListRandomized《/code》.
Example:《/p》
《pre》
#chanwGetListRandomized( $states )
$chanwGetListRandomized
《/pre》
《/documentation》
《macro id=“chanwGetListRandomized”》
*#
#macro( chanwGetListRandomized $chanwList )
    #set( $chanwGetListRandomized = $chanwList )
    
    ## does not do anything if no list passed in
    #if( $chanwList.Class.Name == 
        $JAVA_UTIL_ARRAY_LIST_CLASS_NAME && $chanwList.size() > 0 )
        #set( $chanwMax       = $chanwGetListRandomized.size() - 1 )
        #set( $chanwCountList = [ $chanwMax..0 ] )

        ## Fisher–Yates shuffle
        #foreach( $num in $chanwCountList )
            #set( $chanwNext  = $num + 1 )
            #set( $chanwIndex = $chanwGlobalRandom.nextInt( $chanwNext ) )
            #set( $chanwTemp  = $chanwGetListRandomized[ $chanwIndex ] )
            #set( $chanwGetListRandomized[ $chanwIndex ] =
                $chanwGetListRandomized[ $num ] )
            #set( $chanwGetListRandomized[ $num ] = $chanwTemp )
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwGetMapKeyValueReversed( $chanwMap )《/code》
《p》Returns a new map with keys of the original map as values, and values of
the original map as keys. This macro assumes that the values are unique.
The new map is stored in 《code》$chanwGetMapKeyValueReversed《/code》.
Example:《/p》
《pre》
#chanwGetMapKeyValueReversed( $stateMap )
$chanwGetMapKeyValueReversed
《/pre》
《/documentation》
《macro id=“chanwGetMapKeyValueReversed”》
*#
#macro( chanwGetMapKeyValueReversed $chanwMap )
    #set( $chanwGetMapKeyValueReversed = {} )
    
    ## does not do anything if no map passed in
    #if( ( $chanwMap.Class.Name == $JAVA_UTIL_LINKEDHASHMAP_CLASS_NAME ||
        $chanwMap.Class.Name == $JAVA_UTIL_HASHMAP_CLASS_NAME )
        && $chanwMap.size() > 0 )
        #set( $chanwKeySet = $chanwMap.keySet() )
        #foreach( $chanwKey in $chanwKeySet )
            #set( $void = $chanwGetMapKeyValueReversed.put(
                $chanwMap.get( $chanwKey ), $chanwKey ) )
        #end
    #end
#end    
#*
《/macro》
《documentation》
《code》#chanwGetNodeValues( $node $map )《/code》
《p》Dynamically creates variables assigned with values. This macro invokes
《code》#chanwSetVariable《/code》.《/p》
《/documentation》
《macro id=“chanwGetNodeValues”》
*#
#macro( chanwGetNodeValues $node $map )
    #foreach( $var in $map.keySet() )
        #set( $chanwChildNodes = $_XPathTool.selectNodes( $node, $map[ $var ] ) )
    
        ## the element exists
        #if( $chanwChildNodes.size() > 0 )
            ## two possible cases: element containing elements, or text node
            #set( $chanwChildNode = $chanwChildNodes[ 0 ] )
            #set( $chanwGrandChildNodes = $chanwChildNode.Children )
            
            #if( $chanwGrandChildNodes.size() > 0 )
                #set( $chanwNodeValue = $chanwChildNodes )        ## a list
            #else
                #set( $chanwNodeValue = $chanwChildNode.Value )   ## a string
            #end
        #else
            #set( $chanwNodeValue = "" )
        #end
        #chanwSetVariable( $var $chanwNodeValue )
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwGetNodeSets( $node $map )《/code》
《p》Dynamically creates variables assigned with node sets.《/p》
《/documentation》
《macro id=“chanwGetNodeSets”》
*#
#macro( chanwGetNodeSets $node $map )
    #set( $chanwNameNodesMap = {} )
    
    #foreach( $var in $map.keySet() )
        #set( $chanwNodeSet = $_XPathTool.selectNodes( $node, $map[ $var ] ) )
        
        #if( $_PropertyTool.isNull( $chanwNodeSet ) )
            #set( $chanwNodeSet = "" )
        #end
        
        #set( $void = $chanwNameNodesMap.put( $map[ $var ], $chanwNodeSet ) )
        #set( $chanwSetVarValStatement = '#' + "set(" + $_EscapeTool.D +
            "$var = " + $_EscapeTool.D + "chanwNameNodesMap[" + $_EscapeTool.D +
            "map["+ "'$var']])" )
        #evaluate( $chanwSetVarValStatement )
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwGetParamListAsStrings( $list )《/code》
《p》Converts a list of items into a CSV string, containing all items in the
list, each as a string value in quotes and separated by commas. The result
string is stored in 《code》$chanwGetParamListAsStrings《/code》. Example:《/p》
《pre》
#set( $strings = [ "one", "two", "three" ] )
#chanwGetParamListAsStrings( $strings )
$chanwGetParamListAsStrings ## output "one","two","three"
《/pre》
《/documentation》
《macro id=“chanwGetParamListAsStrings”》
*#
#macro( chanwGetParamListAsStrings $list )
    #if( $list.Class.Name != $JAVA_UTIL_ARRAY_LIST_CLASS_NAME )
        Not a list.
        #stop
    #end
    
    #set( $chanwGetParamListAsStrings = '' )
    
    #if( $list.size() > 0 )
        #foreach( $item in $list )
            #set( $chanwGetParamListAsStrings =
                $chanwGetParamListAsStrings + '"' + $item + '"' )
                
            #if( $foreach.count < $list.size() )
                #set( $chanwGetParamListAsStrings =
                    $chanwGetParamListAsStrings + ',' )
            #end
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwGetParamListAsValues( $list )《/code》
《p》Converts a list of items into a string, containing all items in the list,
each as a value separated by commas. The result string is stored in
《code》$chanwGetParamListAsValues《/code》. Example:《/p》
《pre》
#set( $ints = [ 1, 2, 3, 4 ] )
#chanwGetParamListAsValues( $ints )
$chanwGetParamListAsValues ## output 1,2,3,4 as a string
《/pre》
《/documentation》
《macro id=“chanwGetParamListAsValues”》
*#
#macro( chanwGetParamListAsValues $list )
    #if( $list.Class.Name != $JAVA_UTIL_ARRAY_LIST_CLASS_NAME )
        Not a list.
        #stop
    #end
    
    #set( $chanwGetParamListAsValues = '' )
    
    #if( $list.size() > 0 )
        #foreach( $item in $list )
            #set( $chanwGetParamListAsValues =
                $chanwGetParamListAsValues + $item )
            
            #if( $foreach.count < $list.size() )
                #set( $chanwGetParamListAsValues =
                    $chanwGetParamListAsValues + ',' )
            #end
        #end
    #end
#end
#*   
《/macro》
《documentation》
《code》#chanwInvokeMacro( $chanwMacroName $chanwMacroParams )《/code》
《p》Invokes a macro with the name and parameters passed in. The parameters
should be in a list. Example:《/p》
《pre》
#set( $file    = 'images/computer-people-700x350.jpg' )
#set( $site    = 'thomas-test' )
#set( $default = 'images/default.jpg' )
#set( $myFile  =
    “#chanwInvokeMacro('chanwGetFilePath' ['file', 'site', 'default'] )“ )
《/pre》
《/documentation》
《macro id=“chanwInvokeMacro”》
*#
#macro( chanwInvokeMacro $chanwMacroName $chanwMacroParams )
    #if( $chanwMacroName.class.name == $JAVA_LANG_STRING_CLASS_NAME )
        #set( $chanwStmt = "#$chanwMacroName(" )
    
        #if( $chanwMacroParams.class.name == $JAVA_UTIL_ARRAY_LIST_CLASS_NAME )
            #if( $chanwMacroParams.size() > 0 )
                #foreach( $chanwMacroParam in $chanwMacroParams )
                    #if( $chanwMacroParam.class.name ==
                        $JAVA_LANG_STRING_CLASS_NAME )
                        #set( $chanwStmt =
                            $chanwStmt + "$" + $chanwMacroParam + " " )
                    #end
                #end
            #end
        #end
    
        #set( $chanwStmt = $chanwStmt.trim() )
        #set( $chanwStmt = $chanwStmt + ")" )
        #evaluate( $chanwStmt )
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwIsInstanceOf( $chanwObj $chanwClassName )《/code》
《p》Returns a boolean string, indicating whether the object is an instance of
the suppled class name. The result is stored in
《code》$chanwIsInstanceOf《/code》. Example:《/p》
《pre》
#chanwIsInstanceOf( $list “java.util.concurrent.BlockingDeque“ )
$chanwIsInstanceOf$BR   ## output false
《/pre》
《/documentation》
《macro id=“chanwIsInstanceOf”》
*#
#macro( chanwIsInstanceOf $chanwObj $chanwClassName )
    #if( $_PropertyTool.isNull( $chanwObj ) )
        The object cannot be null.
        #stop
    #end
    
    #if( !$chanwClassName || 
        $chanwClassName.Class.Name != $JAVA_LANG_STRING_CLASS_NAME )
        A valid class name is required.
        #stop
    #end
    
    #set( $chanwIsInstanceOf = "" )
    
    ## matching the class name passed in
    #if( $chanwClassName.equals( $chanwObj.Class.Name ) )
        #set( $chanwIsInstanceOf = true )
    #else
        #set( $chanwInterfaces   = 
            $globalApacheClassUtils.getAllInterfaces( $chanwObj.Class ) )
        #set( $chanwSuperclasses = 
            $globalApacheClassUtils.getAllSuperclasses( $chanwObj.Class ) )
        
        ## check interfaces
        #foreach( $interface in $chanwInterfaces )
            #if( $chanwClassName.equals( $interface.Name ) )
                #set( $chanwIsInstanceOf = true )
                #break
            #end
        #end
        
        ## check superclasses
        #if( $chanwIsInstanceOf == "" )
            #foreach( $superclass in $chanwSuperclasses )
                #if( $chanwClassName.equals( $superclass.Name ) )
                    #set( $chanwIsInstanceOf = true )
                    #break
                #end
            #end            
        #end
        
        ## still no match
        #if( $chanwIsInstanceOf == "" )
            #set( $chanwIsInstanceOf = false )
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwLocateAsset( $folderPath $siteName $assetName )《/code》
《p》Locates the named assets. The asset located is stored in
《code》$chanwLocateAsset《/code》. Example:《/p》
《pre》
#chanwLocateAsset( "formats/library/velocity" "_common_assets"
    "chanw_display_velocity_code" )
#set( $code = $chanwLocateAsset.Script )
《/pre》
《/documentation》
《macro id=“chanwLocateAsset”》
*#
#macro ( chanwLocateAsset $folderPath $siteName $assetName )
    #if( !$folderPath || !$siteName || !$assetName )
    Three non-empty strings are required: folder path, site name, and asset name.
    #stop
    #end
    
    #if( $folderPath.Class.Name != $JAVA_LANG_STRING_CLASS_NAME ||
        $folderPath == "" || $siteName.Class.Name != $JAVA_LANG_STRING_CLASS_NAME ||
        $siteName == "" || $assetName.Class.Name != $JAVA_LANG_STRING_CLASS_NAME ||
        $assetName == "" )
    Three non-empty strings are required: folder path, site name, and asset name.
    #stop
    #end

    #set( $chanwFolderAPI   = $_.locateFolder( $folderPath, $siteName ) )
    
    #if( !$chanwFolderAPI )
    Cannot locate the folder.
    #stop
    #end
    
    #set( $chanwFolderAPIChildren = $chanwFolderAPI.getChildren() )
    
    #if( !$chanwFolderAPIChildren )
    The folder has no children.
    #stop
    #end
    
    #set( $chanwLocateAsset = "" )
    
    ## check every child and match the name
    #if( $chanwFolderAPIChildren.size() > 0 )
        #foreach( $chanwFolderAPIChild as $chanwFolderAPIChildren )
            #chanwGetFolderContainedAssetName( $chanwFolderAPIChild )
            #if( $chanwGetFolderContainedAssetName == $assetName )
                #set( $chanwLocateAsset = $chanwFolderAPIChild )
                #break
            #end
        #end
        
        ## not found
        #if( $chanwLocateAsset == "" )
        Cannot locate the asset.$BR
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwProcessBlockChooser( $content )《/code》
《p》Processes a block chooser or a region. When it is a region, what is passed
in is a Document object. Otherwise, it is an Element whose name is content.
Why parent of the root element is passed in: a text block may not have a root
element.《/p》
《/documentation》
《macro id=“chanwProcessBlockChooser”》
*#
#macro( chanwProcessBlockChooser $content )
    ## switch between Docuement and Element
    #if( $content.class.name == $ORG_JDOM_DOCUMENT_CLASS_NAME )
        #set( $chanwContentChildren = $content.getContent() )
    #else
        #set( $chanwContentChildren = $content.getChildren() )
    #end
    
    ## plain text or code
    #if( $chanwContentChildren.size() == 0 )
        $_SerializerTool.serialize( $content, true )
    ## at least one child
    #elseif( $chanwContentChildren.size() > 0 )
        ## create a global variable storing the first child
        ## normally the root element
        #set( $chanwFirstChild = $chanwContentChildren.get( 0 ) )
        #set( $chanwChildName  = $chanwFirstChild.name )
        #set( $chanwChildPath  = $content.getParent().getChild( 'path' ).value )
        #set( $chanwBlockName  = $chanwChildPath )
        
        ## there is at least one slash in the path
        #set( $chanwLastIndexOfSlash = $chanwBlockName.lastIndexOf( '/' ) + 1 )
        
        ## get the name of the block
        #if( $chanwLastIndexOfSlash > -1 )
            #set( $chanwBlockName = $chanwBlockName.substring(
                $chanwLastIndexOfSlash ) )
        #end
        
        #if( $chanwBlockName.endsWith( 'dd-macro' ) )
            #chanwInvokeMacro( "chanwProcessDDBlockWithMacro" [ "chanwFirstChild" ] )
        ## macro blocks
        #elseif( $chanwBlockName.endsWith( 'Macro' ) ||
            $chanwBlockName.endsWith( 'macro' ) )
            #chanwInvokeMacro( "chanwProcessBlockWithMacro" [ "chanwFirstChild" ] )
        ## text blocks
        #elseif( $chanwBlockName.endsWith( 'Text' ) ||
            $chanwBlockName.endsWith( 'text' ) ) 
            $_SerializerTool.serialize( $content, true )
        ## script blocks
        #elseif( $chanwBlockName.endsWith( 'Script' ) ||
            $chanwBlockName.endsWith( 'script' )  )
            #chanwInvokeMacro( "chanwProcessScript" [ "chanwFirstChild" ] )
        ## data definition blocks
        #elseif( $chanwChildName == $cascadeXML_ELEMENT_SYSTEM_DATA_STRUCTURE )
            #chanwProcessDataDefinitionBlock( $chanwFirstChild )
        ## index block
        #elseif( $chanwChildName == $cascadeXML_ELEMENT_SYSTEM_INDEX_BLOCK )
            #chanwProcessIndexBlock( $chanwBlockName $chanwFirstChild )
        ## others, preferably having -xml, -feed suffixes
        #else
            #chanwConvertToPascalCase( $chanwBlockName "-" )
            #set( $chanwMacroName = $MACRO_PREFIX + $chanwConvertToPascalCase )
            #chanwInvokeMacro( $chanwMacroName [ "chanwFirstChild" ] )
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwProcessBlockWithMacro( $chanwFirstChild )《/code》
《p》Processes a block containing a macro name in a dynamic field. This macro is
used by 《code》#chanwProcessBlockChooser《/code》. Note that when a block is
attached to a region, metadata of the block cannot be recovered. Therefore,
this macro only works for blocks attached to block choosers, not blocks attached
to regions.《/p》
《/documentation》
《macro id=“chanwProcessBlockWithMacro”》
*#
#macro( chanwProcessBlockWithMacro $chanwFirstChild )
    #set( $chanwMacroName = "" )
    #set( $chanwDynamicMetadata = "" )
    #set( $chanwDynamicMetadata = $_XPathTool.selectSingleNode(
        $chanwFirstChild.Parent.Parent, "dynamic-metadata[name='macro']" ) )
    
    #if( $chanwDynamicMetadata != "" )
        #set( $chanwMacroName = $chanwDynamicMetadata.getChild( 'value' ).Value )
    #end
    
    #if( $chanwMacroName == "" )
        #set( $chanwMacroName = "processUnknown" )
    #end
    
    #chanwInvokeMacro( $chanwMacroName [ "chanwFirstChild" ] )
#end
#*
《/macro》
《documentation》
《code》#chanwProcessDataDefinitionBlock( $systemDataStructure )《/code》
《p》Processes a data definition block with type information. The type is turned
into a macro name. This macro is used by 《code》#chanwProcessBlockChooser《/code》.《/p》
《/documentation》
《macro id=“chanwProcessDataDefinitionBlock”》
*#
#macro( chanwProcessDataDefinitionBlock $systemDataStructure )
    #set( $chanwIsDisplay = $systemDataStructure.getChild( 'display' ).Value )
    
    #if( $chanwIsDisplay.toLowerCase() == 'yes' )
        #set( $chanwType = $systemDataStructure.getChild( 'block-type' ).Value )
        
        #if( $chanwType )
            #chanwConvertToPascalCase( $chanwType "-" )
            #set( $chanwMacroName = $MACRO_PREFIX + $chanwConvertToPascalCase )
            #chanwInvokeMacro( $chanwMacroName [ "systemDataStructure" ] )
        #else
            No type information available in the data definition block.$BR
        #end
    #else
        Cannot process the data definition block.$BR
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwProcessDDBlockWithMacro( $systemDataStructure )《/code》
《p》Processes a data definition block with macro name. The macro name should
be contained in a field named 《code》macro《/code》, which should be a root
field. This macro is used by 《code》#chanwProcessBlockChooser《/code》.《/p》
《/documentation》
《macro id=“chanwProcessDDBlockWithMacro”》
*#
#macro( chanwProcessDDBlockWithMacro $systemDataStructure )
    #set( $chanwMacroName = "processUnknown" )
    #set( $chanwMacroName = $systemDataStructure.getChild( 'macro' ).Value )
    #chanwInvokeMacro( $chanwMacroName [ "systemDataStructure" ] )
#end
#*
《/macro》
《documentation》
《code》#chanwProcessIndexBlock( $chanwBlockName $chanwFirstChild )《/code》
《p》Processes an index block. The name of the block is turned into a macro name.
This macro is used by 《code》#chanwProcessBlockChooser《/code》.《/p》
《/documentation》
《macro id=“chanwProcessIndexBlock”》
*#
#macro( chanwProcessIndexBlock $chanwBlockName $chanwFirstChild )
    #chanwConvertToPascalCase( $chanwBlockName "-" )
    #set( $chanwMacroName = $MACRO_PREFIX + $chanwConvertToPascalCase )
    #chanwInvokeMacro( $chanwMacroName [ "chanwFirstChild" ] )
#end
#*
《/macro》
《documentation》
《code》#chanwProcessParams( $chanwStmt $params )《/code》
《p》Creates the param lists as a string and attaches it to the statement passed
in. Note that the global variable 《code》$chanwStmt《/code》 is passed in.
This macro is used by 《code》#chanwProcessScript《/code》.《/p》
《/documentation》
《macro id=“chanwProcessParams”》
*#
#macro( chanwProcessParams $chanwStmt $params )
    #set( $chanwParamsChildren = $params.getChildren() )
                
    #if( $chanwParamsChildren.size() > 0 )
        #set( $chanwStmt = $chanwStmt + "(" )

        #foreach( $child in $chanwParamsChildren )
            #if( $child.Name == "param" )
                #if( $child.Value.trim() != "" )
                    #set( $chanwStmt = $chanwStmt + "'" +
                        $child.Value.trim() + "' " )
                #end
            #elseif( $child.Name == "variable" )
                #if( $child.Value.trim() != "" )
                    #set( $chanwStmt = $chanwStmt + "$" +
                        $child.Value.trim() + " " )
                #end
            #elseif( $child.Name == "list" )
                #set( $chanwListChildren = $child.getChildren() )
        
                #if( $chanwListChildren.size() > 0 )
                    #set( $chanwStmt = $chanwStmt + "[" )

                    #foreach( $list_child in $chanwListChildren )
                        #if( $list_child.Name == "param" )
                            #if( $list_child.Value.trim() != "" )
                                #set( $chanwStmt = $chanwStmt + "'" +
                                    $list_child.Value.trim() + "', " )
                            #end
                        #elseif( $list_child.Name == "variable" )
                            #if( $list_child.Value.trim() != "" )
                                #set( $chanwStmt = $chanwStmt + "$" +
                                    $list_child.Value.trim() + ", " )
                            #end
                        #end
                    #end
            
                    ## remove last comma
                    #set( $chanwStmt = $chanwStmt.trim() )
                
                    #if( $chanwStmt.endsWith( "," ) )
                        #set( $chanwEndIndex = $chanwStmt.length() - 1 )
                        #set( $chanwStmt = $chanwStmt.substring(
                            0, $chanwEndIndex ) )
                    #end
                    
                    #set( $chanwStmt = " " + $chanwStmt + "]" )
                #end
            #elseif( $child.Name == "map" )
                #set( $chanwMapPairs = $child.getChildren() )
        
                #if( $chanwMapPairs.size() > 0 )
                    #set( $chanwStmt = $chanwStmt + "{" )
            
                    #foreach( $map_pair in $chanwMapPairs )
                        #set( $chanwKey = $map_pair.getChild( "key" ) )
                        #set( $chanwValue = $map_pair.getChild( "value" ) )
                
                        #if( $chanwKey )
                            #set( $chanwKey = $chanwKey.Value.trim() )
                        #end
                    
                        #if( $chanwValue )
                            #set( $chanwValue = $chanwValue.Value.trim() )
                        #end
                
                        #if( $chanwKey != "" && $chanwValue != "" )
                            #set( $chanwStmt = $chanwStmt +
                                "'$chanwKey':'$chanwValue'," )
                        #end
                    #end
                    ## remove last comma
                    #set( $chanwStmt = $chanwStmt.trim() )
                
                    #if( $chanwStmt.endsWith( "," ) )
                        #set( $chanwEndIndex = $chanwStmt.length() - 1 )
                        #set( $chanwStmt = $chanwStmt.substring(
                            0, $chanwEndIndex ) )
                    #end
                    
                    #set( $chanwStmt = " " + $chanwStmt + "}" )
                #end
            #end
        #end

        #set( $chanwStmt = $chanwStmt + ")" )
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwProcessScript( $chanwFirstChild )《/code》
《p》Processes a script block. A script block is an XML block whose name must
have a '-script' suffix. The 《code》$chanwFirstChild《/code》 is the
《code》scripts《/code》 element. The 《code》scripts《/code》 should contain
a single 《code》code《/code》 element, which can contain any Velocity code.
Code inside cannot contain 《code》<《/code》, 《code》>《/code》 and
《code》&&《/code》. Use 《code》&lt;《/code》, 《code》&gt;《/code》 and
《code》-aa-《/code》 instead. Example:《/p》
《pre》
<scripts>
    <code>
#import( "site://_common_assets/formats/library/velocity/chanw_display_velocity_code" )
#chanwGetMacroCode( "chanw_object_creator" "formats/library/velocity" "_common_assets" "chanwGetObjectByClassName" )
#chanwDisplayHideVelocityCode( $chanwGetMacroCode "hide-code1" "true" "false" )
    </code>
</scripts>
《/pre》
《/documentation》
《macro id=“chanwProcessScript”》
*#
#macro( chanwProcessScript $chanwFirstChild )
    ## allow only one code element, and process it first
    #set( $chanwCode = $chanwFirstChild.getChild( 'code' ) )
    
    #if( $chanwCode )
        #set( $chanCodeStmt = $chanwCode.Value.replaceAll( 
            '&lt;', '<' ).replaceAll(
            '&gt;', '>' ).replaceAll(
        	'-aa-', '&&' ) )
    	#evaluate( $chanCodeStmt )
    #end

    ## get the scripts to be executed
    #set( $chanwScripts = $chanwFirstChild.getChildren( 'script' ) )
    
    ## loop through each script
    #if( $chanwScripts.size() > 0 )
        #foreach( $script in $chanwScripts )
            ## first, check for redirect
            #set( $chanwRedirect = "" )
            #set( $chanwRedirect = $_XPathTool.selectSingleNode( $script, "redirect" ) )

            ## second, import the script
            #set( $chanwPaths = "" )
            #set( $chanwPaths = $script.getChildren( "path" ) )
            
            #if( $chanwPaths.size() > 0 )
                #foreach( $chanwPath in $chanwPaths )
                    #set( $chanwPath = $chanwPath.Value.trim() )
            
                    ## make the path optional
                    #if( $chanwPath != "" )
                        #set( $chanwStmt = "#" + "import('$chanwPath')" )
                        #evaluate( $chanwStmt )
                    #end
                #end
            #end
            
            #set( $chanwStmt = "" )
            #set( $chanwMacros = $script.getChildren( "macro" ) )
            
            ## second, invoke each macro
            #if( $chanwMacros.size() > 0 )
                #foreach( $macro in $chanwMacros )
                    #set( $chanwMacro = $macro.getChild( "name" ).Value.trim() )
                    #set( $chanwStmt = "" )
                    #set( $chanwStmt = "#" + $chanwMacro )
                    
                    #if( $chanwRedirect == "" )
                        #set( $chanwParams = $macro.getChild( "params" ) )
                        #set( $chanwLoop   = $macro.getChild( "loop" ) )
            
                        #if( !$_PropertyTool.isNull( $chanwParams ) )
                            ## pass in the global statement
                            #chanwProcessParams( $chanwStmt $chanwParams )
                            #evaluate( $chanwStmt )
                        #elseif( !$_PropertyTool.isNull( $chanwLoop ) )
                            #set( $chanwParamsNodes = $chanwLoop.getChildren( "params" ) )
                            
                            #if( $chanwParamsNodes && $chanwParamsNodes.size() > 0 )
                                #foreach( $chanwParamsNode in $chanwParamsNodes )
                                    #set( $chanwStmt = "" )
                                    #set( $chanwStmt = "#" + $chanwMacro )
                                    #chanwProcessParams( $chanwStmt $chanwParamsNode )
                                    ##$chanwStmt
                                    #evaluate( $chanwStmt )
                                #end
                            #end
                        #end
                    #else
                        #set( $chanwStmt = $chanwStmt + "(" )
                        #set( $chanwStmt = $chanwStmt + "$" + "chanwFirstChild" )
                        #set( $chanwStmt = $chanwStmt + ")" )
                        #evaluate( $chanwStmt )
                    #end
                    ##$chanwStmt
                #end
            #end
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwReinitializeListOfVariables( $list )《/code》
《p》Reinitializes the list of global variables, all assigned the empty string.
The list passed in should be variable names without the dollar signs. Example:《/p》
《pre》
#chanwReinitializeListOfVariables( [ “first“, “second“, “third“ ] )
《/pre》
《/documentation》
《macro id=“chanwReinitializeListOfVariables”》
*#
#macro( chanwReinitializeListOfVariables $list )
    #if( $list.class.name != $JAVA_UTIL_ARRAY_LIST_CLASS_NAME )
        A list of variable names is required.
        #stop
    #end
    #if( $list.size() > 0 )
        #foreach( $var in $list )
            #chanwSetVariable( $var "" )
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwSetVariableToNonEmptyString( $var $var $list )《/code》
《p》Selects the first non-empty string and assigns it to the global variable.
Example:《/p》
《pre》
## $var assigned “content“
#chanwSetVariableToNonEmptyString( “var“ [ “ “, ““, “content“ ] )  
《/pre》
《/documentation》
《macro id=“chanwSetVariableToNonEmptyString”》
*#
#macro( chanwSetVariableToNonEmptyString $var $list )
    #if( $list.class.name != $JAVA_UTIL_ARRAY_LIST_CLASS_NAME )
        Not a list!!!$BR 
        #stop
    #end
    
    #set( $chanwSize = $list.size() )
    
    #if( $chanwSize == 0 )
        Empty list!!!$BR 
        #stop
    #end
    
    #set( $chanwValue = "" ) ## empty string, the last resort
    
    #foreach( $num in [ 1..$chanwSize ] )
        #set( $chanwIndex = $num - 1 )
        
        #if( $list[ $chanwIndex ].class.name != $JAVA_LANG_STRING_CLASS_NAME )
            Not a String!!!$BR 
            #stop
        #end
        
        #if( $list[ $chanwIndex ].trim() != "" )
            #set( $chanwValue = $list[ $chanwIndex ].trim() )
            #break
        #end
    #end
    
    #chanwSetVariable( $var $chanwValue )
#end
#*
《/macro》
《documentation》
《code》thomaspeGetFeedPhoto $site $fileList《/code》
《p》Returns a file name from a list of file names, such that the file name is
the first name associated with an available file.
Example: 《/p》
《pre》
#set( $regularFile = "images/case-study-square-text.jpg")
#set( $smallerFile = "images/case-study-square.jpg" )
#set( $defaultFile = "images/news-family.jpg" )
## a list of file names
#set( $fileList = [ $regularFile, $smallerFile, $defaultFile ] )
#thomaspeGetFeedPhoto( "bioethics-in-brief" $fileList  )
$thomaspeGetFeedPhoto
《/pre》
《/documentation》
《macro id=“thomaspeGetFeedPhoto”》
*#
#macro( thomaspeGetFeedPhoto $site $thomaspeFiles )
    #if( $site.Class.Name != $JAVA_LANG_STRING_CLASS_NAME ||
        $site == "" )
        A site name is required.
        #stop
    #end

    #if( !$thomaspeFiles ||
        $thomaspeFiles.Class.Name != $JAVA_UTIL_ARRAY_LIST_CLASS_NAME ||
        $thomaspeFiles.size() < 1 )
        A non-empty list of variable names is required.
        #stop
    #end
    
    #set( $thomaspeGetFeedPhoto = "" )
    
    #foreach( $file in $fileList )
        #if( !$_PropertyTool.isNull( $_.locateFile( $file , $site ) ) )
    	    #set( $thomaspeGetFeedPhoto = $file )
    	    #break
    	#end
    #end
#end
#*
《/macro》
《documentation》
《code》#thomaspeGetSrcSetCode ( $imagePath $imageSiteName $map )《/code》
《p》Returns a string of code in a variable for use in srcset images. Using
the parameters of an image path, image site location, and a custom map of values,
it finds if srcset image exists. If so it adds them, if not, it moves on.
Example: 《/p》
《pre》
#import("site://_common_assets/formats/custom_macros")
#set( $image ="/images/computer-people.jpg" )
#set( $site = "thomas-test" )

#thomaspeSrcSetValues
#thomaspeGetSrcSetCode( $image $site $thomaspeSrcSetValues)
$thomaspeGetSrcSetCode
《/pre》
《/documentation》
《macro id=“thomaspeGetSrcSetCode”》
*#
#macro( thomaspeGetSrcSetCode $imagePath $imageSiteName $map )
    ## replace ".jpg" with array of replacements in order of priority
    #set( $thomaspeGetSrcSetCode = "srcset='" )
    #foreach( $imageOptions in $map.keySet()  )
        #set( $thomaspeImageOptionsFound = false )   
        #foreach( $imageSize in $map[ $imageOptions ] )
            #set( $thomaspeNewImagePath = $imagePath.replaceAll( ".jpg", $imageSize ) )
            #if( !$_PropertyTool.isNull(
                $_.locateFile( $thomaspeNewImagePath, $imageSiteName ) ) &&
                !$thomaspeImageOptionsFound )
                
                #set( $thomaspeImageOptionsFound = true )
                #set( $thomaspeGetSrcSetCode =
                    $thomaspeGetSrcSetCode + " " + $S_SYSTEM_ASSET_LOCAL +
                    "site://" + $imageSiteName +
                    $thomaspeNewImagePath + $E_SYSTEM_ASSET_LOCAL + " " +
                    $imageOptions + ", ")
            #end
        #end
    #end
    #set( $thomaspeGetSrcSetCode = $thomaspeGetSrcSetCode + "'" )
#end ##end macro 
#*
《/macro》
《documentation id=“bottom”》
《/documentation》
《/code》
*#