#*
《code》
《documentation id=“top”》
《h2》Introduction《/h2》
《p》This format defines global macros used throughout the library.《/p》
《/documentation》
*#
#import( 'formats/library/velocity/chanw_global_values' )
#*
《documentation》
《code》#chanwBuildXMLContentRoot( $xml_string )《/code》
《p》Creates an 《code》org.jdom.Element《/code》 object out of an XML string. The variable 《code》$xml_string《/code》 should contain a valid XML string with a root element.
Example:《/p》
《pre》
#chanwBuildXMLContentRoot( $xml )
#set( $contentRoot = $chanwBuildXMLContentRoot )
《/pre》
《/documentation》
《macro id=“chanwBuildXMLContentRoot”》
*#
#macro( chanwBuildXMLContentRoot $xml_string )
    #if( !$xml_string || $xml_string.Class.Name != $JAVA_LANG_STRING_CLASS_NAME || $xml_string == "" )
    An XML string is required.
    #stop
    #end
    
    #chanwGetConstructorByClassNameParamSize( 'java.io.StringReader' 1 )
    #set( $chanwConstructor = $chanwGetConstructorByClassNameParamSize )
    #set( $stringReader     = $chanwConstructor.newInstance( $xml_string ) )
    #set( $chanwBuildXMLContentRoot = "" )
    #set( $chanwBuildXMLContentRoot = $globalSAXBuilder.build( $stringReader ).RootElement )
#end
#*
《/macro》
《documentation》
《code》#chanwCallJavaMethod( $javaObjName $methodName )《/code》
《p》Calls the named method through the Java object. The second string can be any string containing acceptable Java code.
Examples:《/p》
《pre》
#chanwCallJavaMethod( '_DateTool' 'getCalendar()' )

#set( $list = [] )
#set( $void = $list.add( “let's have “ ) )
#chanwCallJavaMethod( 'list' 'add(“fun“)' )
《/pre》
《/documentation》
《macro id=“chanwCallJavaMethod”》
*#
#macro( chanwCallJavaMethod $javaObjName $methodName )
    #set( $chanwStmt = '#set( $chanwCallJavaMethod=' + '$' + $javaObjName + '.' + $methodName + ')' )
    #evaluate( $chanwStmt )
#end
#*
《/macro》
《documentation》
《code》#chanwConvertToPascalCase( $chanwMacroName $chanwDelimiter )《/code》
《p》Converts a string, possibly with delimiters, into Pascal case. The 《code》$chanwDelimiter《/code》 variable is treated as a marker
of word boundaries.
Example:《/p》
《pre》
#chanwConvertToPascalCase( “xml-group“ “-“ )
$chanwConvertToPascalCase
## converting xml-group to XmlGroup
《/pre》
《/documentation》
《macro id=“chanwConvertToPascalCase”》
*#
#macro( chanwConvertToPascalCase $chanwMacroName $chanwDelimiter )
    #if( $chanwMacroName.class.name != $JAVA_LANG_STRING_CLASS_NAME || $chanwMacroName.length() == 0 )
        Not a String$BR 
        #stop
    #end
    
    #if( !$chanwDelimiter || $chanwDelimiter.class.name != $JAVA_LANG_STRING_CLASS_NAME )
        #set( $chanwDelimiter = '' ) ## default to empty string
    #end
    
    #set( $chanwConvertToPascalCase = "" )
    
    #if( $chanwDelimiter.length() > 0 ) ## there is a delimiter passed in
        #if( $chanwMacroName.indexOf( $chanwDelimiter ) < 0 ) ## the delimiter does not exist
            #set( $chanwConvertToPascalCase = $globalApacheWordUtils.capitalize( $chanwMacroName ) )
        #else
            #set( $chanwMacroName = $chanwMacroName.replaceAll( $chanwDelimiter, ' ' ) ) ## replace delimiters with spaces
            #set( $chanwMacroName = $globalApacheWordUtils.capitalize( $chanwMacroName ) ) ## capitalize words
            #set( $chanwConvertToPascalCase = $chanwMacroName.replaceAll( ' ', '' ) ) ## remove spaces
        #end
    #else ## no delimiter passed in
        #set( $chanwConvertToPascalCase = $globalApacheWordUtils.capitalize( $chanwMacroName ) )
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwCreateDatabasePHPCode( $data )《/code》
《p》Creates PHP code containing a variable named 《code》$view《/code》, pointing to an array of values drawn from the result set 《code》$data《/code》.
The first column of the view must be keys, and the view must have at least two columns.
For one-column views, use upstate_database instead. Example:《/p》
《pre》
#import( 'site://_common_assets/formats/library/velocity/chanw_library_import' )
#chanwGetObjectByClassName( 'edu.upstate.chanw.db.CascadeDB' )

#set( $db   = $chanwGetObjectByClassName )
#set( $sql  = “SELECT userName, email, fullName FROM cxml_user“ )
#set( $data = $db.getResultSet( $sql ) )

#chanwCreateDatabasePHPCode( $data )
$globalStringBuffer.toString()
《/pre》
《/documentation》
《macro id=“chanwCreateDatabasePHPCode”》
*#
#macro( chanwCreateDatabasePHPCode $data )
    #if( !$data )
    A result set is required.
    #stop
    #end

    #chanwIsInstanceOf( $data "java.sql.ResultSet" )
    #if( !$chanwIsInstanceOf )
    A result set is required.
    #stop
    #end

    #set( $chanwColumnCount = $data.getMetaData().getColumnCount() )
    $globalStringBuffer.setLength( 0 )
    #set( $void = $globalStringBuffer.append( '$view=array(' ) )
    
    #if( $data.next() )
        #set( $void = $data.first() )
        
        #foreach( $count in [ 1..$chanwColumnCount ] )
            #if( $count == 1 )
                #set( $void = $globalStringBuffer.append('"').append($data.getString($count)).append('"=>array(') )
            #else
                #set( $void = $globalStringBuffer.append('"').append($data.getString($count) ).append('",' ) )
            
                #if( $count == $chanwColumnCount )
                    #set( $void = $globalStringBuffer.append("),") )
                #end
            #end
        #end
        
        #foreach( $num in [ 1..50000 ] )
            #if( $data.next() )
                #foreach( $count in [ 1..$chanwColumnCount ] )
                    #if( $count == 1 )
                        #set( $void = $globalStringBuffer.append('"').append($data.getString($count)).append('"=>array(') )
                    #else
                        #set( $void = $globalStringBuffer.append('"').append($data.getString($count) ).append('",' ) )
            
                        #if( $count == $chanwColumnCount )
                            #set( $void = $globalStringBuffer.append("),") )
                        #end
                    #end
                #end
            #else
                #break
            #end
        #end
        
        #set( $void = $globalStringBuffer.append(");") )
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwGetCascadeObjectFromElement( $element )《/code》
《p》Creates a Cascade API object out of an 《code》org.jdom.Element《/code》 object.
Note that since a reference only contains the path of the referenced asset, not its own path,
this macro does not work for references.
 Example:《/p》
《pre》
#set( $page = $_XPathTool.selectSingleNode( $contentRoot,  "system-folder[6]/system-page" ) )
$page.getChild( "name" ).Value
#chanwGetCascadeObjectFromElement( $page )
$chanwGetCascadeObjectFromElement.Class.Name
-$chanwGetCascadeObjectFromElement-

#set( $folder = $contentRoot.getChild( "system-folder" ) )
#chanwGetCascadeObjectFromElement( $folder )
$chanwGetCascadeObjectFromElement.Name
$chanwGetCascadeObjectFromElement.Class.Name
《/pre》
《/documentation》
《macro id=“chanwGetCascadeObjectFromElement”》
*#
#macro( chanwGetCascadeObjectFromElement $element )
    #if( $element.Class.Name != $ORG_JDOM_ELEMENT_CLASS_NAME )
        Not a jdom.Element.
        #stop
    #end

    #set( $chanwCascadeType = $CASCADE_TYPE_ELEMENT_MAP.get( $element.Name ) )
    #set( $chanwGetCascadeObjectFromElement = "" )
    
    #set( $chanwGetCascadeObjectFromElement = 
        $_.locate(
            $element.getChild( "path" ).Value.substring( 1 ),
            $chanwCascadeType,
            $element.getChild( "site" ).Value
        ) 
    )
#end
#*
《/macro》
《documentation》
《code》#chanwGetDatabaseList( $listName )《/code》
《p》Creates a list containing single values drawn from the database. The value of 《code》$listName《/code》 should be a name of a variable.
The associated sql statement selects a single value from a table. This macro is used by upstate_database. Example from upstate_database:《/p》
《pre》
#import( 'site://_common_assets/formats/library/velocity/chanw_object_creator' )
#chanwGetObjectByClassName( 'edu.upstate.chanw.db.CascadeDB' )

#set( $db           = $chanwGetObjectByClassName )
#set( $maxNumber    = 500000 )
#set( $list_sql_map = { “upstateSiteName“:“select name from cxml_site“, 
                        “upstateUserName“:“select username from cxml_user“
                      } )

#foreach( $key in $list_sql_map.keySet() )
    #set( $sql = $list_sql_map[ $key ] )
    #chanwGetDatabaseList( $key )
#end
《/pre》
《/documentation》
《macro id=“chanwGetDatabaseList”》
*#
#macro( chanwGetDatabaseList $listName )
    #set( $data = $db.getResultSet( $sql ) )
    #set( $chanwStmt = '#set($' + $listName + '=[])' )
    #evaluate( $chanwStmt )

    #if( $data.next() )
        #set( $void = $data.first() )
        #set( $chanwStmt = '#set($void=$' + $listName + '.add( $data.getString( 1 ) ) )' )
        #evaluate( $chanwStmt )
    
        #foreach( $num in [ 1..$maxNumber ] )
            #if( $data.next() )
                #set( $chanwStmt = '#set($void=$' + $listName + '.add( $data.getString( 1 ) ) )' )
                #evaluate( $chanwStmt )
            #else
                #break
            #end
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwGetFilePath( $file $site $default )《/code》
《p》Gets the valid file path or the default path. Invoke this macro in double quotes in a set directive. Created by Peter. Example:《/p》
《pre》
#set( $myFile = “#chanwGetFilePath( 'images/computer-people-700x350.jpg' 'thomas-test' 'images/default.jpg' )“ )
《/pre》
《/documentation》
《macro id=“chanwGetFilePath”》
*#
#macro( chanwGetFilePath $file $site $default )
    #if( $_PropertyTool.isNull( $_.locateFile( $file, $site ) ) )
        $default
    #else
        $file
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwGetFolderContainedAssetName( $asset )《/code》
《p》Returns the name of the asset. The 《code》$asset《/code》 passed in should be a Cascade API object. Example:《/p》
《pre》
#chanwGetFolderContainedAssetName( $chanwGetCascadeObjectFromElement )
$chanwGetFolderContainedAssetName
《/pre》
《/documentation》
《macro id=“chanwGetFolderContainedAssetName”》
*#
#macro( chanwGetFolderContainedAssetName $asset )
    #if( !$asset )
    No asset passed in.
    #stop
    #end
    
    #chanwIsInstanceOf( $asset "com.hannonhill.cascade.api.adapters.FolderContainedAssetAPIAdapter" )
    #if( !$chanwIsInstanceOf )
    $asset is not a folder contained asset object.
    #stop
    #end
    
    #set( $chanwPathSegments = $asset.Identifier.Path.PathSegments )
    #set( $lastIndex = $chanwPathSegments.size() - 1 )
    #set( $chanwGetFolderContainedAssetName = "" )
    #set( $chanwGetFolderContainedAssetName = $chanwPathSegments.get( $lastIndex ) )
#end 
#*
《/macro》
《documentation》
《code》#chanwGetListReversed( $chanwList )《/code》
《p》Returns a new list, containing all items of the original list but
in reversed order. Example:《/p》
《pre》
#chanwGetListReversed( $states )
$chanwGetListReversed
《/pre》
《/documentation》
《macro id=“chanwGetListReversed”》
*#
#macro( chanwGetListReversed $chanwList )
    #set( $chanwGetListReversed = [] )
    
    #if( $chanwList.Class.Name == $JAVA_UTIL_ARRAY_LIST_CLASS_NAME && $chanwList.size() > 0 )
        #set( $chanwEndIndex = $chanwList.size() - 1 )
        #foreach( $num in [ $chanwEndIndex..0 ] )
            #set( $void = $chanwGetListReversed.add( $chanwList.get( $num ) ) )
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwGetListRandomized( $chanwList )《/code》
《p》Returns a new list, containing all items of the original list but
in random order. Example:《/p》
《pre》
#chanwGetListRandomized( $states )
$chanwGetListRandomized
《/pre》
《/documentation》
《macro id=“chanwGetListRandomized”》
*#
#macro( chanwGetListRandomized $chanwList )
    #set( $chanwGetListRandomized = $chanwList )
    
    #if( $chanwList.Class.Name == $JAVA_UTIL_ARRAY_LIST_CLASS_NAME && $chanwList.size() > 0 )
        #set( $chanwMax       = $chanwGetListRandomized.size() - 1 )
        #set( $chanwCountList = [ $chanwMax..0 ] )

        ## Fisher–Yates shuffle
        #foreach( $num in $chanwCountList )
            #set( $chanwNext  = $num + 1 )
            #set( $chanwIndex = $chanwGlobalRandom.nextInt( $chanwNext ) )
            #set( $chanwTemp  = $chanwGetListRandomized[ $chanwIndex ] )
            #set( $chanwGetListRandomized[ $chanwIndex ] = $chanwGetListRandomized[ $num ] )
            #set( $chanwGetListRandomized[ $num ] = $chanwTemp )
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwGetMapKeyValueReversed( $chanwMap )《/code》
《p》Returns a new map with keys of the original map as values,
and values of the original map as keys. This macro assumes that the values
are unique. Else later values, when treated as keys, overwrite earlier values.《/p》
《pre》
#chanwGetMapKeyValueReversed( $stateMap )
$chanwGetMapKeyValueReversed
《/pre》
《/documentation》
《macro id=“chanwGetMapKeyValueReversed”》
*#
#macro( chanwGetMapKeyValueReversed $chanwMap )
    #set( $chanwGetMapKeyValueReversed = {} )
    
    #if( ( $chanwMap.Class.Name == $JAVA_UTIL_LINKEDHASHMAP_CLASS_NAME || $chanwMap.Class.Name == $JAVA_UTIL_HASHMAP_CLASS_NAME )
        && $chanwMap.size() > 0 )
        #set( $chanwKeySet = $chanwMap.keySet() )
        #foreach( $key in $chanwKeySet )
            #set( $void = $chanwGetMapKeyValueReversed.put( $chanwMap.get( $key ), $key ) )
        #end
    #end
#end    
#*
《/macro》
《documentation》
《code》#chanwGetNodeValues( $node $map )《/code》
《p》Dynamically creates variables assigned with values.《/p》
《/documentation》
《macro id=“chanwGetNodeValues”》
*#
#macro( chanwGetNodeValues $node $map )
    #foreach( $var in $map.keySet() )
        #set( $chanwChildNodes = $_XPathTool.selectNodes( $node, $map[ $var ] ) )
    
        ## the element exists
        #if( $chanwChildNodes.size() > 0 )
            ## two possible cases: element containing elements, or text node
            #set( $chanwChildNode = $chanwChildNodes[ 0 ] )
            #set( $chanwGrandChildNodes = $chanwChildNode.Children )
            
            #if( $chanwGrandChildNodes.size() > 0 )
                #set( $chanwNodeValue = $chanwChildNodes )        ## a list
            #else
                #set( $chanwNodeValue = $chanwChildNode.Value )   ## a string
            #end
        #else
            #set( $chanwNodeValue = "" )
        #end
        #chanwSetVariable( $var $chanwNodeValue )
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwGetNodeSets( $node $map )《/code》
《p》Dynamically creates variables assigned with node sets.《/p》
《/documentation》
《macro id=“chanwGetNodeSets”》
*#
#macro( chanwGetNodeSets $node $map )
    #set( $chanwNameNodesMap = {} )
    #foreach( $var in $map.keySet() )
        #set( $chanwNodeSet = $_XPathTool.selectNodes( $node, $map[ $var ] ) )
        #if( $_PropertyTool.isNull( $chanwNodeSet ) )
            #set( $chanwNodeSet = "" )
        #end
        #set( $void = $chanwNameNodesMap.put( $map[ $var ], $chanwNodeSet ) )
        #set( $chanwSetVarValStatement = '#' + "set(" + $_EscapeTool.D + "$var = " + 
            $_EscapeTool.D + "chanwNameNodesMap[" + $_EscapeTool.D + "map["+ "'$var']])" )
        #evaluate( $chanwSetVarValStatement )
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwGetParamListAsStrings( $list )《/code》
《p》Converts a list of items into a string, containing all items in the list, each as a string value in quotes and separated by commas.《/p》
《pre》
#set( $strings = [ "one", "two", "three" ] )
#chanwGetParamListAsStrings( $strings )
$chanwGetParamListAsStrings ## output "one","two","three"
《/pre》
《/documentation》
《macro id=“chanwGetParamListAsStrings”》
*#
#macro( chanwGetParamListAsStrings $list )
    #if( $list.Class.Name != $JAVA_UTIL_ARRAY_LIST_CLASS_NAME )
        Not a list.
        #stop
    #end
    
    #set( $chanwGetParamListAsStrings = '' )
    
    #if( $list.size() > 0 )
        #foreach( $item in $list )
            #set( $chanwGetParamListAsStrings = $chanwGetParamListAsStrings + '"' + $item + '"' )
            #if( $foreach.count < $list.size() )
                #set( $chanwGetParamListAsStrings = $chanwGetParamListAsStrings + ',' )
            #end
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwGetParamListAsStrings( $list )《/code》
《p》Converts a list of items into a string, containing all items in the list, each as a value separated by commas.《/p》
《pre》
#set( $ints = [ 1, 2, 3, 4 ] )
#chanwGetParamListAsValues( $ints )
$chanwGetParamListAsValues ## output 1,2,3,4 as a string
《/pre》
《/documentation》
《macro id=“chanwGetParamListAsValues”》
*#
#macro( chanwGetParamListAsValues $list )
    #if( $list.Class.Name != $JAVA_UTIL_ARRAY_LIST_CLASS_NAME )
        Not a list.
        #stop
    #end
    
    #set( $chanwGetParamListAsValues = '' )
    
    #if( $list.size() > 0 )
        #foreach( $item in $list )
            #set( $chanwGetParamListAsValues = $chanwGetParamListAsValues + $item )
            #if( $foreach.count < $list.size() )
                #set( $chanwGetParamListAsValues = $chanwGetParamListAsValues + ',' )
            #end
        #end
    #end
#end
#*   
《/macro》
《documentation》
《code》#chanwInvokeMacro( $chanwMacroName $chanwMacroParams )《/code》
《p》Invokes a macro with the name and parameters passed in. Example:《/p》
《pre》
#set( $file    = 'images/computer-people-700x350.jpg' )
#set( $site    = 'thomas-test' )
#set( $default = 'images/default.jpg' )
#set( $myFile  = “#chanwInvokeMacro('chanwGetFilePath' ['file', 'site', 'default'] )“ )
《/pre》
《/documentation》
《macro id=“chanwInvokeMacro”》
*#
#macro( chanwInvokeMacro $chanwMacroName $chanwMacroParams )
    #if( $chanwMacroName.class.name == $JAVA_LANG_STRING_CLASS_NAME )
        #set( $chanwStatement = "#$chanwMacroName(" )
    
        #if( $chanwMacroParams.class.name == $JAVA_UTIL_ARRAY_LIST_CLASS_NAME )
            #if( $chanwMacroParams.size() > 0 )
                #foreach( $chanwMacroParam in $chanwMacroParams )
                    #if( $chanwMacroParam.class.name == $JAVA_LANG_STRING_CLASS_NAME )
                        #set( $chanwStatement = $chanwStatement + "$" + $chanwMacroParam + " " )
                    #end
                #end
            #end
        #end
    
        #set( $chanwStatement = $chanwStatement.trim() )
        #set( $chanwStatement = $chanwStatement + ")" )
        #evaluate( $chanwStatement )
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwIsInstanceOf( $chanwObj $chanwClassName )《/code》
《p》Returns a boolean string, indicating whether the object is an instance of the suppled class name. Example:《/p》
《pre》
#chanwIsInstanceOf( $list “java.util.concurrent.BlockingDeque“ )
$chanwIsInstanceOf$BR   ## output false
《/pre》
《/documentation》
《macro id=“chanwIsInstanceOf”》
*#
#macro( chanwIsInstanceOf $chanwObj $chanwClassName )
    #if( $_PropertyTool.isNull( $chanwObj ) )
        The object cannot be null.
        #stop
    #end
    
    #if( !$chanwClassName || $chanwClassName.Class.Name != $JAVA_LANG_STRING_CLASS_NAME )
        A valid class name is required.
        #stop
    #end
    
    #set( $chanwIsInstanceOf = "" )
    
    #if( $chanwClassName.equals( $chanwObj.Class.Name ) )
        #set( $chanwIsInstanceOf = true )
    #else
        #set( $chanwInterfaces   = $globalApacheClassUtils.getAllInterfaces( $chanwObj.Class ) )
        #set( $chanwSuperclasses = $globalApacheClassUtils.getAllSuperclasses( $chanwObj.Class ) )
        
        #foreach( $interface in $chanwInterfaces )
            #if( $chanwClassName.equals( $interface.Name ) )
                #set( $chanwIsInstanceOf = true )
                #break
            #end
        #end
        
        #if( $chanwIsInstanceOf == "" )
            #foreach( $superclass in $chanwSuperclasses )
                #if( $chanwClassName.equals( $superclass.Name ) )
                    #set( $chanwIsInstanceOf = true )
                    #break
                #end
            #end            
        #end
        
        #if( $chanwIsInstanceOf == "" )
            #set( $chanwIsInstanceOf = false )
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwLocateAsset( $folderPath $siteName $assetName )《/code》
《p》Locates the named assets.《/p》
《/documentation》
《macro id=“chanwLocateAsset”》
*#
#macro ( chanwLocateAsset $folderPath $siteName $assetName )
    #if( !$folderPath || !$siteName || !$assetName )
    Three non-empty strings are required: folder path, site name, and asset name.
    #stop
    #end
    
    #if( $folderPath.Class.Name != $JAVA_LANG_STRING_CLASS_NAME || $folderPath == "" ||
         $siteName.Class.Name != $JAVA_LANG_STRING_CLASS_NAME || $siteName == "" ||
         $assetName.Class.Name != $JAVA_LANG_STRING_CLASS_NAME || $assetName == "" )
    Three non-empty strings are required: folder path, site name, and asset name.
    #stop
    #end

    #set( $chanwFolderAPI   = $_.locateFolder( $folderPath, $siteName ) )
    
    #if( !$chanwFolderAPI )
    Cannot locate the folder.
    #stop
    #end
    
    #set( $chanwFolderAPIChildren = $chanwFolderAPI.getChildren() )
    
    #if( !$chanwFolderAPIChildren )
    The folder has no children.
    #stop
    #end
    
    #set( $chanwLocateAsset = "" )
    
    #if( $chanwFolderAPIChildren.size() > 0 )
        #foreach( $chanwFolderAPIChild as $chanwFolderAPIChildren )
            #chanwGetFolderContainedAssetName( $chanwFolderAPIChild )
            #if( $chanwGetFolderContainedAssetName == $assetName )
                #set( $chanwLocateAsset = $chanwFolderAPIChild )
                #break
            #end
        #end
        
        #if( $chanwLocateAsset == "" )
        Cannot locate the asset.$BR
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwProcessBlockChooser( $content )《/code》
《p》Processes a block chooser or a region.
When it is a region, what is passed in is a Document object.
Otherwise, it is an Element whose name is content.
Why parent of the root element is passed in: a text block may not have a root element.《/p》
《/documentation》
《macro id=“chanwProcessBlockChooser”》
*#
#macro( chanwProcessBlockChooser $content )
    #if( $content.class.name == $ORG_JDOM_DOCUMENT_CLASS_NAME )
        #set( $contentChildren = $content.getContent() )
    #else
        #set( $contentChildren = $content.getChildren() )
    #end
    
    #if( $contentChildren.size() == 0 )
        $_SerializerTool.serialize( $content, true )  ## plain text or code
    #elseif( $contentChildren.size() > 0 )
        #set( $firstChild = $contentChildren.get( 0 ) )
        #set( $childName  = $firstChild.name )
        #set( $childPath  = $content.getParent().getChild( 'path' ).value )
        #set( $siteName   = $content.getParent().getChild( 'site' ).value )
        
        #set( $blockName  = $childPath )
        ## there is at least one slash
        #set( $lastIndexOfSlash = $blockName.lastIndexOf( '/' ) + 1 )
        
        #if( $lastIndexOfSlash > -1 )
            #set( $blockName = $blockName.substring( $lastIndexOfSlash ) )
        #end
        
        ## macro blocks
        #if( $blockName.endsWith( 'Macro' ) || $blockName.endsWith( 'macro' ) )
            #chanwInvokeMacro( "chanwProcessBlockWithMacro" [ "firstChild", "childPath", "siteName" ] )
        ## text blocks
        #elseif( $blockName.endsWith( 'Text' ) || $blockName.endsWith( 'text' ) ) 
            $_SerializerTool.serialize( $content, true )
        ## script blocks
        #elseif( $blockName.endsWith( 'Script' ) || $blockName.endsWith( 'script' )  )
            #chanwInvokeMacro( "chanwProcessScript" [ "firstChild" ] )
        ## data definition blocks
        #elseif( $childName == $cascadeXML_ELEMENT_SYSTEM_DATA_STRUCTURE )
            #chanwProcessDataDefinitionBlock( $firstChild )
        ## index block
        #elseif( $childName == $cascadeXML_ELEMENT_SYSTEM_INDEX_BLOCK )
            #chanwProcessIndexBlock( $blockName $firstChild )
        ## others, preferably having -xml, -feed suffixes
        #else
            #chanwConvertToPascalCase( $blockName "-" )
            #set( $macroName = $MACRO_PREFIX + $chanwConvertToPascalCase )
            #chanwInvokeMacro( $macroName [ "firstChild" ] )
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwProcessBlockWithMacro( $firstChild $childPath $siteName )《/code》
《p》Processes a block containing a macro name in a dynamic field. This macro is used by 《code》#chanwProcessBlockChooser《/code》.《/p》
《/documentation》
《macro id=“chanwProcessBlockWithMacro”》
*#
#macro( chanwProcessBlockWithMacro $firstChild $childPath $siteName )
    #set( $chanwBlock = $_.locateBlock( $childPath, $siteName ) )
    #set( $chanwMacroName = $chanwBlock.Metadata.getDynamicField( 'macro' ).Value )
    
    #if( $chanwMacroName == "" )
        #set( $chanwMacroName = "processUnknown" )
    #end
    
    #chanwInvokeMacro( $chanwMacroName [ "firstChild" ] )
#end
#*
《/macro》
《documentation》
《code》#chanwProcessDataDefinitionBlock( $systemDataStructure )《/code》
《p》Processes a data definition block with type information. The type is turned into a macro name. This macro is used by 《code》#chanwProcessBlockChooser《/code》.《/p》
《/documentation》
《macro id=“chanwProcessDataDefinitionBlock”》
*#
#macro( chanwProcessDataDefinitionBlock $systemDataStructure )
    #set( $isDisplay = $systemDataStructure.getChild( 'display' ).value )
    
    #if( $isDisplay.toLowerCase() == 'yes' )
        #set( $type = $systemDataStructure.getChild( 'block-type' ).value )
        
        #if( $type )
            #chanwConvertToPascalCase( $type "-" )
            #set( $macroName = $MACRO_PREFIX + $chanwConvertToPascalCase )
            #chanwInvokeMacro( $macroName [ "systemDataStructure" ] )
        #else
            No type information available in the data definition block.$BR
        #end
    #else
        Cannot process the data definition block.$BR
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwProcessIndexBlock( $blockName $firstChild )《/code》
《p》Processes an index block. The name of the block is turned into a macro name. This macro is used by 《code》#chanwProcessBlockChooser《/code》.《/p》
《/documentation》
《macro id=“chanwProcessIndexBlock”》
*#
#macro( chanwProcessIndexBlock $blockName $firstChild )
    #chanwConvertToPascalCase( $blockName "-" )
    #set( $macroName = $MACRO_PREFIX + $chanwConvertToPascalCase )
    #chanwInvokeMacro( $macroName [ "firstChild" ] )
#end
#*
《/macro》
《documentation》
《code》#chanwProcessParams( $chanwStatement $params )《/code》
《p》Creates the param lists as a string and attaches it to the statement passed in. Note that the global variable 《code》$chanwStatement《/code》 is passed in.
This macro is used by 《code》#chanwProcessScript《/code》.《/p》
《/documentation》
《macro id=“chanwProcessParams”》
*#
#macro( chanwProcessParams $chanwStatement $params )
    #set( $paramsChildren = $params.getChildren() )
                
    #if( $paramsChildren.size() > 0 )
        #set( $chanwStatement = $chanwStatement + "(" )

        #foreach( $child in $paramsChildren )
            #if( $child.Name == "param" )
                #if( $child.Value.trim() != "" )
                    #set( $chanwStatement = $chanwStatement + "'" + $child.Value.trim() + "' " )
                #end
            #elseif( $child.Name == "variable" )
                #if( $child.Value.trim() != "" )
                    #set( $chanwStatement = $chanwStatement + "$" + $child.Value.trim() + " " )
                #end
            #elseif( $child.Name == "list" )
                #set( $chanwListChildren = $child.getChildren() )
        
                #if( $chanwListChildren.size() > 0 )
                    #set( $chanwStatement = $chanwStatement + "[" )

                    #foreach( $list_child in $chanwListChildren )
                        #if( $list_child.Name == "param" )
                            #if( $list_child.Value.trim() != "" )
                                #set( $chanwStatement = $chanwStatement + "'" + $list_child.Value.trim() + "', " )
                            #end
                        #elseif( $list_child.Name == "variable" )
                            #if( $list_child.Value.trim() != "" )
                                #set( $chanwStatement = $chanwStatement + "$" + $list_child.Value.trim() + ", " )
                            #end
                        #end
                    #end
            
                    ## remove last comma
                    #set( $chanwStatement = $chanwStatement.trim() )
                
                    #if( $chanwStatement.endsWith( "," ) )
                        #set( $end_index = $chanwStatement.length() - 1 )
                        #set( $chanwStatement = $chanwStatement.substring( 0, $end_index ) )
                    #end
                    #set( $chanwStatement = " " + $chanwStatement + "]" )
                #end
            #elseif( $child.Name == "map" )
                #set( $chanwMapPairs = $child.getChildren() )
        
                #if( $chanwMapPairs.size() > 0 )
                    #set( $chanwStatement = $chanwStatement + "{" )
            
                    #foreach( $map_pair in $chanwMapPairs )
                        #set( $key = $map_pair.getChild( "key" ) )
                        #set( $value = $map_pair.getChild( "value" ) )
                
                        #if( $key )
                            #set( $key = $key.Value.trim() )
                        #end
                    
                        #if( $value )
                            #set( $value = $value.Value.trim() )
                        #end
                
                        #if( $key != "" && $value != "" )
                            #set( $chanwStatement = $chanwStatement + "'$key':'$value'," )
                        #end
                    #end
                    ## remove last comma
                    #set( $chanwStatement = $chanwStatement.trim() )
                
                    #if( $chanwStatement.endsWith( "," ) )
                        #set( $end_index = $chanwStatement.length() - 1 )
                        #set( $chanwStatement = $chanwStatement.substring( 0, $end_index ) )
                    #end
                    #set( $chanwStatement = " " + $chanwStatement + "}" )
                #end
            #end
        #end

        #set( $chanwStatement = $chanwStatement + ")" )
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwProcessScript( $firstChild )《/code》
《p》Processes a script block. A script block, in the current implementation, is an XML block whose name must have a '-script' suffix.
The 《code》$firstChild《/code》 is the 《code》scripts《/code》 element. The 《code》scripts《/code》 can contain: 1) zero or one
《code》code《/code》 element, which contains actual Velocity code; 2) zero or more 《code》path《/code》 elements, which are formats
to be imported; and 3) zero or more 《code》macro《/code》 elements. Each 《code》macro《/code》 element must contain
a 《code》name《/code》 element, and zero or one 《code》params《/code》 element. A 《code》params《/code》 element contains
one or more 《code》param《/code》 and/or 《code》variable《/code》 elements in any order. A 《code》param《/code》 element contains
a string value to be passed into the macro, and a 《code》variable《/code》 element contains a name of a variable to be passed in
the macro.《/p》
《p》If there is a 《code》code《/code》 element, this element will be processed first.
Code inside cannot contain 《code》<《/code》, 《code》>《/code》 and
《code》&&《/code》. Use 《code》&lt;《/code》, 《code》&gt;《/code》 and 《code》-aa-《/code》 instead. A 《code》code《/code》
element can be followed by 《code》script《/code》 elements. 《/p》
《p》The following two 《code》scripts《/code》 elements are equivalent:《/p》
《pre》
<scripts>
    <code>
#import( "site://_common_assets/formats/library/velocity/chanw_display_velocity_code" )
#chanwGetMacroCode( "chanw_object_creator" "formats/library/velocity" "_common_assets" "chanwGetObjectByClassName" )
#chanwDisplayHideVelocityCode( $chanwGetMacroCode "hide-code1" "true" "false" )
    </code>
</scripts>

<scripts>
    <script>
        <path>site://_common_assets/formats/library/velocity/chanw_display_velocity_code</path>
        <macro>
            <name>chanwGetMacroCode</name>
            <params>
                <param>chanw_object_creator</param>
                <param>formats/library/velocity</param>
                <param>_common_assets</param>
                <param>chanwGetObjectByClassName</param>
            </params>
        </macro>
        <macro>
            <name>chanwDisplayHideVelocityCode</name>
            <params>
                <variable>chanwGetMacroCode</variable>
                <param>hide-code1</param>
                <param>true</param>
                <param>false</param>
            </params>
        </macro>
    </script>
</scripts>
《/pre》
《/documentation》
《macro id=“chanwProcessScript”》
*#
#macro( chanwProcessScript $firstChild )
    ## allow only one code element, and process it first
    #set( $chanwCode = $firstChild.getChild( 'code' ) )
    
    #if( $chanwCode )
        #set( $chanCodeStmt = $chanwCode.Value.replaceAll( 
        	'&lt;', '<' ).replaceAll(
    		'&gt;', '>' ).replaceAll(
    		'-aa-', '&&' ) )
    	#evaluate( $chanCodeStmt )
    #end

    ## get the scripts to be executed
    #set( $chanwScripts = $firstChild.getChildren( 'script' ) )
    
    ## loop through each script
    #if( $chanwScripts.size() > 0 )
        #foreach( $script in $chanwScripts )
            ## first, check for redirect
            #set( $chanwRedirect = "" )
            #set( $chanwRedirect = $_XPathTool.selectSingleNode( $script, "redirect" ) )

            ## second, import the script
            #set( $chanwPaths = "" )
            #set( $chanwPaths = $script.getChildren( "path" ) )
            
            #if( $chanwPaths.size() > 0 )
                #foreach( $chanwPath in $chanwPaths )
                    #set( $chanwPath = $chanwPath.Value.trim() )
            
                    ## make the path optional
                    #if( $chanwPath != "" )
                        #set( $chanwStatement = "#" + "import('$chanwPath')" )
                        #evaluate( $chanwStatement )
                    #end
                #end
            #end
            
            #set( $chanwStatement = "" )
            #set( $chanwMacros = $script.getChildren( "macro" ) )
            
            ## second, invoke each macro
            #if( $chanwMacros.size() > 0 )
                #foreach( $macro in $chanwMacros )
                    #set( $chanwMacro = $macro.getChild( "name" ).Value.trim() )
                    #set( $chanwStatement = "" )
                    #set( $chanwStatement = "#" + $chanwMacro )
                    
                    #if( $chanwRedirect == "" )
                        #set( $chanwParams = $macro.getChild( "params" ) )
                        #set( $chanwLoop   = $macro.getChild( "loop" ) )
            
                        #if( !$_PropertyTool.isNull( $chanwParams ) )
                            ## pass in the global statement
                            #chanwProcessParams( $chanwStatement $chanwParams )
                            #evaluate( $chanwStatement )
                        #elseif( !$_PropertyTool.isNull( $chanwLoop ) )
                            #set( $chanwParamsNodes = $chanwLoop.getChildren( "params" ) )
                            
                            #if( $chanwParamsNodes && $chanwParamsNodes.size() > 0 )
                                #foreach( $chanwParamsNode in $chanwParamsNodes )
                                    #set( $chanwStatement = "" )
                                    #set( $chanwStatement = "#" + $chanwMacro )
                                    #chanwProcessParams( $chanwStatement $chanwParamsNode )
                                    ##$chanwStatement
                                    #evaluate( $chanwStatement )
                                #end
                            #end
                        #end
                    #else
                        #set( $chanwStatement = $chanwStatement + "(" )
                        #set( $chanwStatement = $chanwStatement + "$" + "firstChild" )
                        #set( $chanwStatement = $chanwStatement + ")" )
                        #evaluate( $chanwStatement )
                    #end
                    ##$chanwStatement
                #end
            #end
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwReinitializeListOfVariables( $list )《/code》
《p》Reinitializes the list of variables, all assigned the empty string. The list passed in should be variable names without the dollar signs. Example:《/p》
《pre》
#chanwReinitializeListOfVariables( [ “first“, “second“, “third“ ] )
《/pre》
《/documentation》
《macro id=“chanwReinitializeListOfVariables”》
*#
#macro( chanwReinitializeListOfVariables $list )
    #if( $list.class.name != $JAVA_UTIL_ARRAY_LIST_CLASS_NAME )
        A list of variable names is required.
        #stop
    #end
    #if( $list.size() > 0 )
        #foreach( $var in $list )
            #chanwSetVariable( $var "" )
        #end
    #end
#end
#*
《/macro》
《documentation》
《code》#chanwSetVariableToNonEmptyString( $var $var $list )《/code》
《p》Selects the first non-empty string and assigns it to the variable. Example:《/p》
《pre》
#chanwSetVariableToNonEmptyString( “var“ [ “ “, ““, “content“ ] ) ## $var assigned “content“ 
《/pre》
《/documentation》
《macro id=“chanwSetVariableToNonEmptyString”》
*#
#macro( chanwSetVariableToNonEmptyString $var $list )
    #if( $list.class.name != $JAVA_UTIL_ARRAY_LIST_CLASS_NAME )
        Not a list!!!$BR 
        #stop
    #end
    
    #set( $size = $list.size() )
    
    #if( $size == 0 )
        Empty list!!!$BR 
        #stop
    #end
    
    #set( $chanwValue = "" ) ## empty string, the last resort
    
    #foreach( $num in [ 1..$size ] )
        #set( $index = $num - 1 )
        
        #if( $list[ $index ].class.name != $JAVA_LANG_STRING_CLASS_NAME )
            Not a String!!!$BR 
            #stop
        #end
        
        #if( $list[ $index ].trim() != "" )
            #set( $chanwValue = $list[ $index ].trim() )
            #break
        #end
    #end
    
    #chanwSetVariable( $var $chanwValue )
#end
#*
《/macro》
《documentation》
《code》#thomaspeGetSrcSetCode ( $imagePath $imageSiteName $map )《/code》
《p》Returns a string of code in a variable for use in srcset images. Using the parameters of an image path, image site location, and a custom map of values, it finds if srcset image exists. If so it adds them, if not, it moves on.
Example: 《/p》
《pre》
#import("site://_common_assets/formats/custom_macros")
#set( $image ="/images/computer-people.jpg" )
#set( $site = "thomas-test" )

#thomaspeSrcSetValues
#thomaspeGetSrcSetCode( $image $site $thomaspeSrcSetValues)
$thomaspeGetSrcSetCode
《/pre》
《/documentation》
《macro id=“thomaspeGetSrcSetCode”》
*#
#macro( thomaspeGetSrcSetCode $imagePath $imageSiteName $map )
    ## replace ".jpg" with array of replacements in order of priority
    #set( $thomaspeGetSrcSetCode = "srcset='" )
    #foreach( $imageOptions in $map.keySet()  )
        #set( $thomaspeImageOptionsFound = false )   
        #foreach( $imageSize in $map[ $imageOptions ] )
            #set( $thomaspeNewImagePath = $imagePath.replaceAll( ".jpg", $imageSize ) )
            #if( !$_PropertyTool.isNull(
                $_.locateFile( $thomaspeNewImagePath, $imageSiteName ) ) &&
                !$thomaspeImageOptionsFound )
                
                #set( $thomaspeImageOptionsFound = true )
                #set( $thomaspeGetSrcSetCode =
                    $thomaspeGetSrcSetCode + " " + $S_SYSTEM_ASSET_LOCAL + "site://" + $imageSiteName +
                    $thomaspeNewImagePath + $E_SYSTEM_ASSET_LOCAL + " " +
                    $imageOptions + ", ")
            #end
        #end
    #end
    #set( $thomaspeGetSrcSetCode = $thomaspeGetSrcSetCode + "'" )
#end ##end macro 
#*
《/macro》
《documentation id=“bottom”》
《/documentation》
《/code》
*#