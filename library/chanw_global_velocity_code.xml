<?xml version="1.0"?>
<global-velocity-code>
    <!-- This block is hooked up with chanw_global_values_code and process_block.
    Code defined here is executed in chanw_global_values.
    
    Code templates: Strings like -dispatch_macro_name-, -single_group_name- and -macro_name- are place-holders,
    to be replaced by real values; everything else is just plain Velocity code, except XML entities like &lt;
    and &amp;. Note the use of casing:
    place-holders and variables used to generated code use lowercase, underscores and dashes, 
    real variables in generated code use camelCase. 
    
    Macros used in the library:
    1. processBlockChooser
    2. processDataDefinitionBlock
    3. processIndexBlock
    4. processScript
    -->

    <build-xml-content-root-code>
#*
Creates an org.jdom.Element object out of an XML string.
Example:

#set( $xml = "&lt;books&gt;&lt;book&gt;Harry Potter&lt;/book&gt;&lt;book&gt;Little Women&lt;/book&gt;&lt;/books&gt;" )
#chanwBuildXMLContentRoot( $xml )
#set( $contentRoot = $chanwBuildXMLContentRoot )
*#
#macro( chanwBuildXMLContentRoot $xml_string )
    #chanwGetConstructorByClassNameParamSize( 'java.io.StringReader' 1 )
    #set( $chanwConstructor = $chanwGetConstructorByClassNameParamSize )
    #set( $stringReader     = $chanwConstructor.newInstance( $xml_string ) )
    #set( $chanwBuildXMLContentRoot = $globalSAXBuilder.build( $stringReader ).rootElement )
#end
    </build-xml-content-root-code>
    
    <call-java-method-code>
#macro( chanwCallJavaMethod $javaObjName $methodName )
    #set( $chanwStmt = '#set( $chanwCallJavaMethod=' + '$' + $javaObjName + '.' + $methodName + ')' )
    #evaluate( $chanwStmt )
#end
    </call-java-method-code>
    
    <convert-to-pascal-case-code>
#*
Converts a string, possibly with delimiters, into Pascal case.
Example:

#chanwConvertToPascalCase( "xml-group" "-" )
$chanwConvertToPascalCase
## converting xml-group to XmlGroup
*#
#macro( chanwConvertToPascalCase $chanwMacroName $chanwDelimiter )
    #if( $chanwMacroName.class.name != $JAVA_LANG_STRING_CLASS_NAME || $chanwMacroName.length() == 0 )
        Not a String$BR 
        #stop
    #end
    
    #if( !$chanwDelimiter || $chanwDelimiter.class.name != $JAVA_LANG_STRING_CLASS_NAME )
        #set( $chanwDelimiter = '' ) ## default to empty string
    #end
    
    #if( $chanwDelimiter.length() &gt; 0 ) ## there is a delimiter passed in
        #if( $chanwMacroName.indexOf( $chanwDelimiter ) &lt; 0 ) ## the delimiter does not exist
            #set( $chanwConvertToPascalCase = $globalApacheWordUtils.capitalize( $chanwMacroName ) )
        #else
            #set( $chanwMacroName = $chanwMacroName.replaceAll( $chanwDelimiter, ' ' ) ) ## replace delimiters with spaces
            #set( $chanwMacroName = $globalApacheWordUtils.capitalize( $chanwMacroName ) ) ## capitalize words
            #set( $chanwConvertToPascalCase = $chanwMacroName.replaceAll( ' ', '' ) ) ## remove spaces
        #end
    #else ## no delimiter passed in
        #set( $chanwConvertToPascalCase = $globalApacheWordUtils.capitalize( $chanwMacroName ) )
    #end
#end
    </convert-to-pascal-case-code>

    <generate-macro-foreach>
#foreach( $macro_name in $-list_name- )
    #set( $chanw_foreach_statement = $-code_name-.replaceAll( "-macro_name-", $macro_name ) )
    #evaluate( $chanw_foreach_statement )
#end
    </generate-macro-foreach>
    
    <get-file-path-code>
#*
Gets the valid file path or the default path. Invoke this macro in double quotes
in a set directive. Created by Peter.
Example:

#set( $myFile = "#chanwGetFilePath( 'images/computer-people-700x350.jpg' 'thomas-test' 'images/default.jpg' )" )
*#
#macro( chanwGetFilePath $file $site $default )
    #if( $_PropertyTool.isNull( $_.locateFile( $file, $site ) ) )
        $default
    #else
        $file
    #end
#end
    </get-file-path-code>

    <get-folder-contained-asset-name-code>
#macro( chanwGetFolderContainedAssetName $asset )
    #set( $chanwPathSegments = $asset.Identifier.Path.PathSegments )
    #set( $lastIndex = $chanwPathSegments.size() - 1 )
    #set( $chanwGetFolderContainedAssetName = $chanwPathSegments.get( $lastIndex ) )
#end
    </get-folder-contained-asset-name-code>

    <get-list-reversed-code>
#*
Returns the list in reversed order.
*#
#macro( chanwGetListReversed $chanwList )
    #set( $chanwGetListReversed = [] )
    
    #if( $chanwList.Class.Name == $JAVA_UTIL_ARRAY_LIST_CLASS_NAME -aa- $chanwList.size() &gt; 0 )
        #set( $chanwEndIndex = $chanwList.size() - 1 )
        #foreach( $num in [ $chanwEndIndex..0 ] )
            #set( $void = $chanwGetListReversed.add( $chanwList.get( $num ) ) )
        #end
    #end
#end
    </get-list-reversed-code>
    
    <get-map-key-value-reversed-code>
#*
Returns the map with keys as values, and values as keys.
This macro assumes that the values are unique. Else later values, when treated as keys,
overwrite earlier values.
*#
#macro( chanwGetMapKeyValueReversed $chanwMap )
    #set( $chanwGetMapKeyValueReversed = {} )
    
    #if( ( $chanwMap.Class.Name == $JAVA_UTIL_LINKEDHASHMAP_CLASS_NAME || $chanwMap.Class.Name == $JAVA_UTIL_HASHMAP_CLASS_NAME )
        -aa- $chanwMap.size() &gt; 0 )
        #set( $chanwKeySet = $chanwMap.keySet() )
        #foreach( $key in $chanwKeySet )
            #set( $void = $chanwGetMapKeyValueReversed.put( $chanwMap.get( $key ), $key ) )
        #end
    #end
#end    
    </get-map-key-value-reversed-code>
    
    <get-node-values-code>
#*
Dynamically creates variables assigned with values.
*#
#macro( chanwGetNodeValues $node $map )
    #foreach( $var in $map.keySet() )
        #if( $_XPathTool.selectSingleNode( $node, $map[ $var ] ) )
            #set( $chanwNodeValue = $_EscapeTool.xml( $_XPathTool.selectSingleNode( $node, $map[ $var ] ).value ) )
        #else
            #set( $chanwNodeValue = "" )
        #end        
        #set( $chanwSetVarValStatement = '#' + 'chanwSetVariable(' + "'$var' " + "'')" )
        #set( $chanwSetVarValStatement = '#' + 'chanwSetVariable(' + "'$var' " + "'$chanwNodeValue')" )
        #evaluate( $chanwSetVarValStatement )
    #end
#end
    </get-node-values-code>

    <get-node-sets-code>
#*
Dynamically creates variables assigned with node sets.
*#
#macro( chanwGetNodeSets $node $map )
    #set( $chanwNameNodesMap = {} )
    #foreach( $var in $map.keySet() )
        #set( $chanwNodeSet = $_XPathTool.selectNodes( $node, $map[ $var ] ) )
        #if( $_PropertyTool.isNull( $chanwNodeSet ) )
            #set( $chanwNodeSet = "" )
        #end
        #set( $void = $chanwNameNodesMap.put( $map[ $var ], $chanwNodeSet ) )
        #set( $chanwSetVarValStatement = '#' + "set(" + $_EscapeTool.D + "$var = " + 
            $_EscapeTool.D + "chanwNameNodesMap[" + $_EscapeTool.D + "map["+ "'$var']])" )
        #evaluate( $chanwSetVarValStatement )
    #end
#end
    </get-node-sets-code>

    <index-block-macro>
#macro( -macro_name- $-node_type-Node )
    #if( !$-node_type-Node )
        The -node_type- element is not defined.$BR
    #elseif( $-node_type-Node.name != $-element_name- )
        Not a/an -node_type- element!!!$BR
        #stop
    #end
    #chanwGetNodeValues( $-node_type-Node $-map_name- )
#end
    </index-block-macro>
    
    <invoke-macro-code>
#*
Invokes a macro with the name and parameters passed in.
Example:

#set( $file    = 'images/computer-people-700x350.jpg' )
#set( $site    = 'thomas-test' )
#set( $default = 'images/default.jpg' )
#set( $myFile  = "#chanwInvokeMacro('chanwGetFilePath' ['file', 'site', 'default'] )" )
*#
#macro( chanwInvokeMacro $chanwMacroName $chanwMacroParams )
    #if( $chanwMacroName.class.name == $JAVA_LANG_STRING_CLASS_NAME )
        #set( $chanwStatement = "#$chanwMacroName(" )
    
        #if( $chanwMacroParams.class.name == $JAVA_UTIL_ARRAY_LIST_CLASS_NAME )
            #if( $chanwMacroParams.size() &gt; 0 )
                #foreach( $chanwMacroParam in $chanwMacroParams )
                    #if( $chanwMacroParam.class.name == $JAVA_LANG_STRING_CLASS_NAME )
                        #set( $chanwStatement = $chanwStatement + "$" + $chanwMacroParam + " " )
                    #end
                #end
            #end
        #end
    
        #set( $chanwStatement = $chanwStatement.trim() )
        #set( $chanwStatement = $chanwStatement + ")" )
        #evaluate( $chanwStatement )
    #end
#end
    </invoke-macro-code>

    <multi-group>
#macro(-macro_name- $systemDataStructure $region)
    #set($groupType=$systemDataStructure.getChild('choose-type').value)
    #set($groupRegion=$systemDataStructure.getChild('choose-region').value)
    #set($groupToBeProcessed=$systemDataStructure.getChild("${groupType}-group"))
    #chanwConvertToPascalCase($groupType '-')
    #set($macroName=$MACRO_PREFIX+$chanwConvertToPascalCase+'Group')
    #if(!$_PropertyTool.isNull($region))
        #set($blockRegion=$region)
        #chanwInvokeMacro($macroName ['groupToBeProcessed','blockRegion'])
    #else
        #chanwInvokeMacro($macroName ['groupToBeProcessed'])
    #end
#end     
    </multi-group>
    
    <page-config>
#set( $-block_content- = $_XPathTool.selectSingleNode( $page, 'system-data-structure/page-config-group/-node_name-/content' ) )
#if( !$_PropertyTool.isNull( $-block_content- ) )
-lt-div id="-div_id-"-gt-
        #processBlockChooser( $-block_content- )
-lt-/div-gt-
    #end
    </page-config>
    
    <processBlockChooser>
#*
Processes a block chooser or a region.
When it is a region, what is passed in is a Document object.
Otherwise, it is an Element whose name is content.
Why parent of the root element is passed in: a text block may not have a root element.
*#
#macro( processBlockChooser $content )
    #if( $content.class.name == $ORG_JDOM_DOCUMENT_CLASS_NAME )
        #set( $contentChildren = $content.getContent() )
    #else
        #set( $contentChildren = $content.getChildren() )
    #end
    
    #if( $contentChildren.size() == 0 )
        $_SerializerTool.serialize( $content, true )  ## plain text or code
    #elseif( $contentChildren.size() &gt; 0 )
        #set( $firstChild = $contentChildren.get( 0 ) )
        #set( $childName  = $firstChild.name )
        #set( $childPath  = $content.getParent().getChild( 'path' ).value )
    
        #if( $childName == $cascadeXML_ELEMENT_SYSTEM_DATA_STRUCTURE )
            #processDataDefinitionBlock( $firstChild )
        #elseif( $childName == $cascadeXML_ELEMENT_SYSTEM_INDEX_BLOCK )
            #processIndexBlock( $firstChild )
        #else
            #set( $blockName = $childPath )
            #set( $lastIndexOfSlash = $blockName.lastIndexOf( '/' ) + 1 )
                
            #if( $lastIndexOfSlash &gt; -1 )
                #set( $blockName = $blockName.substring( $lastIndexOfSlash ) )
                   
                ## text block containing html markups
                #if( $blockName.endsWith( 'Text' ) || $blockName.endsWith( 'text' ) ) 
                    $_SerializerTool.serialize( $content, true )
                ## XML blocks containing instructions
                #elseif( $blockName.endsWith( 'Script' ) || $blockName.endsWith( 'script' )  )
                    #chanwInvokeMacro( "processScript" [ "firstChild" ] )
                ## preferably having -xml, -feed suffixes
                #else
                    #chanwConvertToPascalCase( $blockName "-" )
                    #set( $macroName = $MACRO_PREFIX + $chanwConvertToPascalCase )
                    #chanwInvokeMacro( $macroName [ "firstChild" ] )
                #end
            #end
        #end
    #end
#end
    </processBlockChooser>
    
    <processDataDefinitionBlock>
#*
Processes a data definition block with type information.
The type is turned into a macro name.
*#
#macro( processDataDefinitionBlock $systemDataStructure )
    #set( $isDisplay = $systemDataStructure.getChild( 'display' ).value )
    
    #if( $isDisplay.toLowerCase() == 'yes' )
        #set( $type = $systemDataStructure.getChild( 'block-type' ).value )
        
        #if( $type )
            #chanwConvertToPascalCase( $type "-" )
            #set( $macroName = $MACRO_PREFIX + $chanwConvertToPascalCase )
            #chanwInvokeMacro( $macroName [ "systemDataStructure" ] )
        #else
            No type information available in the data definition block.$BR
        #end
    #else
        Cannot process the data definition block.$BR
    #end
#end
    </processDataDefinitionBlock>
    
    <processIndexBlock>
#*
Processes an index block.
The name of the block is turned into a macro name.
*#
#macro( processIndexBlock $firstChild )
    #set( $blockName = $firstChild.getAttribute( 'name' ).value )
    #chanwConvertToPascalCase( $blockName "-" )
    #set( $macroName = $MACRO_PREFIX + $chanwConvertToPascalCase )
    #chanwInvokeMacro( $macroName [ "firstChild" ] )
#end
    </processIndexBlock>
    
    <processParams>
## Note that the global variable $chanwStatement is passed in
#macro( processParams $chanwStatement $params )
    #set( $paramsChildren = $params.getChildren() )
        		
	#if( $paramsChildren.size() &gt; 0 )
		#set( $chanwStatement = $chanwStatement + "(" )

		#foreach( $child in $paramsChildren )
			#if( $child.Name == "param" )
				#if( $child.Value.trim() != "" )
					#set( $chanwStatement = $chanwStatement + "'" + $child.Value.trim() + "' " )
				#end
			#elseif( $child.Name == "variable" )
				#if( $child.Value.trim() != "" )
					#set( $chanwStatement = $chanwStatement + "$" + $child.Value.trim() + " " )
				#end
			#elseif( $child.Name == "list" )
				#set( $chanwListChildren = $child.getChildren() )
		
				#if( $chanwListChildren.size() &gt; 0 )
					#set( $chanwStatement = $chanwStatement + "[" )

					#foreach( $list_child in $chanwListChildren )
						#if( $list_child.Name == "param" )
							#if( $list_child.Value.trim() != "" )
								#set( $chanwStatement = $chanwStatement + "'" + $list_child.Value.trim() + "', " )
							#end
						#elseif( $list_child.Name == "variable" )
							#if( $list_child.Value.trim() != "" )
								#set( $chanwStatement = $chanwStatement + "$" + $list_child.Value.trim() + ", " )
							#end
						#end
					#end
			
					## remove last comma
					#set( $chanwStatement = $chanwStatement.trim() )
				
					#if( $chanwStatement.endsWith( "," ) )
						#set( $end_index = $chanwStatement.length() - 1 )
						#set( $chanwStatement = $chanwStatement.substring( 0, $end_index ) )
					#end
					#set( $chanwStatement = " " + $chanwStatement + "]" )
				#end
			#elseif( $child.Name == "map" )
				#set( $chanwMapPairs = $child.getChildren() )
		
				#if( $chanwMapPairs.size() &gt; 0 )
					#set( $chanwStatement = $chanwStatement + "{" )
			
					#foreach( $map_pair in $chanwMapPairs )
						#set( $key = $map_pair.getChild( "key" ) )
						#set( $value = $map_pair.getChild( "value" ) )
				
						#if( $key )
							#set( $key = $key.Value.trim() )
						#end
					
						#if( $value )
							#set( $value = $value.Value.trim() )
						#end
				
						#if( $key != "" -aa- $value != "" )
							#set( $chanwStatement = $chanwStatement + "'$key':'$value'," )
						#end
					#end
					## remove last comma
					#set( $chanwStatement = $chanwStatement.trim() )
				
					#if( $chanwStatement.endsWith( "," ) )
						#set( $end_index = $chanwStatement.length() - 1 )
						#set( $chanwStatement = $chanwStatement.substring( 0, $end_index ) )
					#end
					#set( $chanwStatement = " " + $chanwStatement + "}" )
				#end
			#end
		#end

		#set( $chanwStatement = $chanwStatement + ")" )
	#end
#end
    </processParams>
    
    <processScript>
#*
Processes a script block. 
A script block, in the current implementation, is an XML block whose name must have a '-script' suffix.
The $firstChild is the scripts element.
*#
#macro( processScript $firstChild )
    ## get the scripts to be executed
    #set( $chanwScripts = $firstChild.getChildren( 'script' ) )
    
    ## loop through each script
    #if( $chanwScripts.size() &gt; 0 )
        #foreach( $script in $chanwScripts )
            ## first, check for redirect
            #set( $chanwRedirect = "" )
            #set( $chanwRedirect = $_XPathTool.selectSingleNode( $script, "redirect" ) )

            ## second, import the script
            #set( $chanwPath = "" )
            #set( $chanwPath = $script.getChild( "path" ) )
            
            #if( $chanwPath )
                #set( $chanwPath = $chanwPath.Value.trim() )
            #end
            
            ## make the path optional
            #if( $chanwPath != "" )
                #set( $chanwStatement = "#" + "import('$chanwPath')" )
                #evaluate( $chanwStatement )
            #end
            
            #set( $chanwStatement = "" )
            #set( $chanwMacros = $script.getChildren( "macro" ) )
            
            ## second, invoke each macro
            #if( $chanwMacros.size() &gt; 0 )
                #foreach( $macro in $chanwMacros )
        			#set( $chanwMacro = $macro.getChild( "name" ).Value.trim() )
					#set( $chanwStatement = "" )
					#set( $chanwStatement = "#" + $chanwMacro )
					
					#if( $chanwRedirect == "" )
						#set( $chanwParams = $macro.getChild( "params" ) )
                        #set( $chanwLoop   = $macro.getChild( "loop" ) )
			
						#if( !$_PropertyTool.isNull( $chanwParams ) )
                            ## pass in the global statement
                            #processParams( $chanwStatement $chanwParams )
                            #evaluate( $chanwStatement )
                        #elseif( !$_PropertyTool.isNull( $chanwLoop ) )
                            #set( $chanwParamsNodes = $chanwLoop.getChildren( "params" ) )
                            
                            #if( $chanwParamsNodes -aa- $chanwParamsNodes.size() &gt; 0 )
                                #foreach( $chanwParamsNode in $chanwParamsNodes )
                                    #set( $chanwStatement = "" )
    				                #set( $chanwStatement = "#" + $chanwMacro )
                                    #processParams( $chanwStatement $chanwParamsNode )
                                    ##$chanwStatement
                                    #evaluate( $chanwStatement )
                                #end
                            #end
						#end
					#else
						#set( $chanwStatement = $chanwStatement + "(" )
						#set( $chanwStatement = $chanwStatement + "$" + "firstChild" )
						#set( $chanwStatement = $chanwStatement + ")" )
                        #evaluate( $chanwStatement )
					#end
					##$chanwStatement
                #end
            #end
        #end
    #end
#end
    </processScript>
    
    <reinitialize-list-of-variables-code>
#*
Reinitializes the list of variables, all assigned the empty string.
The list passed in should be variable names without the dollar signs.
Example: 

#chanwReinitializeListOfVariables( [ "first", "second", "third" ] )
*#
#macro( chanwReinitializeListOfVariables $list )
    #if( $list.class.name != $JAVA_UTIL_ARRAY_LIST_CLASS_NAME )
        A list of variable names is required.
        #stop
    #end
    #if( $list.size() &gt; 0 )
        #foreach( $var in $list )
            #chanwSetVariable( $var "" )
        #end
    #end
#end
    </reinitialize-list-of-variables-code>

    <set-variable-code>
#*
Dynamically turns $var into a variable assigned with the value $val.
The value of $var should be a variable name without the dollar sign like "var".
Example: see chanwReinitializeListOfVariables
*#
#macro( chanwSetVariable $var $val )
    #if( $var.class.name != $JAVA_LANG_STRING_CLASS_NAME )
        The variable name $var is not acceptable
        #stop
    #end

    #if( $_PropertyTool.isNull( $val ) )
        #set( $chanwValue = "" )
    #elseif( $val.class.name == $JAVA_LANG_STRING_CLASS_NAME )
        #set( $chanwValue = $_EscapeTool.xml( $val ).trim() )
    ## this is an object
    #else
        #set( $chanwValue = 'val' )
    #end
    
    #if( !$chanwValue.equals( 'val' ) )
        #set( $chanwSetVarValStatement = '#' + "set(" + "$" + "$var = '$chanwValue')" )
    #else
        #set( $chanwSetVarValStatement = '#' + "set(" + "$" + "$var = $" + $chanwValue + ")" )
    #end

    #evaluate( $chanwSetVarValStatement )
#end
    </set-variable-code>

    <set-variable-to-non-empty-string-code>
#*
Selects the first non-empty string and assigns it to the variable.
Example: 

#chanwSetVariableToNonEmptyString( "var" [ " ", "", "content" ] )
## $var assigned "content" 
*#
#macro( chanwSetVariableToNonEmptyString $var $list )
    #if( $list.class.name != $JAVA_UTIL_ARRAY_LIST_CLASS_NAME )
        Not a list!!!$BR 
        #stop
    #end
    
    #set( $size = $list.size() )
    
    #if( $size == 0 )
        Empty list!!!$BR 
        #stop
    #end
    
    #set( $chanwValue = "" ) ## empty string, the last resort
    
    #foreach( $num in [ 1..$size ] )
        #set( $index = $num - 1 )
        
        #if( $list[ $index ].class.name != $JAVA_LANG_STRING_CLASS_NAME )
            Not a String!!!$BR 
            #stop
        #end
        
        #if( $list[ $index ].trim() != "" )
            #set( $chanwValue = $list[ $index ].trim() )
            #break
        #end
    #end
    
    #chanwSetVariable( $var $chanwValue )
#end
    </set-variable-to-non-empty-string-code>
    
    <single-group>
#macro(-dispatch_macro_name- $systemDataStructure)
    #set($groupToBeProcessed=$systemDataStructure.getChild('-single_group_name-'))
    #chanwConvertToPascalCase('-single_group_name-' '-')
    #set($macroName=$MACRO_PREFIX+$chanwConvertToPascalCase)
    #chanwInvokeMacro($macroName ['groupToBeProcessed'])
#end
    </single-group>
    
    <site-config>
#set( $contentVar = $_XPathTool.selectSingleNode( $page, 'system-data-structure/site-config-group/-node_name-/content' ) )
#if( !$_PropertyTool.isNull( $contentVar ) )
    #processBlockChooser( $contentVar )
#end
    </site-config>
    
    <site-map>
#macro( -macro_name- $systemIndexBlock )
    #chanwCreateSiteMap( $systemIndexBlock )
#end
    </site-map>
    
</global-velocity-code>