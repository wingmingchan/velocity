#*
《code》
《copyright》
Author: Wing Ming Chan
Copyright (c) 2017 Wing Ming Chan <chanw@upstate.edu>
MIT Licensed
Modification history:
5/2/2017 Format created.
《/copyright》
《documentation id=“top”》
《h2》Introduction《/h2》
《p》This format defines date- and time-related utilities. Two classes are
utilized in this format: 《code》java.time.LocalDate《/code》 and
《code》java.time.LocalDateTime《/code》. Two objects of these two types are
instantiated, and static methods can be invoked through them. Useful methods
of 《code》java.time.LocalDate《/code》:《/p》
《ul》
《li》《code》LocalDateTime atStartOfDay()《/code》《/li》
《li》《code》LocalDateTime atTime(int hour, int minute, int second, int nanoOfSecond)《/code》《/li》
《li》《code》String format(DateTimeFormatter formatter)《/code》《/li》
《li》《code》int getDayOfMonth()《/code》《/li》
《li》《code》int getDayOfYear()《/code》《/li》
《li》《code》Month getMonth()《/code》《/li》
《li》《code》int getMonthValue()《/code》《/li》
《li》《code》int getYear()《/code》《/li》
《li》《code》int lengthOfMonth()《/code》《/li》
《li》《code》int lengthOfYear()《/code》《/li》
《li》《code》LocalDate minusDays(long daysToSubtract)《/code》《/li》
《li》《code》LocalDate minusMonths(long monthsToSubtract)《/code》《/li》
《li》《code》LocalDate minusYears(long yearsToSubtract)《/code》《/li》
《li》《code》LocalDate plusDays(long daysToAdd)《/code》《/li》
《li》《code》LocalDate plusMonths(long monthsToAdd)《/code》《/li》
《li》《code》LocalDate plusYears(long yearsToAdd)《/code》《/li》
《li》《code》LocalDate withDayOfMonth(int dayOfMonth)《/code》《/li》
《li》《code》LocalDate withDayOfYear(int dayOfYear)《/code》《/li》
《li》《code》LocalDate withMonth(int month)《/code》《/li》
《li》《code》LocalDate withYear(int year)《/code》《/li》
《/ul》
《p》Useful methods of 《code》java.time.LocalDateTime《/code》:《/p》
《ul》
《li》《code》String format(DateTimeFormatter formatter)《/code》《/li》
《li》《code》int getDayOfMonth()《/code》《/li》
《li》《code》int getDayOfYear()《/code》《/li》
《li》《code》int getHour()《/code》《/li》
《li》《code》int getMinute()《/code》《/li》
《li》《code》Month getMonth()《/code》《/li》
《li》《code》int getMonthValue()《/code》《/li》
《li》《code》int getNano()《/code》《/li》
《li》《code》int getSecond()《/code》《/li》
《li》《code》int getYear()《/code》《/li》
《li》《code》boolean isAfter(ChronoLocalDateTime<?> other)《/code》《/li》
《li》《code》boolean isBefore(ChronoLocalDateTime<?> other)《/code》《/li》
《li》《code》LocalDateTime minusDays(long days)《/code》《/li》
《li》《code》LocalDateTime minusHours(long hours)《/code》《/li》
《li》《code》LocalDateTime minusMinutes(long minutes)《/code》《/li》
《li》《code》LocalDateTime minusMonths(long months)《/code》《/li》
《li》《code》LocalDateTime minusNanos(long nanos)《/code》《/li》
《li》《code》LocalDateTime minusSeconds(long seconds)《/code》《/li》
《li》《code》LocalDateTime minusYears(long years)《/code》《/li》
《li》《code》static LocalDateTime of(int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond)《/code》《/li》
《li》《code》LocalDateTime plusDays(long days)《/code》《/li》
《li》《code》LocalDateTime plusHours(long hours)《/code》《/li》
《li》《code》LocalDateTime plusMinutes(long minutes)《/code》《/li》
《li》《code》LocalDateTime plusMonths(long months)《/code》《/li》
《li》《code》LocalDateTime plusNanos(long nanos)《/code》《/li》
《li》《code》LocalDateTime plusSeconds(long seconds)《/code》《/li》
《li》《code》LocalDateTime plusYears(long years)《/code》《/li》
《li》《code》LocalDate toLocalDate()《/code》《/li》
《li》《code》LocalTime toLocalTime()《/code》《/li》
《li》《code》LocalDateTime withDayOfMonth(int dayOfMonth)《/code》《/li》
《li》《code》LocalDateTime withDayOfYear(int dayOfYear)《/code》《/li》
《li》《code》LocalDateTime withHour(int hour)《/code》《/li》
《li》《code》LocalDateTime withMinute(int minute)《/code》《/li》
《li》《code》LocalDateTime withMonth(int month)《/code》《/li》
《li》《code》LocalDateTime withNano(int nanoOfSecond)《/code》《/li》
《li》《code》LocalDateTime withSecond(int second)《/code》《/li》
《li》《code》LocalDateTime withYear(int year)《/code》《/li》
《/ul》
《/documentation》
*#
#import( '/formats/library/velocity/chanw_global_values' )
#*
《global-variables》
*#
#chanwGetMethodByClassNameMethodNameParamTypes( "java.time.LocalDate" "now" [] )
#set( $chanwLocalDateNow = $chanwGetMethodByClassNameMethodNameParamTypes.invoke( null ) )
#chanwGetMethodByClassNameMethodNameParamTypes( "java.time.LocalDateTime" "now" [] )
#set( $chanwLocalDateTimeNow = $chanwGetMethodByClassNameMethodNameParamTypes.invoke( null ) )

#set( $chanwDateTimeGlobalVariables = [
    "chanwLocalDateNow",
    "chanwLocalDateTimeNow"
] )
#*
《/global-variables》
《documentation》
《code》#chanwLocalDateFromCalendar( $cal )《/code》
《p》Returns a 《code》LocalDate《/code》 object based on the data from the
《code》GregorianCalendar《/code》 object 《code》$cal《/code》.《/p》
《pre》
#chanwLocalDateFromCalendar( $_DateTool.SystemCalendar )
$chanwLocalDateFromCalendar.Year
$chanwLocalDateFromCalendar.MonthValue
《/pre》
《/documentation》
《macro id=“chanwLocalDateFromCalendar”》
*#
#macro( chanwLocalDateFromCalendar $cal )
    #if( $cal.Class.Name != $JAVA_UTIL_GREGORIAN_CALENDAR_CLASS_NAME )
        A GregorianCalendar object is required.
        #stop
    #end
    
    #set( $chanwCalendar = $cal )
    #set( $chanwMonthInt = $chanwCalendar.get( $chanwMonthField ) + 1 )
    #set( $chanwLocalDateFromCalendar = $chanwLocalDateNow.of(
        $chanwCalendar.get( $chanwYearField ), $chanwMonthInt, $chanwCalendar.get( $chanwDayField ) ) )
#end
#*
《/macro》
《documentation》
《code》#chanwLocalDateFromDate( $date )《/code》
《p》Returns a 《code》LocalDate《/code》 object based on the data from the
《code》Date《/code》 object 《code》$date《/code》.《/p》
《pre》
#chanwLocalDateFromDate( $_DateTool.SystemDate )
$chanwLocalDateFromDate.Year
$chanwLocalDateFromDate.MonthValue
《/pre》
《/documentation》
《macro id=“chanwLocalDateFromDate”》
*#
#macro( chanwLocalDateFromDate $date )
    #if( $date.Class.Name != $JAVA_UTIL_DATE_CLASS_NAME )
        A Date object is required.
        #stop
    #end
    
    #chanwLocalDateParseTimestampString( $date.Time )
    #set( $chanwLocalDateFromDate = $chanwLocalDateParseTimestampString )
#end
#*
《/macro》
《documentation》
《code》#chanwLocalDateFromTimestampString( $str )《/code》
《p》Parses the string and returns the corresponding 《code》LocalDate《/code》 object.
The string can be a timestamp string or a 《code》Long《/code》 object storing the
timestamp.《/p》
《pre》
#chanwLocalDateFromTimestampString( "1508904000000" )
$chanwLocalDateParseTimestampString.Year
#chanwConvertToPascalCase( $chanwLocalDateParseTimestampString.Month.toString() )
$chanwConvertToPascalCase
$chanwLocalDateParseTimestampString.DayOfMonth
《/pre》
《/documentation》
《macro id=“chanwLocalDateFromTimestampString”》
*#
#macro( chanwLocalDateFromTimestampString $str )
    #if( !$str )
        A timestamp string is required.
        #stop
    #end
    
    #set( $chanwTimestampString = $str )
    
    #if( $str.Class.Name != $JAVA_LANG_STRING_CLASS_NAME )
        #set( $chanwTimestampString = $chanwTimestampString + "" )
    #end
    
    #set( $chanwCalendar = $_DateTool.toCalendar( $_DateTool.getDate( $chanwTimestampString ) ) )
    #chanwLocalDateFromCalendar( $chanwCalendar )
    #set( $chanwLocalDateFromTimestampString = $chanwLocalDateFromCalendar )
#end
#*
《/macro》
《documentation》
《code》#chanwLocalDateOfYearMonthDay( $year $month $day )《/code》
《p》Returns a 《code》LocalDate《/code》 object storing the input values.《/p》
《pre》
#chanwLocalDateOfYearMonthDay( 2017 5 1 )
$chanwLocalDateOfYearMonthDay.Month ## MAY
《/pre》
《/documentation》
《macro id=“chanwLocalDateOfYearMonthDay”》
*#
#macro( chanwLocalDateOfYearMonthDay $year $month $day )
    #set( $chanwLocalDateOfYearMonthDay = $chanwLocalDateNow.of( $year, $month, $day ) )
#end
#*
《/macro》
《documentation》
《code》#chanwLocalDateParseYearMonthDayString( $str )《/code》
《p》Parses the string and returns the corresponding 《code》LocalDate《/code》 object.
The string should be of the format 《code》yyyy-mm-dd《/code》.《/p》
《pre》
#chanwLocalDateParseYearMonthDayString( "2017-05-01" )
$chanwLocalDateParseYearMonthDayString.Year
《/pre》
《/documentation》
《macro id=“chanwLocalDateParseYearMonthDayString”》
*#
#macro( chanwLocalDateParseYearMonthDayString $str )
    #set( $chanwLocalDateParseYearMonthDayString = $chanwLocalDateNow.parse( $str ) )
#end
#*
《/macro》
《documentation》
《code》#chanwLocalDateToCalendar( $dt )《/code》
《p》Converts a 《code》LocalDate《/code》 object to a 《code》GregorianCalendar《/code》 object.《/p》
《pre》
#chanwLocalDateToCalendar( $chanwLocalDateNow )
$chanwLocalDateToCalendar
《/pre》
《/documentation》
《macro id=“chanwLocalDateToCalendar”》
*#
#macro( chanwLocalDateToCalendar $dt )
    #if( $dt.Class.Name != $JAVA_TIME_LOCAL_DATE_CLASS_NAME )
        A LocalDate object is required.
        #stop
    #end
    
    #set( $chanwMonthValue = $dt.MonthValue - 1 )
    #set( $chanwLocalDateToCalendar = $_DateTool.Calendar )
    $chanwLocalDateToCalendar.set( $dt.Year, $chanwMonthValue, $dt.DayOfMonth )
#end
#*
《/macro》
《documentation》
《code》#chanwLocalDateToDate( $dt )《/code》
《p》Converts a 《code》LocalDate《/code》 object to a 《code》Date《/code》 object.《/p》
《pre》
#chanwLocalDateToDate( $chanwLocalDateNow )
$chanwLocalDateToDate
《/pre》
《/documentation》
《macro id=“chanwLocalDateToDate”》
*#
#macro( chanwLocalDateToDate $dt )
    #if( $dt.Class.Name != $JAVA_TIME_LOCAL_DATE_CLASS_NAME )
        A LocalDate object is required.
        #stop
    #end
    
    #chanwLocalDateToCalendar( $dt )
    #set( $chanwLocalDateToDate = $_DateTool.toDate( $chanwLocalDateToCalendar ) )
#end
#*
《/macro》
《documentation》
《code》#chanwLocalDateTimeFromCalendar( $cal )《/code》
《p》Returns a 《code》LocalDateTime《/code》 object based on the data from the
《code》GregorianCalendar《/code》 object 《code》$cal《/code》.《/p》
《pre》
#chanwLocalDateTimeToCalendar( $chanwLocalDateTimeNow )
#chanwLocalDateTimeFromCalendar( $chanwLocalDateTimeToCalendar )
$chanwLocalDateTimeNow
$chanwLocalDateTimeFromCalendar

#chanwLocalDateTimeToDate( $chanwLocalDateTimeFromCalendar )
$chanwLocalDateTimeToDate
《/pre》
《/documentation》
《macro id=“chanwLocalDateTimeFromCalendar”》
*#
#macro( chanwLocalDateTimeFromCalendar $cal )
    #if( $cal.Class.Name != $JAVA_UTIL_GREGORIAN_CALENDAR_CLASS_NAME )
        A GregorianCalendar object is required.
        #stop
    #end

    #chanwLocalDateTimeFromDate( $_DateTool.toDate( $cal ) )
    #set( $chanwLocalDateTimeFromCalendar = $chanwLocalDateTimeFromDate )
#end
#*
《/macro》
《documentation》
《code》#chanwLocalDateTimeFromDate( $date )《/code》
《p》Returns a 《code》LocalDateTime《/code》 object based on the data from the
《code》Date《/code》 object 《code》$date《/code》.《/p》
《pre》
#chanwLocalDateTimeToDate( $chanwLocalDateTimeNow )
#chanwLocalDateTimeFromDate( $chanwLocalDateTimeToDate )
$chanwLocalDateTimeNow
$chanwLocalDateTimeFromDate
《/pre》
《/documentation》
《macro id=“chanwLocalDateTimeFromDate”》
*#
#macro( chanwLocalDateTimeFromDate $date )
    #if( $date.Class.Name != $JAVA_UTIL_DATE_CLASS_NAME )
        A Date object is required.
        #stop
    #end

    #set( $chanwCalendar = $_DateTool.toCalendar( $date ) )
    #set( $chanwLocalDateTimeFromDate = $chanwLocalDateTimeNow.withYear( $chanwCalendar.get( $chanwYearField ) ) )
    #set( $chanwMonthInt = $chanwCalendar.get( $chanwMonthField ) + 1 )
    #set( $chanwLocalDateTimeFromDate = $chanwLocalDateTimeFromDate.withMonth( $chanwMonthInt ) )
    #set( $chanwLocalDateTimeFromDate = $chanwLocalDateTimeFromDate.withDayOfMonth( $chanwCalendar.get( $chanwDayField ) ) )
    #set( $chanwHourInt = $chanwCalendar.get( $chanwHourField ) )
    
    #if( $chanwCalendar.get( $chanwAmPmField ) == $_FieldTool.in( 'java.util.Calendar' ).PM )
        #set( $chanwHourInt = $chanwHourInt + 12 )
    #end
    
    #set( $chanwLocalDateTimeFromDate = $chanwLocalDateTimeFromDate.withHour( $chanwHourInt ) )
    #set( $chanwLocalDateTimeFromDate = $chanwLocalDateTimeFromDate.withMinute( $chanwCalendar.get( $chanwMinuteField ) ) )
    #set( $chanwLocalDateTimeFromDate = $chanwLocalDateTimeFromDate.withSecond( $chanwCalendar.get( $chanwSecondField ) ) )
    #set( $chanwNanoLong = $chanwCalendar.get( $chanwMillisecondField ) * 1000000 )
    #set( $chanwLocalDateTimeFromDate = $chanwLocalDateTimeFromDate.withNano( $chanwNanoLong ) )
#end
#*
《/macro》
《documentation》
《code》#chanwLocalDateTimeFromTimestampString( $str )《/code》
《p》Parses the string and returns the corresponding 《code》LocalDateTime《/code》 object.
The string can be a timestamp string or a 《code》Long《/code》 object storing the
timestamp.《/p》
《pre》
#chanwLocalDateTimeToTimestampLong( $chanwLocalDateTimeNow )
#chanwLocalDateTimeFromTimestampString( $chanwLocalDateTimeToTimestampLong )
$chanwLocalDateTimeFromTimestampString
《/pre》
《/documentation》
《macro id=“chanwLocalDateTimeFromTimestampString”》
*#
#macro( chanwLocalDateTimeFromTimestampString $str )
    #if( !$str )
        A timestamp string is required.
        #stop
    #end
    
    #set( $chanwTimestampString = $str )
    
    #if( $str.Class.Name != $JAVA_LANG_STRING_CLASS_NAME )
        #set( $chanwTimestampString = $chanwTimestampString + "" )
    #end
    
    #set( $chanwDateObj = $_DateTool.getDate( $chanwTimestampString ) )
    #chanwLocalDateTimeFromDate( $chanwDateObj )
    #set( $chanwLocalDateTimeFromTimestampString = $chanwLocalDateTimeFromDate )
#end
#*
《/macro》
《documentation》
《code》#chanwLocalDateTimeOfYearMonthDayHourMinuteSecond《/code》
《p》Returns a 《code》LocalDateTime《/code》 object storing the input values.《/p》
《pre》
#chanwLocalDateTimeOfYearMonthDayHourMinuteSecond( 2017  5  2  15  23  12  436 )
$chanwLocalDateTimeOfYearMonthDayHourMinuteSecond
《/pre》
《/documentation》
《macro id=“chanwLocalDateTimeOfYearMonthDayHourMinuteSecond”》
*#
#macro( chanwLocalDateTimeOfYearMonthDayHourMinuteSecond $year $month $day $hour $minute $second $millisecond )
    #if( $millisecond )
        #set( $chanwNanoLong = $millisecond * 1000000 )
    #else
        #set( $chanwNanoLong = 0 )
    #end
    
    #set( $chanwLocalDateTimeOfYearMonthDayHourMinuteSecond = $chanwLocalDateTimeNow.of( $year, $month, $day, $hour, $minute, $second, $chanwNanoLong ) )
#end

#*
《/macro》
《documentation》
《code》#chanwLocalDateTimeParseYearMonthDayHourMinuteSecondString( $str )《/code》
《p》Parses the string and returns the corresponding 《code》LocalDateTime《/code》 object.
The string should be of the format 《code》yyyy-mm-ddThh:mm:ss《/code》.《/p》
《pre》
#chanwLocalDateTimeParseYearMonthDayHourMinuteSecondString( "2017-05-02T15:20:30" )
$chanwLocalDateTimeParseYearMonthDayHourMinuteSecondString
$chanwLocalDateTimeParseYearMonthDayHourMinuteSecondString.Second
《/pre》
《/documentation》
《macro id=“chanwLocalDateTimeParseYearMonthDayHourMinuteSecondString”》
*#
#macro( chanwLocalDateTimeParseYearMonthDayHourMinuteSecondString $str )
    #set( $chanwLocalDateTimeParseYearMonthDayHourMinuteSecondString = $chanwLocalDateTimeNow.parse( $str ) )
#end
#*
《/macro》
《documentation》
《code》#chanwLocalDateTimeToCalendar( $dt )《/code》
《p》Converts a 《code》LocalDateTime《/code》 object to a 《code》GregorianCalendar《/code》 object.《/p》
《pre》
#chanwLocalDateTimeToCalendar( $chanwLocalDateTimeNow )
$chanwLocalDateTimeToCalendar
《/pre》
《/documentation》
《macro id=“chanwLocalDateTimeToCalendar”》
*#
#macro( chanwLocalDateTimeToCalendar $dt )
    #if( $dt.Class.Name != $JAVA_TIME_LOCAL_DATE_TIME_CLASS_NAME )
        A LocalDateTime object is required.
        #stop
    #end

    #chanwLocalDateTimeToDate( $dt )
    #set( $chanwLocalDateTimeToCalendar = $_DateTool.toCalendar( $chanwLocalDateTimeToDate ) )
#end
#*
《/macro》
《documentation》
《code》#chanwLocalDateTimeToDate( $dt )《/code》
《p》Converts a 《code》LocalDateTime《/code》 object to a 《code》Date《/code》 object.《/p》
《pre》
#chanwLocalDateTimeToDate( $chanwLocalDateTimeNow )
$chanwLocalDateTimeToDate
《/pre》
《/documentation》
《macro id=“chanwLocalDateTimeToDate”》
*#
#macro( chanwLocalDateTimeToDate $dt )
    #if( $dt.Class.Name != $JAVA_TIME_LOCAL_DATE_TIME_CLASS_NAME )
        A LocalDateTime object is required.
        #stop
    #end

    #set( $chanwLocalDateTimeString = $dt.toString() )
    #set( $chanwDateFormat = $_DateTool.getDateFormat( 
        "y-M-d'T'H:m:s.S", $_DateTool.getLocale(), $_DateTool.getTimeZone() ) )
    #set( $chanwLocalDateTimeToDate = $chanwDateFormat.parse( $chanwLocalDateTimeString ) )
#end
#*
《/macro》
《documentation》
《code》#chanwLocalDateTimeToTimestampLong( $dt )《/code》
《p》Converts a 《code》LocalDateTime《/code》 object to a 《code》Long《/code》 object.《/p》
《pre》
#chanwLocalDateTimeToTimestampLong( $chanwLocalDateTimeNow )
$chanwLocalDateTimeToTimestampLong
《/pre》
《/documentation》
《macro id=“chanwLocalDateTimeToTimestampLong”》
*#
#macro( chanwLocalDateTimeToTimestampLong $dt )
    #if( $dt.Class.Name != $JAVA_TIME_LOCAL_DATE_TIME_CLASS_NAME )
        A LocalDateTime object is required.
        #stop
    #end

    #chanwLocalDateTimeToDate( $dt )
    #set( $chanwLocalDateTimeToTimestampLong = $chanwLocalDateTimeToDate.Time )
#end
#*
《/macro》
《documentation id=“bottom”》
《h2》References《/h2》
《ul》
《li》《a href=“https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html”》java.time.LocalDate《/a》 API《/li》
《li》《a href=“https://docs.oracle.com/javase/8/docs/api/java/time/LocalTime.html”》java.time.LocalTime《/a》 API《/li》
《li》《a href=“https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html”》java.time.LocalDateTime《/a》 API《/li》
《/ul》
《/documentation》
《/code》
*#