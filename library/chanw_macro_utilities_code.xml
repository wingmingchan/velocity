<macro-utilities-code>
    <file-comment>
#*
The format defines macros to provide general utilities and
to facilitate:
1. Generation of global variables with values
2. Invocation of macros
3. Generation of macros
*#
    </file-comment>
    
    <build-xml-content-root-code>
#*
Creates an org.jdom.Element object out of an XML string.
Example:

#set( $xml = "&lt;books&gt;&lt;book&gt;Harry Potter&lt;/book&gt;&lt;book&gt;Little Women&lt;/book&gt;&lt;/books&gt;" )
#chanwBuildXMLContentRoot( $xml )
#set( $contentRoot = $chanwBuildXMLContentRoot )
*#
#macro( chanwBuildXMLContentRoot $xml_string )
    #chanwGetConstructorByClassNameParamSize( 'java.io.StringReader' 1 )
    #set( $chanwConstructor = $chanwGetConstructorByClassNameParamSize )
    #set( $stringReader     = $chanwConstructor.newInstance( $xml_string ) )
    #set( $chanwBuildXMLContentRoot = $globalSAXBuilder.build( $stringReader ).rootElement )
#end
    </build-xml-content-root-code>

    <convert-to-pascal-case-code>
#*
Converts a string, possibly with delimiters, into Pascal case.
Example:

#chanwConvertToPascalCase( "xml-group" "-" )
$chanwConvertToPascalCase
## converting xml-group to XmlGroup
*#
#macro( chanwConvertToPascalCase $chanwMacroName $chanwDelimiter )
    #if( $chanwMacroName.class.name != $JAVA_LANG_STRING_CLASS_NAME || $chanwMacroName.length() == 0 )
        Not a String$BR 
        #stop
    #end
    
    #if( !$chanwDelimiter || $chanwDelimiter.class.name != $JAVA_LANG_STRING_CLASS_NAME )
        #set( $chanwDelimiter = '' ) ## default to empty string
    #end
    
    #if( $chanwDelimiter.length() &gt; 0 ) ## there is a delimiter passed in
        #if( $chanwMacroName.indexOf( $chanwDelimiter ) &lt; 0 ) ## the delimiter does not exist
            #set( $chanwConvertToPascalCase = $globalApacheWordUtils.capitalize( $chanwMacroName ) )
        #else
            #set( $chanwMacroName = $chanwMacroName.replaceAll( $chanwDelimiter, ' ' ) ) ## replace delimiters with spaces
            #set( $chanwMacroName = $globalApacheWordUtils.capitalize( $chanwMacroName ) ) ## capitalize words
            #set( $chanwConvertToPascalCase = $chanwMacroName.replaceAll( ' ', '' ) ) ## remove spaces
        #end
    #else ## no delimiter passed in
        #set( $chanwConvertToPascalCase = $globalApacheWordUtils.capitalize( $chanwMacroName ) )
    #end
#end
    </convert-to-pascal-case-code>

    <get-file-path-code>
#*
Gets the valid file path or the default path. Invoke this macro in double quotes
in a set directive. Created by Peter.
Example:

#set( $myFile = "#chanwGetFilePath( 'images/computer-people-700x350.jpg' 'thomas-test' 'images/default.jpg' )" )
*#
#macro( chanwGetFilePath $file $site $default )
    #if( $_PropertyTool.isNull( $_.locateFile( $file, $site ) ) )
        $default
    #else
        $file
    #end
#end
    </get-file-path-code>

    <get-node-values-code>
#*
Dynamically creates variables assigned with values.
*#
#macro( chanwGetNodeValues $node $map )
    #foreach( $var in $map.keySet() )
        #if( $_XPathTool.selectSingleNode( $node, $map[ $var ] ) )
            #set( $chanwNodeValue = $_EscapeTool.xml( $_XPathTool.selectSingleNode( $node, $map[ $var ] ).value ) )
        #else
            #set( $chanwNodeValue = "" )
        #end        
        #set( $chanwSetVarValStatement = '#' + 'chanwSetVariable(' + "'$var' " + "'')" )
        #set( $chanwSetVarValStatement = '#' + 'chanwSetVariable(' + "'$var' " + "'$chanwNodeValue')" )
        #evaluate( $chanwSetVarValStatement )
    #end
#end
    </get-node-values-code>

    <get-node-sets-code>
#*
Dynamically creates variables assigned with node sets.
*#
#macro( chanwGetNodeSets $node $map )
    #set( $chanwNameNodesMap = {} )
    #foreach( $var in $map.keySet() )
        #set( $chanwNodeSet = $_XPathTool.selectNodes( $node, $map[ $var ] ) )
        #if( $_PropertyTool.isNull( $chanwNodeSet ) )
            #set( $chanwNodeSet = "" )
        #end
        #set( $void = $chanwNameNodesMap.put( $map[ $var ], $chanwNodeSet ) )
        #set( $chanwSetVarValStatement = '#' + "set(" + $_EscapeTool.D + "$var = " + 
            $_EscapeTool.D + "chanwNameNodesMap[" + $_EscapeTool.D + "map["+ "'$var']])" )
        #evaluate( $chanwSetVarValStatement )
    #end
#end
    </get-node-sets-code>

    <invoke-macro-code>
#*
Invokes a macro with the name and parameters passed in.
Example:

#set( $file    = 'images/computer-people-700x350.jpg' )
#set( $site    = 'thomas-test' )
#set( $default = 'images/default.jpg' )
#set( $myFile  = "#chanwInvokeMacro('chanwGetFilePath' ['file', 'site', 'default'] )" )
*#
#macro( chanwInvokeMacro $chanwMacroName $chanwMacroParams )
    #if( $chanwMacroName.class.name == $JAVA_LANG_STRING_CLASS_NAME )
        #set( $chanwStatement = "#$chanwMacroName(" )
    
        #if( $chanwMacroParams.class.name == $JAVA_UTIL_ARRAY_LIST_CLASS_NAME )
            #if( $chanwMacroParams.size() &gt; 0 )
                #foreach( $chanwMacroParam in $chanwMacroParams )
                    #if( $chanwMacroParam.class.name == $JAVA_LANG_STRING_CLASS_NAME )
                        #set( $chanwStatement = $chanwStatement + "$" + $chanwMacroParam + " " )
                    #end
                #end
            #end
        #end
    
        #set( $chanwStatement = $chanwStatement.trim() )
        #set( $chanwStatement = $chanwStatement + ")" )
        #evaluate( $chanwStatement )
    #end
#end
    </invoke-macro-code>

    <reinitialize-list-of-variables-code>
#*
Reinitializes the list of variables, all assigned the empty string.
The list passed in should be variable names without the dollar signs.
Example: 

#chanwReinitializeListOfVariables( [ "first", "second", "third" ] )
*#
#macro( chanwReinitializeListOfVariables $list )
    #if( $list.class.name != $JAVA_UTIL_ARRAY_LIST_CLASS_NAME )
        A list of variable names is required.
        #stop
    #end
    #if( $list.size() &gt; 0 )
        #foreach( $var in $list )
            #chanwSetVariable( $var "" )
        #end
    #end
#end
    </reinitialize-list-of-variables-code>

    <set-variable-code>
#*
Dynamically turns $var into a variable assigned with the value $val.
The value of $var should be a variable name without the dollar sign like "var".
Example: see chanwReinitializeListOfVariables
*#
#macro( chanwSetVariable $var $val )
    #if( $var.class.name != $JAVA_LANG_STRING_CLASS_NAME )
        The variable name $var is not acceptable
        #stop
    #end

    #if( $_PropertyTool.isNull( $val ) )
        #set( $chanwValue = "" )
    #elseif( $val.class.name == $JAVA_LANG_STRING_CLASS_NAME )
        #set( $chanwValue = $_EscapeTool.xml( $val ).trim() )
    #else
        #set( $chanwValue = $val )
    #end
    
    #set( $chanwSetVarValStatement = '#set($' + "$var = '$chanwValue')" )
    #evaluate( $chanwSetVarValStatement )
#end
    </set-variable-code>

    <set-variable-to-non-empty-string-code>
#*
Selects the first non-empty string and assigns it to the variable.
Example: 

#chanwSetVariableToNonEmptyString( "var" [ " ", "", "content" ] )
## $var assigned "content" 
*#
#macro( chanwSetVariableToNonEmptyString $var $list )
    #if( $list.class.name != $JAVA_UTIL_ARRAY_LIST_CLASS_NAME )
        Not a list!!!$BR 
        #stop
    #end
    
    #set( $size = $list.size() )
    
    #if( $size == 0 )
        Empty list!!!$BR 
        #stop
    #end
    
    #set( $chanwValue = "" ) ## empty string, the last resort
    
    #foreach( $num in [ 1..$size ] )
        #set( $index = $num - 1 )
        
        #if( $list[ $index ].class.name != $JAVA_LANG_STRING_CLASS_NAME )
            Not a String!!!$BR 
            #stop
        #end
        
        #if( $list[ $index ].trim() != "" )
            #set( $chanwValue = $list[ $index ].trim() )
            #break
        #end
    #end
    
    #chanwSetVariable( $var $chanwValue )
#end
    </set-variable-to-non-empty-string-code>
    
    <test-macro-code>
#macro( chanwTestMacro )
    chanwTestMacro invoked.$BR
#end
    </test-macro-code>
</macro-utilities-code>