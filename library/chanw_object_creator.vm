#*
This format provides macros to retrieve constructors and create Java objects.

Examples:

#chanwGetObjectByClassName( 'org.apache.velocity.tools.generic.LinkTool' )
#set( $globalApacheLinkTool = $chanwGetObjectByClassName )

#chanwGetConstructorByClassNameParamSize( 'org.jdom.Text' 1 )
#set( $chanwConstructor = $chanwGetConstructorByClassNameParamSize )
#set( $globalJDOMText   = $chanwConstructor.newInstance( "" ) )

#chanwGetConstructorByClassNameParamTypeArray( 'java.lang.StringBuffer' [ 'int' ] )
#set( $chanwConstructor   = $chanwGetConstructorByClassNameParamTypeArray )
#set( $globalStringBuffer = $chanwConstructor.newInstance( 10000 ) )

#set( $value = "#chanwGetConstantValueByClassNameConstantName('com.hannonhill.cascade.velocity.CascadeComparisonDateTool' 'MILLIS_PER_YEAR')" )

#set( $paramList = [ '$_FieldTool.in( "java.lang.Double" ).TYPE' ] )
#chanwGetMethodByClassNameMethodNameParamTypes( 'java.lang.Math' 'abs' $paramList )
$chanwGetMethodByClassNameMethodNameParamTypes.invoke( null, -3 )

#set( $paramList = [ '$_FieldTool.in( "java.lang.Double" ).TYPE', '$_FieldTool.in( "java.lang.Double" ).TYPE' ] )
#chanwGetMethodByClassNameMethodNameParamTypes( 'java.lang.Math' 'min' $paramList )
$chanwGetMethodByClassNameMethodNameParamTypes.invoke( null, -3, -4 )

#set( $str = "" )
#set( $paramList = [ '$str.Class' ] )
#chanwGetMethodByClassNameMethodNameParamTypes( 'java.lang.String' 'concat' $paramList )
$chanwGetMethodByClassNameMethodNameParamTypes.invoke( "Hello, ", "World!" )

#chanwGetMethodByClassNameMethodNameParamTypes( 'java.lang.String' 'indexOf' $paramList )
$chanwGetMethodByClassNameMethodNameParamTypes.invoke( "Hello, ", 'e' )
*#

#*
Returns an object of the class, calling the default constructor.
*#
#import( '/formats/library/velocity/chanw_global_values' )

#macro( chanwGetObjectByClassName $chanwClassName )
    #set( $chanwGetObjectByClassName = "" ) ## reinitialize the global variable
    #chanwGetConstructorByClassNameParamSize( $chanwClassName 0 )
    #set( $chanwConstructor = $chanwGetConstructorByClassNameParamSize )
    #set( $chanwGetObjectByClassName = $chanwConstructor.newInstance() )
#end

#*
Returns the first constructor that accepts the specified number of parameters.
*#
#macro( chanwGetConstructorByClassNameParamSize $chanwClassName $chanwParamSize )
    #set( $chanwGetConstructorByClassNameParamSize = "" )
    #set( $chanwClassObj = $_PropertyTool.class.forName( $chanwClassName ) )
    #set( $constructors  = $chanwClassObj.getConstructors() )
  
    #foreach( $constructor in $constructors )
        #if( $constructor.getParameterTypes().size() == $chanwParamSize )
            #set( $chanwGetConstructorByClassNameParamSize = $constructor )
            #break
        #end
    #end
    #if( !$chanwGetConstructorByClassNameParamSize || 
        $chanwGetConstructorByClassNameParamSize == "" )
    Constructor not found$BR
    #end
#end

#*
Returns the constructor by matching the parameter list.
*#
#macro( chanwGetConstructorByClassNameParamTypeArray $chanwClassName $chanwTypeArray )
    #set( $chanwGetConstructorByClassNameParamTypeArray = "" )
    #set( $chanwClassObj = $_PropertyTool.class.forName( $chanwClassName ) )
    #set( $constructors  = $chanwClassObj.getConstructors() )
  
    #foreach( $constructor in $constructors )
        #set( $params_matched = true )
        #set( $param_types    = $constructor.getParameterTypes() )

        ## match the size
        #if( $param_types.size() == $chanwTypeArray.size() )
            ## match the types
            #foreach( $type in $param_types )
                #if( !$type.getName().equals( $chanwTypeArray[ $foreach.index ] ) )
                    #set( $params_matched = false )
                #end
            #end
            
            #if( $params_matched )
                #set( $chanwGetConstructorByClassNameParamTypeArray = $constructor )
                #break
            #end
        #end
    #end
#end

#*
Returns the field value of a field name defined in a class.
*#
#macro( chanwGetConstantValueByClassNameConstantName $chanwClassName $chanwConstantName )
    #set( $chanwClassObj  = $_.Class.forName( $chanwClassName ) )
    #set( $chanwFieldObj  = $chanwClassObj.getField( $chanwConstantName ) )
    #set( $chanwGetConstantValueByClassNameConstantName = $chanwFieldObj.get( null ) )
    $chanwGetConstantValueByClassNameConstantName
#end

#*
Returns the named method of a class.
The $chanwParamList must be a list of strings, representing class objects.
*#
#macro( chanwGetMethodByClassNameMethodNameParamTypes $chanwClassName $chanwMethodName $chanwParamList )
    #set( $chanwClassObj  = $_.Class.forName( $chanwClassName ) )
    #set( $chanwParamListString = $_DisplayTool.list( $chanwParamList, "," ) )
    #set( $chanwStmt = '#set($chanwGetMethodByClassNameMethodNameParamTypes = $chanwClassObj.getMethod( "' + $chanwMethodName + '"' )
    
    #if( $chanwParamListString != "" )
        #set( $chanwStmt = $chanwStmt + ',' + $chanwParamListString )
    #end
    
    #set( $chanwStmt = $chanwStmt + '))' )
    #evaluate( $chanwStmt )
#end