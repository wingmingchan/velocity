#*
《code》
《copyright》
Author: Wing Ming Chan
Copyright (c) 2017 Wing Ming Chan <chanw@upstate.edu>
MIT Licensed
Modification history:
《/copyright》
《documentation id=“top”》
《h2》Introduction《/h2》
《p》This format defines macros to process an index block.
Do not process the entire block. Instead, select 《code》system-page《/code》,
《code》system-folder《/code》, etc, and process each individual page/folder object
(《code》org.jdom.Element《/code》 objects).《/p》
《p》Example code:《/p》
《pre》
#import( 'formats/library/velocity/chanw_process_index_block' )

#set( $page = $_XPathTool.selectSingleNode( $contentRoot, "calling-page/system-page" ) )
#chanwProcessSystemPage( $page )
$S_PRE

$systemPageName
$systemPageIsPublished

$chanwDynamicMetatdataNameValuesMap.get( "exclude-from-menu" )
$E_PRE

#set( $folder = $_XPathTool.selectSingleNode( $contentRoot, "system-folder" ) )
#chanwProcessSystemFolder( $folder )
$S_PRE

$systemFolderName
$systemFolderIsPublished

$chanwDynamicMetatdataNameValuesMap.get( "exclude-from-left" )
$E_PRE
《/pre》
《p》Output:《/p》
《pre》
test-process-index-block
true

[Yes]

/
true

[]
《/pre》
《/documentation》
*#
#import( 'formats/library/velocity/chanw_global_values' )
#import( 'formats/library/velocity/chanw_global_macros' )
#*
《global-variables》
*#
#set( $chanwProcessIndexBlockGlobalVariables = [
    "chanwDynamicMetatdataNameValuesList",
    "chanwDynamicMetatdataNameValuesMap",
    "chanwDynamicMetatdataValues",
    "chanwMacroList",
    "chanwStmt",
    "chanwSystemFolderChildren",
    "indexBlockElementMap",
    "indexBlockMapKeys"
] )
#*
《/global-variables》
《documentation》
《code》#chanwProcessDynamicData( $dynamicDataNode )《/code》
《p》Processes the dynamic fields of the metadata and stores the name-value-list pairs in
a variable named 《code》$chanwDynamicMetatdataNameValuesList《/code》.《/p》
《/documentation》
《macro id=“chanwProcessDynamicData”》
*#
#macro( chanwProcessDynamicData $dynamicDataNode )
    #if( $dynamicDataNode.name != $cascadeXML_ELEMENT_DYNAMIC_METADATA )
        Not a dynamic data!!!$BR
        #stop
    #end
    
    #set( $chanwDynamicMetatdataNameValuesList = [] )
    #set( $chanwDynamicMetatdataValues         = $dynamicDataNode.getChildren( 'value' ) )
    
    #foreach( $value in $chanwDynamicMetatdataValues )
        #set( $void = $chanwDynamicMetatdataNameValuesList.add( $value.Value ) )
    #end
    
    #if( !$chanwDynamicMetatdataNameValuesMap )
        #set( $chanwDynamicMetatdataNameValuesMap = {} )
    #end
    
    #set( $void = $chanwDynamicMetatdataNameValuesMap.put( 
        $dynamicDataNode.getChild( 'name' ).Value,
        $chanwDynamicMetatdataNameValuesList ) )
#end
#*
《/macro》
《documentation》
There is code and a code template used to generate four macros: 《code》#chanwProcessRSSItem《/code》,
《code》#chanwProcessSystemBlock《/code》, 《code》#chanwProcessSystemFile《/code》, and 《code》#chanwProcessSystemSymlink《/code》.
《p》The four macros generated each creates a set of global variables. The variable names are defined in
《code》chanw_global_values《/code》. For example, the global variables associated with 《code》#chanwProcessSystemBlock《/code》
are defined as:《/p》
《pre》
#set( $systemBlockVarElementMap = {
        'systemBlockName':           $cascadeXML_ELEMENT_NAME,
        'systemBlockTitle':          $cascadeXML_ELEMENT_TITLE,
        'systemBlockSummary':        $cascadeXML_ELEMENT_SUMMARY,
        'systemBlockAuthor':         $cascadeXML_ELEMENT_AUTHOR,
        'systemBlockTeaser':         $cascadeXML_ELEMENT_TEASER,
        'systemBlockKeywords':       $cascadeXML_ELEMENT_KEYWORDS,
        'systemBlockDescription':    $cascadeXML_ELEMENT_DESCRIPTION,
        'systemBlockStartDate':      $cascadeXML_ELEMENT_START_DATE,
        'systemBlockEndDate':        $cascadeXML_ELEMENT_END_DATE,
        'systemBlockReviewDate':     $cascadeXML_ELEMENT_REVIEW_DATE,
        'systemBlockDisplayName':    $cascadeXML_ELEMENT_DISPLAY_NAME,
        'systemBlockPath':           $cascadeXML_ELEMENT_PATH,
        'systemBlockSite':           $cascadeXML_ELEMENT_SITE,
        'systemBlockCreatedBy':      $cascadeXML_ELEMENT_CREATED_BY,
        'systemBlockCreatedOn':      $cascadeXML_ELEMENT_CREATED_ON,
        'systemBlockLastModifiedBy': $cascadeXML_ELEMENT_LAST_MODIFIED_BY,
        'systemBlockLastModified':   $cascadeXML_ELEMENT_LAST_MODIFIED
    } )
《/pre》
《p》This means that after the macro 《code》#chanwProcessSystemBlock《/code》 is invoked, variables like
《code》$systemBlockName《/code》 will be populated with values from the 《code》system-block《/code》 element
being processed. Example:《/p》
《pre》
## because the macro #chanwProcessSystemBlock is generated,
## the test code must appear after the foreach structure below
#set( $block = $contentRoot.getChildren( "system-block" )[ 0 ] )
#chanwProcessSystemBlock( $block )
systemBlockName: $systemBlockName$BR
systemBlockPath: $systemBlockPath$BR
systemBlockSite: $systemBlockSite$BR
《/pre》
《p》Note that depending on the settings of an index block, indexed data may or may not contain
elements like 《code》last-modified《/code》. When an element is missing, the stored value of
its corresponding variable will be the empty string.《/p》
《/documentation》
《macro id=“generatedCode”》
*#
## generate macros that process rss item, system-block, system-file, system-symlink
#set( $indexBlockElementMap = {
    "chanwProcessRSSItem" :        [ "item",    "rssXML_ELEMENT_ITEM",               "rssItemVarElementMap",       "" ],
    "chanwProcessSystemBlock" :    [ "block",   "cascadeXML_ELEMENT_SYSTEM_BLOCK",   "systemBlockVarElementMap",   "systemBlockDynamicMetadata" ],
    "chanwProcessSystemFile" :     [ "file",    "cascadeXML_ELEMENT_SYSTEM_FILE",    "systemFileVarElementMap",    "systemFileDynamicMetadata" ],
    "chanwProcessSystemSymlink" :  [ "symlink", "cascadeXML_ELEMENT_SYSTEM_SYMLINK", "systemSymlinkVarElementMap", "systemSymlinkDynamicMetadata" ],
    "chanwProcessSystemPage" :     [ "page",    "cascadeXML_ELEMENT_SYSTEM_PAGE",    "systemPageVarElementMap",    "systemPageDynamicMetadata" ]
} )

#set( $indexBlockMapKeys = $indexBlockElementMap.keySet() )

#foreach( $macroName in $indexBlockMapKeys )
    #set( $chanwMacroList = $indexBlockElementMap[ $macroName ] )
    #set( $chanwStmt = $index_block_code.replaceAll( "-macro_name-", $macroName ).replaceAll(
        "-node_type-", $chanwMacroList[ 0 ] ).replaceAll( "-element_name-", $chanwMacroList[ 1 ] ).replaceAll(
        "-map_name-", $chanwMacroList[ 2 ] ).replaceAll( "-dm_name-", $chanwMacroList[ 3 ] ) )
    
    #evaluate( $chanwStmt )
#end
#*
《/macro》
《documentation》
《code》#chanwProcessSystemFolder( $folderNode )《/code》
《p》Processes a 《code》system-folder《/code》 object, stores values
in a set of variables, and processes the dynamic fields, if there are any.《/p》
《/documentation》
《macro id=“chanwProcessSystemFolder”》
*#
#macro( chanwProcessSystemFolder $folderNode )
    #if( !$folderNode )
        The folder element is not defined.$BR
    #elseif( $folderNode.name != $cascadeXML_ELEMENT_SYSTEM_FOLDER )
        $folderNode.name is not a folder element!!!$BR
        #stop
    #end
    #chanwGetNodeValues( $folderNode $systemFolderVarElementMap )
    #chanwGetNodeSets( $folderNode, { 
        'systemFolderDynamicMetadata':$cascadeXML_ELEMENT_DYNAMIC_METADATA, 
        'systemFolderSystemBlock':    $cascadeXML_ELEMENT_SYSTEM_BLOCK,
        'systemFolderSystemFile':     $cascadeXML_ELEMENT_SYSTEM_FILE,
        'systemFolderSystemFolder':   $cascadeXML_ELEMENT_SYSTEM_FOLDER,
        'systemFolderSystemPage':     $cascadeXML_ELEMENT_SYSTEM_PAGE,
        'systemFolderSystemSymlink':  $cascadeXML_ELEMENT_SYSTEM_SYMLINK } )
        
    #set( $chanwDynamicMetatdataNameValuesMap  = {} )
    
    #if( $systemFolderDynamicMetadata.size() > 0 )
        #foreach( $dmd in $systemFolderDynamicMetadata )
            #chanwProcessDynamicData( $dmd )
        #end
    #end
    
    #set( $chanwSystemFolderChildren = [] )
    
    #foreach( $child in $folderNode.Children )
        #if( $chanwFolderContainedAssets.contains( $child.name ) )
            #set( $void = $chanwSystemFolderChildren.add( $child ) )
        #end
    #end
#end
#*
《/macro》
《documentation id=“bottom”》
《/documentation》
《/code》
*#