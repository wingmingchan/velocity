#*doc
《code》
《copyright》
Author: Wing Ming Chan
Copyright (c) 2017 Wing Ming Chan <chanw@upstate.edu>
MIT Licensed
Modification history:
11/4/2017 Added $TREE_NODE_TEXT and related code
10/29/2017 Use $DefaultMutableTreeNodeConstructor defined in chanw_initialization.
10/27/2017 Rewritten chanwTraverseTreeBreadthFirst and chanwTraverseTreePreorder,
using Java Enumeration.
10/26/2017 Added test of ancestor to chanwSwapNodes.
10/25/2017 Added chanwSwapNodes.
10/23/2017 Format created.
《/copyright》

《documentation id=“top”》
《h2》Introduction《/h2》
《p》This format provides macros to work with trees. When an object is passed into the
macro named 《code》#chanwCreateNode《/code》, the object will be used as
the key, and the node created as the value, of an entry in the map named 《code》$chanwObjectNodeMap《/code》.
If the object passed in is a map, which contains a 《code》name《/code》 entry, then the value
of 《code》name《/code》 will be used as the key pointing to the node created. This facilitates quick access
of nodes using String keys like 《code》$chanwObjectNodeMap[ "html" ]《/code》.《/p》
《/documentation》
《import》
doc*###
#import( 'core/library/velocity/chanw/chanw_initialization' )
#*doc
《/import》
《global-variables》
doc*###
#set( $TREE_NODE_NAME      = "name" )
#set( $TREE_NODE_START_TAG = "startString" )
#set( $TREE_NODE_END_TAG   = "endString" )
#set( $TREE_NODE_CODE      = "code" )
#set( $TREE_NODE_TEXT      = "text" )
#*doc
《/global-variables》
《documentation》
《code》#chanwAddChildren( $node $list )《/code》
《p》Adds all the items in the list as children to the node.《/p》
《/documentation》
《macro id=“chanwAddChildren”》
doc*###
#macro( chanwAddChildren $node_chanwAddChildren $list_chanwAddChildren )
    #foreach( $child in $list_chanwAddChildren )
        #chanwCreateNode( $child )
        #set( $chanwObjectNodeMap[ $child ] = $chanwCreateNode )
        #set( $void = $node_chanwAddChildren.add( $chanwCreateNode ) )
        #if( $child.Children )
            #set( $chanwParent = $chanwCreateNode )
            #chanwAddChildren( $chanwParent $child.Children )
        #end
    #end
#end
#*doc
《/macro》
《documentation》
《code》#chanwCreateNode( $obj )《/code》
《p》Creates a node out of the supplied object. If the object is already a node, this macro
does not do anything.《/p》
《/documentation》
《macro id=“chanwCreateNode”》
doc*###
#macro( chanwCreateNode $obj_chanwCreateNode )
    #if( $obj_chanwCreateNode.Class.Name == $JAVAX_SWING_TREE_DEFAULT_MUTABLE_TREE_NODE_CLASS_NAME )
        #set( $chanwCreateNode = $obj_chanwCreateNode )
    #else
        #if( !$chanwObjectNodeMap )
            #set( $chanwObjectNodeMap = {} )
        #end
        #set( $chanwCreateNode = $DefaultMutableTreeNodeConstructor.newInstance( $obj_chanwCreateNode ) )
        #if( $obj_chanwCreateNode[ "name" ].Class.Name )
            #set( $chanwObjectNodeMap[ $obj_chanwCreateNode[ $TREE_NODE_NAME ] ] = $chanwCreateNode )
        #else
            #set( $chanwObjectNodeMap[ $obj_chanwCreateNode ] = $chanwCreateNode )
        #end
    #end
#end
#*doc
《/macro》
《documentation》
《code》#chanwCreateTree( $rootNode )《/code》
《p》Creates a tree out of the supplied object (which will be converted
into a node first).《/p》
《/documentation》
《macro id=“chanwCreateTree”》
doc*###
#macro( chanwCreateTree $rootNode_chanwCreateTree )
    #if( $rootNode_chanwCreateTree.Class.Name != $JAVAX_SWING_TREE_DEFAULT_MUTABLE_TREE_NODE_CLASS_NAME )
        #chanwCreateNode( $rootNode_chanwCreateTree )
        #set( $chanwRootNode = $chanwCreateNode )
    #else
        #set( $chanwRootNode = $rootNode_chanwCreateTree )
    #end
    #chanwGetConstructor( "javax.swing.tree.DefaultTreeModel" [ $_.Class.forName( $JAVAX_SWING_TREE_TREE_NODE_CLASS_NAME ) ] )
    #set( $chanwCreateTree = $chanwGetConstructor.newInstance( $chanwRootNode ) )
    #if( $rootNode_chanwCreateTree.Children )
        #chanwAddChildren( $chanwRootNode $rootNode_chanwCreateTree.Children )
    #end
#end
#*doc
《/macro》
《documentation》
《code》#chanwDisplayTree( $node )《/code》
《p》Displays a tree with its node names properly indented. This macro is provided mainly for debugging.《/p》
《/documentation》
《macro id=“chanwDisplayTree”》
doc*###
#macro( chanwDisplayTree $node_chanwDisplayTree )
#if( !$chanwDisplayTreeCounter )
#set( $chanwDisplayTreeCounter = 0 )
#else
#set( $chanwDisplayTreeCounter = $chanwDisplayTreeCounter + 1 )
#end
#set( $chanwSpace = "  " )
$node.UserObject[ $TREE_NODE_NAME ]
#if( $node_chanwDisplayTree.children() )
#foreach( $child in $node_chanwDisplayTree.children() )
#foreach( $num in [ 0 .. $chanwDisplayTreeCounter ] )$chanwSpace#end#chanwDisplayTree( $child )#end
#end
#if( $chanwDisplayTreeCounter > 0 )
#set( $chanwDisplayTreeCounter = $chanwDisplayTreeCounter - 1 )
#end
#end
#*doc
《/macro》
《documentation》
《code》#chanwDisplayTreeNodeRecursively( $node $stripRoot )《/code》
《p》Displays a tree with a specific structure, like an XHTML tree. If 《code》$stripRoot《/code》,
defaulted to 《code》false《/code》, is set to 《code》true《/code》, then the startString and
endString will not be output.《/p》
《/documentation》
《macro id=“chanwDisplayTreeNodeRecursively”》
doc*###
##
#macro( chanwDisplayTreeNodeRecursively $node_chanwDisplayTreeNodeRecursively $stripRoot_chanwDisplayTreeNodeRecursively )
#if( !$chanwDisplayTreeNodeRecursivelyCounter )
#set( $chanwDisplayTreeNodeRecursivelyCounter = 0 )
#else
#set( $chanwDisplayTreeNodeRecursivelyCounter = $chanwDisplayTreeNodeRecursivelyCounter + 1 )
#end
#if( ( $chanwDisplayTreeNodeRecursivelyCounter != 0 || $stripRoot_chanwDisplayTreeNodeRecursively != true ) && $node_chanwDisplayTreeNodeRecursively.UserObject[ $TREE_NODE_START_TAG ] )
$node_chanwDisplayTreeNodeRecursively.UserObject[ $TREE_NODE_START_TAG ]#end
#if( $node_chanwDisplayTreeNodeRecursively.UserObject[ $TREE_NODE_CODE ] )
#evaluate( $node_chanwDisplayTreeNodeRecursively.UserObject[ $TREE_NODE_CODE ] )#end
#if( $node_chanwDisplayTreeNodeRecursively.UserObject[ $TREE_NODE_TEXT ] )
$node_chanwDisplayTreeNodeRecursively.UserObject[ $TREE_NODE_TEXT ]#end
#if( $node_chanwDisplayTreeNodeRecursively.children() )
#foreach( $child in $node_chanwDisplayTreeNodeRecursively.children() )
#chanwDisplayTreeNodeRecursively( $child )
#end
#end
#if( ( $chanwDisplayTreeNodeRecursivelyCounter != 0 || $stripRoot_chanwDisplayTreeNodeRecursively != true ) && $node_chanwDisplayTreeNodeRecursively.UserObject[ $TREE_NODE_END_TAG ] )
$node_chanwDisplayTreeNodeRecursively.UserObject[ $TREE_NODE_END_TAG ]#end
#set( $chanwDisplayTreeNodeRecursivelyCounter = $chanwDisplayTreeNodeRecursivelyCounter - 1 )
#end
#*doc
《/macro》
《documentation》
《code》#chanwSwapNodes( $node1 $node2 )《/code》
《p》Swaps two nodes, both possibly the root nodes of subtrees.《/p》
《/documentation》
《macro id=“chanwSwapNodes”》
doc*###
#macro( chanwSwapNodes $node1_chanwSwapNodes $node2_chanwSwapNodes )
    #if( $node1_chanwSwapNodes.isNodeAncestor( $node2_chanwSwapNodes ) ||
         $node2_chanwSwapNodes.isNodeAncestor( $node1_chanwSwapNodes ) )
        Can't swap the two nodes.
        #break
    #end
    #set( $chanwParent1 = $node1_chanwSwapNodes.Parent )
    #set( $chanwIndex1  = $chanwParent1.getIndex( $node1_chanwSwapNodes ) )
    #set( $chanwParent2 = $node2_chanwSwapNodes.Parent )
    #set( $chanwIndex2  = $chanwParent2.getIndex( $node2_chanwSwapNodes ) )
    #set( $void = $chanwParent1.insert( $node2_chanwSwapNodes, $chanwIndex1 ) )
    #set( $void = $chanwParent2.insert( $node1_chanwSwapNodes, $chanwIndex2 ) )
#end
#*doc
《/macro》
《documentation》
《code》#chanwTraverseTreeBreadthFirst( $node $macroName $paramList )《/code》
《p》Traverses the tree using breadth first traversal, and applies the named macro, possibly
with a list of parameters, to every node visited.《/p》
《/documentation》
《macro id=“chanwTraverseTreeBreadthFirst”》
doc*###
#macro( chanwTraverseTreeBreadthFirst $node_chanwTraverseTreeBreadthFirst $macroName_chanwTraverseTreeBreadthFirst $paramList_chanwTraverseTreeBreadthFirst )
    #set( $chanwBFEnumeration = $node_chanwTraverseTreeBreadthFirst.breadthFirstEnumeration() )
    #set( $chanwParamList = [] )
    #set( $dummy = $chanwParamList.add( "node" ) )
    #if( $paramList_chanwTraverseTreeBreadthFirst.size() > 0 )
        #set( $dummy = $chanwParamList.addAll( $paramList_chanwTraverseTreeBreadthFirst ) )
    #end
    #foreach( $node in $chanwBFEnumeration )
        #chanwInvokeMacro( $macroName_chanwTraverseTreeBreadthFirst $chanwParamList )
    #end
#end
#*doc
《/macro》
《documentation》
《code》#chanwTraverseTreePreorder( $node $macroName $paramList )《/code》
《p》Traverses the tree using preorder traversal, and applies the named macro, possibly
with a list of parameters, to every node visited.《/p》
《/documentation》
《macro id=“chanwTraverseTreePreorder”》
doc*###
#macro( chanwTraverseTreePreorder $node_chanwTraverseTreePreorder $macroName_chanwTraverseTreePreorder $paramList_chanwTraverseTreePreorder )
    #set( $chanwPEnumeration = $node_chanwTraverseTreePreorder.preorderEnumeration() )
    #set( $chanwParamList = [] )
    #set( $dummy = $chanwParamList.add( "node" ) )
    #if( $paramList_chanwTraverseTreePreorder.size() > 0 )
        #set( $dummy = $chanwParamList.addAll( $paramList_chanwTraverseTreePreorder ) )
    #end
    #foreach( $node in $chanwPEnumeration )
        #chanwInvokeMacro( $macroName_chanwTraverseTreePreorder $chanwParamList )
    #end
#end
#*doc
《/macro》
《documentation id=“bottom”》
《/documentation》
《/code》
doc*###