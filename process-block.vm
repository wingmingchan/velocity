#import( 'formats/library/velocity/chanw_macro_utilities' )
#import( 'formats/library/velocity/upstate_process_dd_group' )
#import( 'formats/library/velocity/upstate_process_site_map' )

#*
Generates the required macros.
For meta-variables (variables to store macro names, group names, etc., use underscores for word boundaries.
For variables inside code, use camelCase.
*#

## These are single-group blocks, put block type info here, and do not use '-group' in type info.
## The group identifier should be {type-info}-group.
#set( $single_group_names = [ "wysiwyg", "instruction-block" ] )

## These are multi-group blocks, and put the required dispatch macro names here.
#set( $macro_names = [ "processMegablock", "processMultimedia", "processDesignerProBlock" ] )

## read the block and grab the code
#set( $global_velocity_code = $_.locateBlock( 
    "blocks/code/global-velocity-code" ).getXMLAsXMLElement().getChild( "global-velocity-code" ) )
#set( $single_group_code    = $global_velocity_code.getChild( "single-group" ).value )
#set( $multi_group_code     = $global_velocity_code.getChild( "multi-group" ).value )

#foreach( $single_group_name in $single_group_names )
    #chanwConvertToPascalCase( $single_group_name "-" )
	#set( $dispatch_macro_name = $MACRO_PREFIX + $chanwConvertToPascalCase )
	#set( $single_group_name   = $single_group_name + "-group" )
    #set( $chanw_statement     = $single_group_code.replaceAll( 
        "dispatch_macro_name", $dispatch_macro_name ).replaceAll( "single_group_name", $single_group_name ) )
    #evaluate( $chanw_statement )
#end

#foreach( $macro_name in $macro_names )
    #set( $chanw_statement = $multi_group_code.replaceAll( "macro_name", $macro_name ) )
    #evaluate( $chanw_statement )
#end

#*
Processes a data definition block with type information.
The type is turned into a macro name.
*#
#macro( processDataDefinitionBlock $systemDataStructure )
    #set( $isDisplay = $systemDataStructure.getChild( 'display' ).value )
    
    #if( $isDisplay.toLowerCase() == 'yes' )
        #set( $type = $systemDataStructure.getChild( 'block-type' ).value )
        #chanwConvertToPascalCase( $type "-" )
        #set( $macroName = $MACRO_PREFIX + $chanwConvertToPascalCase )
        #chanwInvokeMacro( $macroName [ "systemDataStructure" ] )
    #end
#end

#*
Processes an index block.
The name of the block is turned into a macro name.
*#
#macro( processIndexBlock $firstChild )
    #set( $blockName = $firstChild.getAttribute( 'name' ).value )
    #chanwConvertToPascalCase( $blockName "-" )
    #set( $macroName = $MACRO_PREFIX + $chanwConvertToPascalCase )
    #chanwInvokeMacro( $macroName [ "firstChild" ] )
#end

#* === process legacy blocks == *#
#macro( processPhpStaticInclude $systemDataStructure )
    #set( $groupToBeProcessed = $systemDataStructure.getChild( "block-group" ) )
    #chanwConvertToPascalCase( "block-group" "-" )
    #set( $macroName = $MACRO_PREFIX + $chanwConvertToPascalCase )
    #chanwInvokeMacro( $macroName [ "groupToBeProcessed" ] )
#end

#* === individual macro to process index blocks of various names == *#
#macro( processWsMapIndex $systemIndexBlock )
    #chanwCreateSiteMap( $systemIndexBlock )
#end

#macro( processSiteMapIndex $systemIndexBlock )
    #chanwCreateSiteMap( $systemIndexBlock )
#end

#*
Processes a block chooser.
*#
#macro( processBlockChooser $content )
    #set( $contentChildren = $content.getChildren() )
    
    #if( $contentChildren.size() == 0 )
        $_SerializerTool.serialize( $content, true )  ## plain text or code
    #elseif( $contentChildren.size() > 0 )
        #set( $firstChild = $content.getChildren().get( 0 ) )
        #set( $childName  = $firstChild.name )
        #set( $childPath  = $content.getParent().getChild( 'path' ).value )
    
        #if( $childName == 'system-data-structure' )
            #processDataDefinitionBlock( $firstChild )
        #elseif( $childName == 'system-index-block' )
            #processIndexBlock( $firstChild )
        #else
            #set( $blockName = $childPath )
            #set( $lastIndexOfSlash = $blockName.lastIndexOf( '/' ) + 1 )
                
            #if( $lastIndexOfSlash > -1 )
                #set( $blockName = $blockName.substring( $lastIndexOfSlash ) )
                   
                ## text block containing html markups
                #if( $blockName.endsWith( 'Text' ) || $blockName.endsWith( 'text' ) ) 
                    $_SerializerTool.serialize( $content, true )
                ## XML blocks containing instructions
                #elseif( $blockName.endsWith( 'Script' ) || $blockName.endsWith( 'script' )  )
                    #chanwInvokeMacro( "processScript" [ "firstChild" ] )
                ## preferably having -xml, -feed suffixes
                #else
                    #chanwConvertToPascalCase( $blockName "-" )
                    #set( $macroName = $MACRO_PREFIX + $chanwConvertToPascalCase )
                    #chanwInvokeMacro( $macroName [ "firstChild" ] )
                #end
            #end
        #end
    #end
#end