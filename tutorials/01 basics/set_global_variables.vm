#*
The #set directive either creates a global variable, or
assigns a new value to an exsiting global variable.
*#
#macro( echoGlobalVariable )
    $myVar
#end

#set( $myVar = 3 ) ## define the global variable $myVar

#echoGlobalVariable ## => 3

#macro( createGlobalVariable )
    #set( $newVar = 14 ) 
#end

## before the macro is invoked, $newVar is undefined
$newVar             ## => $newVar

## after the macro is invoked, the variable is defined and accessible outside
#createGlobalVariable
$newVar             ## => 14

## overwrite the local variable
#macro( redefineVariable $myVar2 )
    $myVar2    ## still local => 52
    #set( $myVar2 = "Hello" )
    $myVar2    ## become global => Hello
#end

#redefineVariable( 52 )

## overshadowing; within the macro, the variable $myVar is local
#macro( echoGlobalVariable2 $myVar )
    $myVar                  ## if defined, overshadows the global one
#end

#echoGlobalVariable2( 5 )   ## => 5
#set( $myVar = "Hello" )
#echoGlobalVariable2        ## no parameter passed in, => Hello

## overwritten local variable
#macro( createEchoGlobalVariable $myVar )
    $myVar                  ## local, whatever passed in
    #set( $myVar = 14 )     ## global, set to 14
    $myVar
#end

#createEchoGlobalVariable( 32 ) ## local value
$myVar                          ## global => 14

## skip null assignment
#set( $var = "Hello" )
#set( $var = $contentRoot ) ## $contentRoot undefined
$var                        ## => Hello