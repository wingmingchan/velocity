#import( "site://_brisk/core/library/velocity/chanw/chanw_library_import" )
#import( "site://_brisk/core/macros/drulykgVarDump" )

#set( $block = $_.locateBlock( "_cascade/blocks/data/test-multiple-simple-text", "cascade-admin-old" ) )
#set( $sd = $block.StructuredData )

$sd.Class.Name
#chanwGetFQINodeMap( $sd )
#set( $result = "#drulykgVarDump( $chanwGetFQINodeMap )" )
$result.trim()

## work with a set of multiple nodes
## note that when counting, start with 1
#foreach( $count in [ 1..$chanwGetFQINodeMap[ "group;mul-group-multiple-first;0" ][ $KEY_SIZE ] ] )
    ## output the data
    ## when accessing the node, use $foreach.index to start with 0
    $chanwGetFQINodeMap[ "group;mul-group-multiple-first;${foreach.index}" ][ $KEY_DATA ]
#end

#* output:
[Lcom.hannonhill.cascade.api.asset.common.StructuredDataNode;

                                                                                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                        

                                                                                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                                                                LinkedHashMap(7) {
    ["group"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@11687d14 )
        ["data"] == null
        ["type"] == String(5)( "group" )
        ["size"] == Integer( 1 )
        ["subtype"] == null
        ["content"] == null
        ["site"] == null
    }
    ["group;mul-group-multiple-first;0"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@2ac32d8a )
        ["data"] == String(7)( "First 1" )
        ["type"] == String(4)( "text" )
        ["size"] == Integer( 3 )
        ["subtype"] == String(9)( "plaintext" )
        ["content"] == null
        ["site"] == null
    }
    ["group;mul-group-multiple-first;1"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@676476c9 )
        ["data"] == String(7)( "First 2" )
        ["type"] == String(4)( "text" )
        ["size"] == Integer( 3 )
        ["subtype"] == String(9)( "plaintext" )
        ["content"] == null
        ["site"] == null
    }
    ["group;mul-group-multiple-first;2"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@5bcae154 )
        ["data"] == String(7)( "First 3" )
        ["type"] == String(4)( "text" )
        ["size"] == Integer( 3 )
        ["subtype"] == String(9)( "plaintext" )
        ["content"] == null
        ["site"] == null
    }
    ["group;group-single"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@63722e1e )
        ["data"] == String(12)( "group single" )
        ["type"] == String(4)( "text" )
        ["size"] == Integer( 1 )
        ["subtype"] == String(9)( "plaintext" )
        ["content"] == null
        ["site"] == null
    }
    ["group;mul-group-multiple-second;0"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@3f06bbb5 )
        ["data"] == String(8)( "Second 1" )
        ["type"] == String(4)( "text" )
        ["size"] == Integer( 2 )
        ["subtype"] == String(9)( "plaintext" )
        ["content"] == null
        ["site"] == null
    }
    ["group;mul-group-multiple-second;1"] == LinkedHashMap(7) {
        ["node"] == StructuredDataNodeAPIAdapter( com.hannonhill.cascade.api.adapters.StructuredDataNodeAPIAdapter@57912e25 )
        ["data"] == String(8)( "Second 2" )
        ["type"] == String(4)( "text" )
        ["size"] == Integer( 2 )
        ["subtype"] == String(9)( "plaintext" )
        ["content"] == null
        ["site"] == null
    }
}

            First 1
            First 2
            First 3
*#