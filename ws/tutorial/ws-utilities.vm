## Java class names
#set( $JAVA_LANG_OBJECT_CLASS_NAME             = 'java.lang.Object' )
#set( $JAVA_LANG_INTEGER_CLASS_NAME            = 'java.lang.Integer' )
#set( $JAVA_LANG_BOOLEAN_CLASS_NAME            = 'java.lang.Boolean' )
#set( $JAVA_LANG_STRING_CLASS_NAME             = 'java.lang.String' )
#set( $JAVA_LANG_CLASS_CLASS_NAME              = 'java.lang.Class' )
#set( $JAVA_UTIL_ARRAY_LIST_CLASS_NAME         = 'java.util.ArrayList' )
#set( $JAVA_UTIL_LINKEDHASHMAP_CLASS_NAME      = 'java.util.LinkedHashMap' )
#set( $JAVA_UTIL_HASHMAP_CLASS_NAME            = 'java.util.HashMap' )
#set( $JAVA_UTIL_DATE_CLASS_NAME               = 'java.util.Date' )
##
## GSON class names
#set( $GOOGLE_GSON_GSON_CLASS_NAME             = "com.google.gson.Gson" )
#set( $GOOGLE_GSON_JSON_ARRAY_CLASS_NAME       = "com.google.gson.JsonElement" )
#set( $GOOGLE_GSON_JSON_ELEMENT_CLASS_NAME     = "com.google.gson.JsonArray" )
#set( $GOOGLE_GSON_JSON_OBJECT_CLASS_NAME      = "com.google.gson.JsonObject" )
#set( $GOOGLE_GSON_JSON_PRIMITIVE_CLASS_NAME   = "com.google.gson.JsonPrimitive" )
#set( $GOOGLE_GSON_JSON_PARSER_CLASS_NAME      = "com.google.gson.JsonParser" )
##
## WS type constants
#set( $ASSET_FACTORY_TYPE                      = "assetfactory" )
#set( $ASSET_FACTORY_CONTAINER_TYPE            = "assetfactorycontainer" )
#set( $CLOUD_TRANSPORT_TYPE                    = "transport_cloud" )
#set( $CONNECTOR_CONTAINER_TYPE                = "connectorcontainer" )
#set( $CONTENT_TYPE_TYPE                       = "contenttype" )
#set( $CONTENT_TYPE_CONTAINER_TYPE             = "contenttypecontainer" )
#set( $DATA_DEFINITION_TYPE                    = "datadefinition" )
#set( $DATA_DEFINITION_CONTAINER_TYPE          = "datadefinitioncontainer" )
#set( $DATA_DEFINITION_BLOCK_TYPE              = "block_XHTML_DATADEFINITION" )
#set( $DATABASE_TRANSPORT_TYPE                 = "transport_db" )
#set( $DESTINATION_TYPE                        = "destination" )
#set( $FEED_BLOCK_TYPE                         = "block_FEED" )
#set( $FILE_TYPE                               = "file" )
#set( $FOLDER_TYPE                             = "folder" )
#set( $FS_TRANSPORT_TYPE                       = "transport_fs" )
#set( $FTP_TRANSPORT_TYPE                      = "transport_ftp" )
#set( $GOOGLE_ANALYTICS_CONNECTOR_TYPE         = "googleanalyticsconnector" )
#set( $GROUP_TYPE                              = "group" )
#set( $INDEX_BLOCK_TYPE                        = "block_INDEX" )
#set( $METADATASET_TYPE                        = "metadataset" )
#set( $METADATASET_CONTAINER_TYPE              = "metadatasetcontainer" )
#set( $PAGE_TYPE                               = "page" )
#set( $PAGE_CONFIGURATION_SET_TYPE             = "pageconfiguration" )
#set( $PAGE_CONFIGURATION_SET_CONTAINER_TYPE   = "pageconfigurationsetcontainer" )
#set( $PUBLISH_SET_TYPE                        = "publishset" )
#set( $PUBLISH_SET_CONTAINER_TYPE              = "publishsetcontainer" )
#set( $REFERENCE_TYPE                          = "reference" )
#set( $ROLE_TYPE                               = "role" )
#set( $SCRIPT_FORMAT_TYPE                      = "format_SCRIPT" )
#set( $SITE_TYPE                               = "site" )
#set( $SITE_DESTINATION_CONTAINER_TYPE         = "sitedestinationcontainer" )
#set( $SYMLINK_TYPE                            = "symlink" )
#set( $TEMPLATE_TYPE                           = "template" )
#set( $TEXT_BLOCK_TYPE                         = "block_TEXT" )
#set( $TRANSPORT_CONTAINER_TYPE                = "transportcontainer" )
#set( $TWITTER_CONNECTOR_TYPE                  = "twitterconnector" )
#set( $USER_TYPE                               = "user" )
#set( $WORDPRESS_CONNECTOR_TYPE                = "wordpressconnector" )
#set( $WORKFLOW_DEFINITION_TYPE                = "workflowdefinition" )
#set( $WORKFLOW_DEFINITION_CONTAINER_TYPE      = "workflowdefinitioncontainer" )
#set( $XML_BLOCK_TYPE                          = "block_XML" )
#set( $XSLT_FORMAT_TYPE                        = "format_XSLT" )
## GSON objects
#set( $chanwGson = $_.Class.forName(
    $GOOGLE_GSON_GSON_CLASS_NAME ).getConstructor().newInstance() )
#set( $chanwJsonParser = $_.Class.forName(
    $GOOGLE_GSON_JSON_PARSER_CLASS_NAME ).getConstructor().newInstance() )
##
#macro( chanwGetJsonMap $url_chanwGetJsonMap )
    #chanwGetUrlContents( $url_chanwGetJsonMap )
    #set( $drulykJsonStringForEval = $chanwGetUrlContents.replace( '$', '${_EscapeTool.d}'
                                              ).replace( '#', '${_EscapeTool.h}'
                                              ).replace( '\\', '::::::::::backslash::::::::::'
                                              ).replace( '\"', '${_EscapeTool.q}'
                                              ).replace( '\/', '/'
                                              ).replace( '\r\n', '
'
                                              ).replace( '\r', '${_EscapeTool.n}'
                                              ).replace( '\n', '${_EscapeTool.n}'
                                              ).replace( '\t', '    '
                                              ).replace( '\b', '\b'
                                              ).replace( '\f', '\f'
                                              ).replace( '::::::::::backslash::::::::::', '\' )
    )
    #set( $drulykgGsonHash = $_.Class.forName( "com.google.gson.Gson" ).newInstance().fromJson(
        $chanwGetUrlContents, $_.Class.forName( 'java.util.LinkedHashMap' ) ) )
    #evaluate( "${_EscapeTool.h}set( ${_EscapeTool.d}drulykgCleanEvaluateHash = $drulykJsonStringForEval )" )
    #drulykgCleanUpJsonMaps( $drulykgCleanEvaluateHash $drulykgGsonHash )
    #set( $chanwGetJsonMap = $drulykgCleanEvaluateHash )
#end
##
#macro( chanwGetScanner $url_chanwGetScanner )
    #set( $chanwGetScanner = "" )
    #chanwGetUrl( $url_chanwGetScanner )
    #chanwGetScannerFromInputStream( $chanwGetUrl.openStream() )
    #set( $chanwGetScanner = $chanwGetScannerFromInputStream )
#end
##
#macro( chanwGetScannerFromInputStream $inputStream_chanwGetScannerFromInputStream )
    #set( $chanwGetScannerFromInputStream = "" )
    #set( $chanwGetScannerFromInputStream = $_.Class.forName( "java.util.Scanner" ).getConstructor(
        $_.Class.forName( "java.io.InputStream" ) ).newInstance( $inputStream_chanwGetScannerFromInputStream ) )
#end
##
#macro( chanwGetUrl $url_chanwGetUrl )
    #set( $chanwGetUrl = "" )
    #set( $chanwGetUrl = $_.Class.forName(
        "java.net.URL" ).getConstructor( $JAVA_LANG_STRING_CLASS_NAME.Class ).newInstance( $url_chanwGetUrl ) )
#end
##
#macro( chanwGetUrlContents $url_chanwGetUrlContents )
    #set( $chanwGetUrlContents = "" )
    #chanwGetScanner( $url_chanwGetUrlContents )
    #set( $chanwGetUrlContents = $chanwGetScanner.useDelimiter( "\\A" ).next() )
#end
##
#macro( chanwSendRest $url_chanwSendRest $jsonObj_chanwSendRest )
    ## turn JSON object to String
    #set( $chanwSendRestJsonString = $jsonObj_chanwSendRest.toString() )
    ## connection
    #chanwGetUrlContents( $url_chanwSendRest )
    #set( $chanwConnectonObj  = $chanwGetUrl.openConnection() )
    #set( $void               = $chanwConnectonObj.setRequestMethod( "POST" ) )
    #set( $void               = $chanwConnectonObj.setRequestProperty( "Content-Type", "application/json; charset=UTF-8" ) )
    ## prepare data
    #set( $chanwByteArray     = $chanwSendRestJsonString.getBytes() )
    #set( $chanwByteArraySize = $chanwByteArray.size() )
    #set( $void = $chanwConnectonObj.setFixedLengthStreamingMode( $chanwByteArraySize ) )
    ## prepare output
    #set( $void = $chanwConnectonObj.setDoOutput( true ) )
    #set( $void = $chanwConnectonObj.setDoInput( true ) )
    #set( $chanwOutputStream     = $chanwConnectonObj.getOutputStream() )
    #set( $chanwDataOutputStream = $_.Class.forName( "java.io.DataOutputStream" ).getConstructors()[ 0 ].newInstance( $chanwOutputStream ) )
    ## send data
    #set( $void = $chanwDataOutputStream.write( $chanwByteArray ) )
    #set( $void = $chanwDataOutputStream.flush() )
    #set( $void = $chanwDataOutputStream.close() )
    ## read response
    #set( $chanwInputStream = "" )
    #set( $chanwInputStream = $chanwConnectonObj.getInputStream() )
    #if( $chanwInputStream == "" )
        #set( $chanwInputStream = $chanwConnectonObj.getErrorStream() )
    #end
    #chanwGetScannerFromInputStream( $chanwInputStream )
    #set( $chanwResponseMessage = "" )
    #set( $chanwResponseMessage = $chanwConnectonObj.getResponseMessage() )
    #set( $chanwSendRest = $chanwGetScannerFromInputStream.useDelimiter( "\\A" ).next() + " " + $chanwResponseMessage )
#end
##
#macro( drulykgCleanUpJsonMaps $evalMap_drulykgCleanUpJsonMaps $gsonMap_drulykgCleanUpJsonMaps )
##
    ## We only care about LinkedHashMaps and ArrayLists because those are iterable
    #if(
        ( $evalMap_drulykgCleanUpJsonMaps.Class.Name == 'java.util.LinkedHashMap' || $evalMap_drulykgCleanUpJsonMaps.Class.Name == 'java.util.ArrayList' ) &&
        ( $gsonMap_drulykgCleanUpJsonMaps.Class.Name == 'java.util.LinkedHashMap' || $gsonMap_drulykgCleanUpJsonMaps.Class.Name == 'java.util.ArrayList' )
    )
##
        ## Set up a few class vars
        #if( $drulykgCleanUpJsonMapsVars.Class.Name != 'java.util.LinkedHashMap' )
##
            ## Keep track of recursion level
            #set( $drulykgCleanUpJsonMapsVars = {
                'i': -1
            } )
        #end
##
        ## Increment recursion level
        #set( $drulykgCleanUpJsonMapsVars[ 'i' ] = $drulykgCleanUpJsonMapsVars[ 'i' ] + 1 )
##
        ## We need to cache the parameters for this recursion level
        #set( $drulykgCleanUpJsonMapsVars[ $drulykgCleanUpJsonMapsVars[ 'i' ] ] = {
            'eval': $evalMap_drulykgCleanUpJsonMaps,
            'gson': $gsonMap_drulykgCleanUpJsonMaps,
            'evalKeys': $evalMap_drulykgCleanUpJsonMaps.keySet()
        } )
##
        ## If no keySet() was available then fetch the index keys if the .size() is greater than zero
        #if(
            !$drulykgCleanUpJsonMapsVars[ $drulykgCleanUpJsonMapsVars[ 'i' ] ][ 'evalKeys' ].Class.Name &&
            $drulykgCleanUpJsonMapsVars[ $drulykgCleanUpJsonMapsVars[ 'i' ] ][ 'eval' ].size() > 0
        )
            #set( $drulykgCleanUpJsonMapsVars[ $drulykgCleanUpJsonMapsVars[ 'i' ] ][ 'evalKeys' ] = [ 0..$_MathTool.sub( $drulykgCleanUpJsonMapsVars[ $drulykgCleanUpJsonMapsVars[ 'i' ] ][ 'eval' ].size(), 1 ) ] )
        #end
##
        ## Loop the listing of keys
        #foreach( $key in $drulykgCleanUpJsonMapsVars[ $drulykgCleanUpJsonMapsVars[ 'i' ] ][ 'evalKeys' ] )
##
            ## For strings we want to apply the $gsonMap_drulykgCleanUpJsonMaps value to the $evalMap_drulykgCleanUpJsonMaps
            #if( $drulykgCleanUpJsonMapsVars[ $drulykgCleanUpJsonMapsVars[ 'i' ] ][ 'eval' ][ $key ].Class.Name == 'java.lang.String' )
                #set( $drulykgCleanUpJsonMapsVars[ $drulykgCleanUpJsonMapsVars[ 'i' ] ][ 'eval' ][ $key ] = $drulykgCleanUpJsonMapsVars[ $drulykgCleanUpJsonMapsVars[ 'i' ] ][ 'gson' ][ $key ] )
##
            ## If the class names are not the same then take the $evalMap_drulykgCleanUpJsonMaps value and apply it to $gsonMap_drulykgCleanUpJsonMaps
            ## This is primarily for the issue with ints being converted to doubles
            #elseif( $drulykgCleanUpJsonMapsVars[ $drulykgCleanUpJsonMapsVars[ 'i' ] ][ 'eval' ][ $key ].Class.Name != $drulykgCleanUpJsonMapsVars[ $drulykgCleanUpJsonMapsVars[ 'i' ] ][ 'gson' ][ $key ].Class.Name )
                #set( $drulykgCleanUpJsonMapsVars[ $drulykgCleanUpJsonMapsVars[ 'i' ] ][ 'gson' ][ $key ] = $drulykgCleanUpJsonMapsVars[ $drulykgCleanUpJsonMapsVars[ 'i' ] ][ 'eval' ][ $key ] )
##
            ## If we are dealing with a LinkedHashMap or ArrayList then we need to send it back through this macro
            #elseif(
                $drulykgCleanUpJsonMapsVars[ $drulykgCleanUpJsonMapsVars[ 'i' ] ][ 'eval' ][ $key ].Class.Name == 'java.util.LinkedHashMap' ||
                $drulykgCleanUpJsonMapsVars[ $drulykgCleanUpJsonMapsVars[ 'i' ] ][ 'eval' ][ $key ].Class.Name == 'java.util.ArrayList'
            )
##
                ## Due to Velocity object scope and other mysteries we need to cache these before sending them through the macro again
                #set( $drulykgCleanUpJsonMapsVarsEvalToPass = $drulykgCleanUpJsonMapsVars[ $drulykgCleanUpJsonMapsVars[ 'i' ] ][ 'eval' ][ $key ] )
                #set( $drulykgCleanUpJsonMapsVarsGsonToPass = $drulykgCleanUpJsonMapsVars[ $drulykgCleanUpJsonMapsVars[ 'i' ] ][ 'gson' ][ $key ] )
##
                #drulykgCleanUpJsonMaps( $drulykgCleanUpJsonMapsVarsEvalToPass $drulykgCleanUpJsonMapsVarsGsonToPass )
            #end
##
        #end
##
        ## Decrement recursion level
        #set( $drulykgCleanUpJsonMapsVars[ 'i' ] = $drulykgCleanUpJsonMapsVars[ 'i' ] - 1 )
    #end
#end